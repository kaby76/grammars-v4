(file_input (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """\nThis is an implementation of decimal floating point arithmetic based on\nthe General Decimal Arithmetic Specification:\n\n    http://speleotrove.com/decimal/decarith.html\n\nand IEEE standard 854-1987:\n\n    http://en.wikipedia.org/wiki/IEEE_854-1987\n\nDecimal floating point has finite precision with arbitrarily large bounds.\n\nThe purpose of this module is to support arithmetic using familiar\n"schoolhouse" rules and to avoid some of the tricky representation\nissues associated with binary floating point.  The package is especially\nuseful for financial applications or for contexts where users have\nexpectations that are at odds with binary floating point (for instance,\nin binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead\nof 0.0; Decimal('1.00') % Decimal('0.1') returns the expected\nDecimal('0.00')).\n\nHere are some examples of using the decimal module:\n\n>>> from decimal import *\n>>> setcontext(ExtendedContext)\n>>> Decimal(0)\nDecimal('0')\n>>> Decimal('1')\nDecimal('1')\n>>> Decimal('-.0123')\nDecimal('-0.0123')\n>>> Decimal(123456)\nDecimal('123456')\n>>> Decimal('123.45e12345678')\nDecimal('1.2345E+12345680')\n>>> Decimal('1.33') + Decimal('1.27')\nDecimal('2.60')\n>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')\nDecimal('-2.20')\n>>> dig = Decimal(1)\n>>> print(dig / Decimal(3))\n0.333333333\n>>> getcontext().prec = 18\n>>> print(dig / Decimal(3))\n0.333333333333333333\n>>> print(dig.sqrt())\n1\n>>> print(Decimal(3).sqrt())\n1.73205080756887729\n>>> print(Decimal(3) ** 123)\n4.85192780976896427E+58\n>>> inf = Decimal(1) / Decimal(0)\n>>> print(inf)\nInfinity\n>>> neginf = Decimal(-1) / Decimal(0)\n>>> print(neginf)\n-Infinity\n>>> print(neginf + inf)\nNaN\n>>> print(neginf * inf)\n-Infinity\n>>> print(dig / 0)\nInfinity\n>>> getcontext().traps[DivisionByZero] = 1\n>>> print(dig / 0)\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.DivisionByZero: x / 0\n>>> c = Context()\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> c.divide(Decimal(0), Decimal(0))\nDecimal('NaN')\n>>> c.traps[InvalidOperation] = 1\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> print(c.flags[InvalidOperation])\n0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nTraceback (most recent call last):\n  ...\n  ...\n  ...\ndecimal.InvalidOperation: 0 / 0\n>>> print(c.flags[InvalidOperation])\n1\n>>> c.flags[InvalidOperation] = 0\n>>> c.traps[InvalidOperation] = 0\n>>> print(c.divide(Decimal(0), Decimal(0)))\nNaN\n>>> print(c.flags[InvalidOperation])\n1\n>>>\n"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __all__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Decimal')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Context')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DecimalTuple')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DefaultContext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'BasicContext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ExtendedContext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DecimalException')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Clamped')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'InvalidOperation')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DivisionByZero')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Inexact')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Rounded')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Subnormal')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Overflow')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Underflow')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'FloatOperation')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DivisionImpossible')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'InvalidContext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ConversionSyntax')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DivisionUndefined')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_DOWN')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_UP')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_EVEN')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_CEILING')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_FLOOR')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_UP')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_DOWN')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_05UP')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'setcontext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'getcontext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'localcontext')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'MAX_PREC')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'MAX_EMAX')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'MIN_EMIN')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'MIN_ETINY')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'HAVE_THREADS')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'HAVE_CONTEXTVAR'))))))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __xname__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom __name__)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __name__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __version__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1.70')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __libmpdec_version__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "2.4.2")))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name math) as _math))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name numbers) as _numbers))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name sys)))))) \n)) (statement (compound_stmt (try_stmt try : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (import_stmt (import_from from (dotted_name collections) import (import_from_targets (import_from_as_names (import_from_as_name namedtuple as _namedtuple)))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom DecimalTuple)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _namedtuple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'DecimalTuple')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign digits exponent')))))))))))))))))) , (kwargs (kwarg_or_starred module = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal')))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (except_block except (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ImportError)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom DecimalTuple)))) = (star_expressions (star_expression (expression (lambdef lambda (lambda_params (lambda_parameters (lambda_star_etc * (lambda_param_no_default (lambda_param args))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom args)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_DOWN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_DOWN')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_HALF_UP)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_UP')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_HALF_EVEN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_EVEN')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_CEILING)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_CEILING')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_FLOOR)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_FLOOR')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_UP)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_UP')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_HALF_DOWN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_HALF_DOWN')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ROUND_05UP)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ROUND_05UP')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom HAVE_THREADS)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom HAVE_CONTEXTVAR)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom sys)) . maxsize)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 2))) ** (factor (power (await_primary (primary (atom 63))))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MAX_PREC)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 999999999999999999)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MAX_EMAX)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 999999999999999999)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MIN_EMIN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 999999999999999999))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MAX_PREC)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 425000000)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MAX_EMAX)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 425000000)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MIN_EMIN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 425000000))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom MIN_ETINY)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom MIN_EMIN))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom MAX_PREC))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (class_def (class_def_raw class DecimalException ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ArithmeticError)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt pass) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Clamped ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class InvalidOperation ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom args))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom args)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom args)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NaN)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class ConversionSyntax ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if a string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NaN)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class DivisionByZero ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ZeroDivisionError)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (param_no_default (param sign) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class DivisionImpossible ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NaN)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class DivisionUndefined ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ZeroDivisionError)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NaN)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Inexact ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class InvalidContext ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NaN)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Rounded ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Subnormal ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Overflow ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def handle ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (param_no_default (param sign) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_UP)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_DOWN)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_UP))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_CEILING))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '9')))))))) * (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '9')))))))) * (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Underflow ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class FloatOperation ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DecimalException)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom TypeError)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Enable stricter semantics for mixing floats and Decimals.\n\n    If the signal is not trapped (default), mixing floats and Decimals is\n    permitted in the Decimal() constructor, context.create_decimal() and\n    all comparison operators. Both conversion and comparisons are exact.\n    Any occurrence of a mixed operation is silently recorded by setting\n    FloatOperation in the context flags.  Explicit conversions with\n    Decimal.from_float() or context.create_decimal_from_float() do not\n    set the flag.\n\n    Otherwise (the signal is trapped), only equality comparisons and explicit\n    conversions are silent. All other mixed operations raise FloatOperation.\n    """))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _signals)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom FloatOperation))))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _condition_map)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (dict { (double_starred_kvpairs (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ConversionSyntax)))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionImpossible)))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidContext)))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation))))))))))))))))))) }))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _rounding_modes)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_DOWN)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_UP)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_CEILING)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_UP)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_DOWN)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_05UP))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name contextvars)))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _current_context_var)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom contextvars)) . ContextVar) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal_context')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _context_attributes)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom frozenset)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'prec')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Emin')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Emax')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'capitals')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'clamp')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'rounding')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'flags')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'traps'))))))))))))))))))))) ]))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def getcontext ( ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns this thread's context.\n\n    If this thread does not yet have a context, returns\n    a new context and sets this thread's context.\n    New contexts are copies of DefaultContext.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (try_stmt try : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _current_context_var)) . get) ( )))))))))))))))))))) \n))) <DEDENT>) (except_block except (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom LookupError)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _current_context_var)) . set) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def setcontext ( (params (parameters (param_no_default (param context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Set this thread's context to context."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DefaultContext)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom BasicContext)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ExtendedContext))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . clear_flags) ( ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _current_context_var)) . set) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (del_stmt del (del_targets (del_target (del_t_atom contextvars))))) \n)) (statement (compound_stmt (function_def (function_def_raw def localcontext ( (params (parameters (param_with_default (param ctx) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (star_etc (kwds ** (param_no_default (param kwargs)))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return a context manager for a copy of the supplied context\n\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n                 # Rest of sin calculation algorithm\n                 # uses a precision 2 greater than normal\n             return +s  # Convert result to normal precision\n\n         def sin(x):\n             with localcontext(ExtendedContext):\n                 # Rest of sin calculation algorithm\n                 # uses the Extended Context from the\n                 # General Decimal Arithmetic Specification\n             return +s  # Convert result to normal context\n\n    >>> setcontext(DefaultContext)\n    >>> print(getcontext().prec)\n    28\n    >>> with localcontext():\n    ...     ctx = getcontext()\n    ...     ctx.prec += 2\n    ...     print(ctx.prec)\n    ...\n    30\n    >>> with localcontext(ExtendedContext):\n    ...     print(getcontext().prec)\n    ...\n    9\n    >>> print(getcontext().prec)\n    28\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ctx))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ctx)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ctx_manager)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _ContextManager)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ctx)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom key))) , (star_target (target_with_star_atom (star_atom value)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom kwargs)) . items) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom key))))))))))) (compare_op_bitwise_or_pair (notin_bitwise_or not in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _context_attributes))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (fstring f" (fstring_middle ') (fstring_middle (fstring_replacement_field { (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom key)))))))))))))))))) })) (fstring_middle ' is an invalid keyword argument for this function) ")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom setattr)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ctx_manager)) . new_context))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom key)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ctx_manager)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Decimal ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom object)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Floating point class for decimal arithmetic."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __slots__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_exp')))))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_int')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_sign')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_is_special'))))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __new__ ( (params (parameters (param_no_default (param cls) ,) (param_with_default (param value) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "0"))))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Create a decimal point instance.\n\n        >>> Decimal('3.14')              # string input\n        Decimal('3.14')\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal('3.14')\n        >>> Decimal(314)                 # int\n        Decimal('314')\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal('314')\n        >>> Decimal('  3.14  \\n')        # leading and trailing whitespace okay\n        Decimal('3.14')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __new__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom cls)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom m)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _parser)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (primary (atom value)) . strip) ( )) . replace) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "_")))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "")))))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom m))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ConversionSyntax)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Invalid literal for Decimal: %r")))))))) % (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign')))))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-"))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'int')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom intpart))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'frac')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'exp')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom intpart))))))) + (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom exp))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom diag)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'diag')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom diag))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom diag)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))) )) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . group) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'signal')))))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N')))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n')))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F')))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _sign))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _is_special))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _WorkRep)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . sign))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . exp))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom list)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom tuple))))))))))))))))))) )))))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Invalid tuple size in creation of Decimal ') (string 'from list or tuple.  The list or tuple ') (string 'should have exactly three elements.')))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ))))))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "Invalid sign.  The first value in the tuple ") (string "should be an integer; either 0 for a ") (string "positive number or 1 for a negative number.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ]))))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom digit)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digit)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digit))))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 9))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digit))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom digits)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digit)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "The second value in the tuple must ") (string "be composed of integers in the range ") (string "0 through 9.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n')))))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N'))))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string '')))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom map)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ]))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string '')))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom map)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "The third value in the tuple must ") (string "be an integer, or one of the ") (string "strings 'F', 'n', 'N'.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom float)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom FloatOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "strict semantics for mixing floats and Decimals are ") (string "enabled")))))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom value)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom Decimal)) . from_float) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _sign))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _is_special))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Cannot convert %r to Decimal")))))))) % (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (decorators @ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom classmethod))))))))))))))))) \n) (function_def_raw def from_float ( (params (parameters (param_no_default (param cls) ,) (param_no_default (param f)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Converts a float to a decimal number, exactly.\n\n        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').\n        Since 0.1 is not exactly representable in binary floating point, the\n        value is stored as the nearest representable value which is\n        0x1.999999999999ap-4.  The exact equivalent of the value in decimal\n        is 0.1000000000000000055511151231257827021181583404541015625.\n\n        >>> Decimal.from_float(0.1)\n        Decimal('0.1000000000000000055511151231257827021181583404541015625')\n        >>> Decimal.from_float(float('nan'))\n        Decimal('NaN')\n        >>> Decimal.from_float(float('inf'))\n        Decimal('Infinity')\n        >>> Decimal.from_float(-float('inf'))\n        Decimal('-Infinity')\n        >>> Decimal.from_float(-0.0)\n        Decimal('-0')\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom k)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom float)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _math)) . isinf) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _math)) . isnan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom cls)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom repr)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _math)) . copysign) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1.0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1.0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n))) , (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )) . as_integer_ratio) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom k)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom d)) . bit_length) ( ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) * (factor (power (await_primary (primary (atom 5))) ** (factor (power (await_primary (primary (atom k)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "argument must be int or float.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom k))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom cls))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom cls)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _isnan ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns whether the number is not actually one.\n\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _isinfinity ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns whether the number is infinite\n\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _check_nans ( (params (parameters (param_no_default (param self) ,) (param_with_default (param other) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns whether the number is not actually one.\n\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n\n        Done before operations.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_is_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_is_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _compare_check_nans ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_no_default (param context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Version of _check_nans used for the signaling comparisons\n        compare_signal, __le__, __lt__, __ge__, __gt__.\n\n        Signal InvalidOperation if either self or other is a (quiet\n        or signaling) NaN.  Signaling NaNs take precedence over quiet\n        NaNs.\n\n        Return 0 if neither operand is a NaN.\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_snan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'comparison involving sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . is_snan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'comparison involving sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_qnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'comparison involving NaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . is_qnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'comparison involving NaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __bool__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is nonzero; otherwise return False.\n\n        NaNs and infinities are considered nonzero.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _cmp ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compare the two non-NaN decimal instances self and other.\n\n        Returns -1 if self < other, 0 if self == other and 1\n        if self > other.  This routine is for internal use only."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_inf)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_inf)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_inf))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_inf))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_inf))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_inf))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) ))))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_adjusted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_adjusted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_adjusted))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_adjusted))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_padded)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_padded)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_padded))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_padded))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_padded))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_padded))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_adjusted))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_adjusted))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))))) ))))))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __eq__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self))) , (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_for_comparison)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred equality_op = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __lt__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self))) , (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_for_comparison)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _compare_check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __le__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self))) , (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_for_comparison)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _compare_check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __gt__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self))) , (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_for_comparison)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _compare_check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __ge__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self))) , (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_for_comparison)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _compare_check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compare self to other.  Return a decimal value:\n\n        a or b is a NaN ==> Decimal('NaN')\n        a < b           ==> Decimal('-1')\n        a == b          ==> Decimal('0')\n        a > b           ==> Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __hash__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """x.__hash__() <==> hash(x)"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_snan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Cannot hash a signaling NaN value.')))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __hash__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom _PyHASH_INF))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _PyHASH_INF)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_hash)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _PyHASH_MODULUS)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_hash)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _PyHASH_10INV)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _PyHASH_MODULUS)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom hash_)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))) * (factor (power (await_primary (primary (atom exp_hash)))))) % (factor (power (await_primary (primary (atom _PyHASH_MODULUS)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom hash_))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom hash_)))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def as_tuple ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Represents the number as a triple tuple.\n\n        To show the internals exactly as they are.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom DecimalTuple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom tuple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom map)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def as_integer_ratio ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Express a finite Decimal instance in the form n / d.\n\n        Returns a pair (n, d) of integers.  When called on an infinity\n        or NaN, raises OverflowError or ValueError respectively.\n\n        >>> Decimal('3.14').as_integer_ratio()\n        (157, 50)\n        >>> Decimal('-123e5').as_integer_ratio()\n        (-12300000, 1)\n        >>> Decimal('0.00').as_integer_ratio()\n        (0, 1)\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot convert NaN to integer ratio")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom OverflowError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot convert Infinity to integer ratio")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n))) , (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d5)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d5))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) % (factor (power (await_primary (primary (atom 5))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target d5) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shift2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))) & (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom n)))))))))))))))))) )))) . bit_length) ( ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d2)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift2))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign >>=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target d2) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift2)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom 5))) ** (factor (power (await_primary (primary (atom d5)))))))))) << (sum (term (factor (power (await_primary (primary (atom d2)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom n))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __repr__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Represents the number as an instance of Decimal."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Decimal('%s')")))))))) % (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __str__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param eng) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return string representation of the number in scientific notation.\n\n        Captures all of the information in the underlying representation.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-'))))))))))))))))))))) ]))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom (strings (string 'Infinity')))))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom (strings (string 'NaN'))))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom (strings (string 'sNaN'))))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom leftdigits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 6)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom eng)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom leftdigits))))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))) % (factor (power (await_primary (primary (atom 3))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom leftdigits))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))) % (factor (power (await_primary (primary (atom 3))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom (strings (string '.'))))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom dotplace)))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom dotplace))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string '.'))))))))) + (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>)))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'e')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'E'))))))))))))))))))))) ]))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . capitals)))))))))))))))))) ])))))) + (term (term (factor (power (await_primary (primary (atom (strings (string "%+d")))))))) % (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom leftdigits))))))) - (term (factor (power (await_primary (primary (atom dotplace))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom intpart))))))) + (term (factor (power (await_primary (primary (atom fracpart))))))) + (term (factor (power (await_primary (primary (atom exp)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_eng_string ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Convert to a string, using engineering notation if an exponent is needed.\n\n        Engineering notation has an exponent which is a multiple of 3.  This\n        can leave up to 3 digits to the left of the decimal place and may\n        require the addition of either one or two trailing zeros.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __str__) ( (arguments (args (kwargs (kwarg_or_starred eng = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) , (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __neg__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy with the sign switched.\n\n        Rounds, if it has reason.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_abs) ( )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_negate) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __pos__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy, unless it is a sNaN.\n\n        Rounds the number (if more than precision digits)\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_abs) ( )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __abs__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param round) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the absolute value of self.\n\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom round)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_abs) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __neg__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __pos__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __add__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns self + other.\n\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-INF + INF')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom negativezero)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom negativezero)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom negativezero))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1))) , (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _normalize)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op2)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . sign)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . sign)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom negativezero)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1))) , (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op2))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom op1)) . sign)) , (star_target (target_with_star_atom (t_primary (atom op2)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . sign)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . sign))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom op1)) . sign)) , (star_target (target_with_star_atom (t_primary (atom op2)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int)))))) + (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int)))))) - (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom result)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __radd__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom __add__)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __sub__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return self - other"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __add__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . copy_negate) ( )))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rsub__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return other - self"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __sub__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __mul__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return self * other.\n\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom resultsign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '(+-)INF * 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 * (+-)INF')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom resultexp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultexp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultexp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultexp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultsign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom op1)) . int))))) * (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom resultexp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __rmul__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom __mul__)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __truediv__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return self / other."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '(+-)INF/(+-)INF')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Division by infinity')))))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 / 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x / 0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))) - (term (factor (power (await_primary (primary (atom shift)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom op1)) . int))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom shift)))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom op2)) . int))))) * (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom shift))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom remainder))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom 5))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target coeff) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exp))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom 10))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target coeff) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target exp) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _divide ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_no_default (param context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return (self // other, self % other), to context.prec precision.\n\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom expdiff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( ))))))) - (term (factor (power (await_primary (primary (primary (primary (atom other)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom expdiff))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))) ))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom expdiff))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target (single_subscript_attribute_target (t_primary (atom op1)) . int)) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))) - (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))))))))))))) )))))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target (single_subscript_attribute_target (t_primary (atom op2)) . int)) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))) - (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))))))))))))) )))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q))) , (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exp)))))))))))))))))) ))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionImpossible)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'quotient too large in //, % or divmod')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rtruediv__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Swaps self/other and returns __truediv__."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __truediv__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __divmod__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """\n        Return (self // other, self % other)\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'divmod(INF, INF)')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))))) ]))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'INF % x')))))))))))))))))))) ))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'divmod(0, 0)')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x // 0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))))) )))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x % 0')))))))))))))))))))) ))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom quotient))) , (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _divide) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom remainder)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom quotient))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom remainder)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rdivmod__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Swaps self/other and returns __divmod__."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __divmod__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __mod__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """\n        self % other\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'INF % x')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x % 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 % 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . _divide) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom remainder)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom remainder)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rmod__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Swaps self/other and returns __mod__."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __mod__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def remainder_near ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'remainder_near(infinity, x)')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'remainder_near(x, 0)')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'remainder_near(0, 0)')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exponent)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom expdiff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( ))))))) - (term (factor (power (await_primary (primary (primary (primary (atom other)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom expdiff))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionImpossible)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom expdiff))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exponent)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op1)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op2)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target (single_subscript_attribute_target (t_primary (atom op1)) . int)) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))) - (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))))))))))))) )))))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target (single_subscript_attribute_target (t_primary (atom op2)) . int)) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))) - (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))))))))))))) )))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q))) , (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom 2)))))) * (factor (power (await_primary (primary (atom r))))))) + (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target r) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target q) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionImpossible)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (atom sign)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom r))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ideal_exponent)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __floordiv__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """self // other"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'INF // INF')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x // 0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionUndefined)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 // 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . _divide) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rfloordiv__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Swaps self/other and returns __floordiv__."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __floordiv__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __float__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Float representation."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_snan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "Cannot convert signaling NaN to float")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom s)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-nan"))))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "nan"))))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom s)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom float)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __int__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Converts self to an int, truncating if necessary."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "Cannot convert NaN to integer")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom OverflowError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "Cannot convert infinity to integer")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom s)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))) ))))) ** (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom s)))))) * (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom s)))))) * (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))) ]))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __trunc__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom __int__)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (decorators @ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom property))))))))))))))))) \n) (function_def_raw def real ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (decorators @ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom property))))))))))))))))) \n) (function_def_raw def imag ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def conjugate ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __complex__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom complex)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom float)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _fix_nan ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Decapitate the payload of a NaN to fit the context"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom payload)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom max_payload_len)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . clamp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom payload)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom max_payload_len))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom payload)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom payload)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom payload)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom max_payload_len)))))))))))))))) :)) ]) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom payload)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _fix ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round if it is necessary to keep self within prec precision.\n\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom Etiny)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom Etop)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etop) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_max)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etop))))))))))))))))))) ]))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . clamp)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom new_exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etiny)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_max)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_exp))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_min)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_min))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etop))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'above Emax')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_is_subnormal)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_min))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etiny)))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_subnormal))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_min)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etiny)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_min))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (atom exp_min)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom exp_min))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding_method)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _pick_rounding_function) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom changed)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom rounding_method)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) ]))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom changed))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom coeff)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target exp_min) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_min))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etop))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'above Emax')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_min)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom changed))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_subnormal))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_subnormal))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom changed))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_subnormal))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . clamp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etop))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_padded)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (atom Etop))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_padded)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Etop)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_down ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Also known as round-towards-0, truncate."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _all_zeros)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_up ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds away from 0."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_half_up ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds 5 up (away from 0)"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '56789'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _all_zeros)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_half_down ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round 5 down"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _exact_half)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round_half_up) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_half_even ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round 5 to even, rest to nearest."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _exact_half)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom prec))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '02468'))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round_half_up) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_ceiling ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds up (not away from 0 if negative.)"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_floor ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds down (not towards 0 if negative)"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round_05up ( (params (parameters (param_no_default (param self) ,) (param_no_default (param prec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round down unless digit prec-1 is 0 or 5."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom prec))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (notin_bitwise_or not in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '05'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (primary (atom self)) . _round_down) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec)))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _pick_rounding_function)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dict)) ( (arguments (args (kwargs (kwarg_or_starred ROUND_DOWN = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_down))))))))))))))))) , (kwarg_or_starred ROUND_UP = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_up))))))))))))))))) , (kwarg_or_starred ROUND_HALF_UP = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_half_up))))))))))))))))) , (kwarg_or_starred ROUND_HALF_DOWN = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_half_down))))))))))))))))) , (kwarg_or_starred ROUND_HALF_EVEN = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_half_even))))))))))))))))) , (kwarg_or_starred ROUND_CEILING = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_ceiling))))))))))))))))) , (kwarg_or_starred ROUND_FLOOR = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_floor))))))))))))))))) , (kwarg_or_starred ROUND_05UP = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _round_05up))))))))))))))))))) ,) )))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __round__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param n) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round self to the nearest integer, or to a given precision.\n\n        If only one argument is supplied, round a finite Decimal\n        instance self to the nearest integer.  If self is infinite or\n        a NaN then a Python exception is raised.  If self is finite\n        and lies exactly halfway between two integers then it is\n        rounded to the integer with even last digit.\n\n        >>> round(Decimal('123.456'))\n        123\n        >>> round(Decimal('-456.789'))\n        -457\n        >>> round(Decimal('-3.0'))\n        -3\n        >>> round(Decimal('2.5'))\n        2\n        >>> round(Decimal('3.5'))\n        4\n        >>> round(Decimal('Inf'))\n        Traceback (most recent call last):\n          ...\n        OverflowError: cannot round an infinity\n        >>> round(Decimal('NaN'))\n        Traceback (most recent call last):\n          ...\n        ValueError: cannot round a NaN\n\n        If a second argument n is supplied, self is rounded to n\n        decimal places using the rounding mode for the current\n        context.\n\n        For an integer n, round(self, -n) is exactly equivalent to\n        self.quantize(Decimal('1En')).\n\n        >>> round(Decimal('123.456'), 0)\n        Decimal('123')\n        >>> round(Decimal('123.456'), 2)\n        Decimal('123.46')\n        >>> round(Decimal('123.456'), -2)\n        Decimal('1E+2')\n        >>> round(Decimal('-Infinity'), 37)\n        Decimal('NaN')\n        >>> round(Decimal('sNaN123'), 0)\n        Decimal('NaN123')\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Second argument to round should be integral')))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom n))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . quantize) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round a NaN")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom OverflowError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round an infinity")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __floor__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the floor of self, as an integer.\n\n        For a finite Decimal instance self, return the greatest\n        integer n such that n <= self.  If self is infinite or a NaN\n        then a Python exception is raised.\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round a NaN")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom OverflowError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round an infinity")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __ceil__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the ceiling of self, as an integer.\n\n        For a finite Decimal instance self, return the least integer n\n        such that n >= self.  If self is infinite or a NaN then a\n        Python exception is raised.\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round a NaN")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom OverflowError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "cannot round an infinity")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_CEILING)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def fma ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_no_default (param third) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Fused multiply-add.\n\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom third)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom third)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom product)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom product)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'INF * 0 in fma')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom product)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 * INF in fma')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom product)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom product)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))) * (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) )))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom product)) . __add__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom third)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _power_modulo ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_no_default (param modulo) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Three argument version of __pow__"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom modulo)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom modulo_is_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom modulo)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_is_nan)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo_is_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_is_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo_is_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sNaN')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_is_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_is_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom modulo)) . _fix_nan) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinteger) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom modulo)) . _isinteger) ( ))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'pow() 3rd argument not allowed ') (string 'unless all arguments are integers')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'pow() 2nd argument cannot be ') (string 'negative when 3rd argument specified')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'pow() 3rd argument cannot be 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom modulo)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'insufficient precision: pow() 3rd ') (string 'argument must not have more than ') (string 'precision digits')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))) and (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'at least one of pow() 1st argument ') (string 'and 2nd argument must be nonzero; ') (string '0**0 is not defined')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _iseven) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom modulo)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom base)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . to_integral_value) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . to_integral_value) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom base)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (primary (atom base)) . int))))) % (factor (power (await_primary (primary (atom modulo)))))) * (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom base)) . exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) ))))))))))))))))) )))))))) % (factor (power (await_primary (primary (atom modulo)))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom i)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom range)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exponent)) . exp))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom base)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom base)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom base)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom base)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exponent)) . int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom base)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _power_exact ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Attempt to compute self**other exactly.\n\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom x)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc))) , (star_target (target_with_star_atom (star_atom xe)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom x)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom x)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xc)))))) % (factor (power (await_primary (primary (atom 10))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target xc) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target xe) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom yc))) , (star_target (target_with_star_atom (star_atom ye)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom yc)))))) % (factor (power (await_primary (primary (atom 10))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target yc) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target ye) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target xe) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xe)))))) % (factor (power (await_primary (primary (atom 10))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target xe) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target ye) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xe)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom ye)))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom exponent))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))) * (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom zeros)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom exponent))))))) - (term (factor (power (await_primary (primary (atom ideal_exponent)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom zeros)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom zeros)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom exponent))))))) - (term (factor (power (await_primary (primary (atom zeros)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom last_digit)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xc)))))) % (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom last_digit))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 4)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 6)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 8))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))) & (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom xc)))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom _nbits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom emax)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom p)))))) * (factor (power (await_primary (primary (atom 93)))))) // (factor (power (await_primary (primary (atom 65)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom emax)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _decimal_lshift_exact)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom e)))))) * (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xe)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _decimal_lshift_exact)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xe)))))) * (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom emax))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5))) ** (factor (power (await_primary (primary (atom e)))))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom last_digit))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (primary (atom _nbits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))) * (factor (power (await_primary (primary (atom 28)))))) // (factor (power (await_primary (primary (atom 65)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc))) , (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5))) ** (factor (power (await_primary (primary (atom e)))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom remainder))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xc)))))) % (factor (power (await_primary (primary (atom 5))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target xc) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target e) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom emax)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom p)))))) * (factor (power (await_primary (primary (atom 10)))))) // (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom emax)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _decimal_lshift_exact)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom e)))))) * (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xe)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _decimal_lshift_exact)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom xe)))))) * (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom emax))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))) ** (factor (power (await_primary (primary (atom e)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xe)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom e)))))))) - (term (factor (power (await_primary (primary (atom xe)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom m))) , (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom yc)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom ye))))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom yc)))))) * (factor (power (await_primary (primary (atom xe)))))))))))))))))) )))))))))))))))))) )))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom ye)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc_bits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _nbits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc)))))))))))))))))) )))))) * (factor (power (await_primary (primary (atom xc_bits)))))))))))))))))) )))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom ye)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom m))) , (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom ye)))))))))))))))))) )))))))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom m)))))) % (factor (power (await_primary (primary (atom 2))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) % (factor (power (await_primary (primary (atom 2))))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target m) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom m)))))) % (factor (power (await_primary (primary (atom 5))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) % (factor (power (await_primary (primary (atom 5))))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target m) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc_bits))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xe))) , (star_target (target_with_star_atom (star_atom rem)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rem))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))) << (sum (term (factor - (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor - (factor (power (await_primary (primary (primary (atom _nbits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) ))))))) // (factor (power (await_primary (primary (atom n))))))))))))))))) ))))))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q))) , (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom n))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom a)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom n))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (atom q))))))))))))))))) )))))))) // (factor (power (await_primary (primary (atom n)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom m))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom p)))))) * (factor (power (await_primary (primary (atom 100)))))) // (factor (power (await_primary (primary (primary (atom _log10_lb)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))) ** (factor (power (await_primary (primary (atom m)))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target xe) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom m)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom str_xc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ideal_exponent)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))) * (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom zeros)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom xe))))))) - (term (factor (power (await_primary (primary (atom ideal_exponent)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str_xc)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom zeros)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom str_xc))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom zeros)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom xe))))))) - (term (factor (power (await_primary (primary (atom zeros)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __pow__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param modulo) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return self ** other [ % modulo].\n\n        With two arguments, compute self**other.\n\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _power_modulo) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0 ** 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result_sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _iseven) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result_sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'x ** y with x negative and y not an integer')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_negate) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom multiplier)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom multiplier)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom multiplier)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))) * (factor (power (await_primary (primary (atom multiplier)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor - (factor (power (await_primary (primary (atom exp))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_adj)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_adj))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _SignedInfinity)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exact)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom bound)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _log10_exp_bound) ( ))))))) + (term (factor (power (await_primary (primary (primary (primary (atom other)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_adj))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom bound))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom Etiny)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom bound))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom Etiny))))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom Etiny))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _power_exact) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exact)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom p)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom x)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom xc))) , (star_target (target_with_star_atom (star_atom xe)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom x)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom x)) . exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom yc))) , (star_target (target_with_star_atom (star_atom ye)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom y)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom yc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom yc))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom extra)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dpower)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ye)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 5)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target extra) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exact))))))))))))) and (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isinteger) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _int))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom expdiff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom expdiff)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _exp)))))) - (term (factor (power (await_primary (primary (atom expdiff)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom newcontext)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . clear_flags) ( ))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom exception)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _signals)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (t_primary (atom newcontext)) . traps) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exception))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom newcontext)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'above Emax')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _sign))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom exception)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom newcontext)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exception))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exception)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __rpow__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Swaps self/other and returns __pow__."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . __pow__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def normalize ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Normalize- strip trailing 0s, change anything equal to 0 to 0e0"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dup)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom dup)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dup)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dup)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dup)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp_max)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etop) ( ))))))))))))))))))) ]))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . clamp)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom end)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dup)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dup)) . _exp))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom dup)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom end))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0'))))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp_max))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target exp) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target end) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dup)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom dup)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom end)))))))))))))))))) ]))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def quantize ( (params (parameters (param_no_default (param self) ,) (param_no_default (param exp) ,) (param_with_default (param rounding) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Quantize self so its exponent is the same as that of exp.\n\n        Similar to self._rescale(exp._exp) but with error checking.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exp)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom exp)) . _isinfinity) ( )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom exp)) . _isinfinity) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'quantize with one INF')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( ))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exp)) . _exp)))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'target exponent out of bounds in quantize')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exp)) . _exp))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_adjusted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_adjusted))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'exponent of quantize result too large for current context')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom self_adjusted))))))) - (term (factor (power (await_primary (primary (primary (atom exp)) . _exp)))))) + (term (factor (power (await_primary (primary (atom 1))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'quantize result has too many digits for current context')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom exp)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'exponent of quantize result too large for current context')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _int))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'quantize result has too many digits for current context')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emin)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _exp)))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def same_quantum ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self and other have the same exponent; otherwise\n        return False.\n\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_nan) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . is_nan) ( )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_infinite) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . is_infinite) ( ))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _rescale ( (params (parameters (param_no_default (param self) ,) (param_no_default (param exp) ,) (param_no_default (param rounding)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (atom exp))))))))))))))))) )))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) - (term (factor (power (await_primary (primary (atom exp)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom exp))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom this_function)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _pick_rounding_function) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom changed)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom this_function)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) ]))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom changed))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _round ( (params (parameters (param_no_default (param self) ,) (param_no_default (param places) ,) (param_no_default (param rounding)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Round a nonzero, nonspecial Decimal to a fixed number of\n        significant figures, using the given rounding mode.\n\n        Infinities, NaNs and zeros are returned unaltered.\n\n        This operation is quiet: it raises no flags, and uses no\n        information from the context.\n\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom places))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "argument should be at least 1 in _round")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( ))))))) + (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (atom places)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . adjusted) ( ))))))) + (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (atom places)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_integral_exact ( (params (parameters (param_no_default (param self) ,) (param_with_default (param rounding) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds to a nearby integer.\n\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_integral_value ( (params (parameters (param_no_default (param self) ,) (param_with_default (param rounding) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds to the nearest integer, without raising inexact, rounded."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom to_integral)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom to_integral_value)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def sqrt ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the square root of self."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))) // (factor (power (await_primary (primary (atom 2)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sqrt(-x), x > 0')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom prec)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))) >> (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp)))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom op)) . int))))) * (factor (power (await_primary (primary (atom 10)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))))) >> (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom 1)))))))) >> (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom prec))))))) - (term (factor (power (await_primary (primary (atom l)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target c) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100))) ** (factor (power (await_primary (primary (atom shift)))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exact)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom remainder)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100))) ** (factor - (factor (power (await_primary (primary (atom shift))))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exact)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom remainder))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (single_target e) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom prec)))))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom c)))))) // (factor (power (await_primary (primary (atom n)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom n))))))) + (term (factor (power (await_primary (primary (atom q)))))))) >> (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exact)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exact))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) * (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exact))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign //=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom shift)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom shift))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (single_target e) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) % (factor (power (await_primary (primary (atom 5))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target n) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _shallow_copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom context)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def max ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the larger value.\n\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sn)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom on)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def min ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the smaller value.\n\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sn)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom on)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _isinteger ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns whether self is an integer"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rest)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) :)) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rest))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rest)))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _iseven ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns True if self is even.  Assumes self is an integer."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '02468')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def adjusted ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the adjusted exponent of self"""))))))))))))))))))))) \n)) (statement (compound_stmt (try_stmt try : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (except_block except (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom TypeError)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def canonical ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_signal ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _compare_check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . compare) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_total ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares self to other using the abstract representations.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))) and (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_nan)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self_key)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_key)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) ))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_key))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_key))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_key))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_key))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Zero)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other_nan))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeOne)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Zero)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_total_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares self to other using abstract repr., ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom s)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_abs) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom o)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . copy_abs) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom s)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom o)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_abs ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy with the sign set to 0. """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_negate ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy with the sign inverted."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_sign ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns self with the sign of other."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def exp ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns e ** self."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Zero)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom p)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom adj)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))) * (factor (power (await_primary (primary (atom 3)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( )))))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))) * (factor (power (await_primary (primary (atom 3)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom p)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom p))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom p)))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '9')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) )))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom p)))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom c))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom extra)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dexp)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 5)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target extra) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _shallow_copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom context)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_canonical ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_finite ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_infinite ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is infinite; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'F')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_nan ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a qNaN or sNaN; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n')))))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N'))))))))))))))))))))) )))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_normal ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a normal number; otherwise return False."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emin)))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_qnan ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a quiet NaN; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_signed ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is negative; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_snan ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a signaling NaN; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'N')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_subnormal ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is subnormal; otherwise return False."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emin))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_zero ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a zero; otherwise return False."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _ln_exp_bound ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom adj)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom adj)))))) * (factor (power (await_primary (primary (atom 23)))))) // (factor (power (await_primary (primary (atom 10)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))) - (term (factor (power (await_primary (primary (atom adj))))))))))))))))) )))))))) * (factor (power (await_primary (primary (atom 23)))))) // (factor (power (await_primary (primary (atom 10)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom num)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom c))))))) - (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom e))))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom den)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom den)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom den))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom e)))))))))) - (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def ln ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the natural (base e) logarithm of self."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeInfinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Infinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _One))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Zero)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'ln of a negative value')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom p)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom places)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (primary (primary (atom self)) . _ln_exp_bound) ( ))))))) + (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dlog)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom places)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 5)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target places) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom places))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _shallow_copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom context)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _log10_exp_bound ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom adj)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))) - (term (factor (power (await_primary (primary (atom adj)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adj))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom num)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom c))))))) - (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom e))))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom den)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 231)))))) * (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom den)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom den))))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom num)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom e)))))))))) - (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom e))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "231"))))))))))))))))))))) ))))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def log10 ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the base 10 logarithm of self."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeInfinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Infinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'log10 of a negative value')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1'))))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) :)) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom op)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _WorkRep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c))) , (star_target (target_with_star_atom (star_atom e)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . int)))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op)) . exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom p)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom places)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (primary (primary (atom self)) . _log10_exp_bound) ( ))))))) + (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dlog10)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom places)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom coeff)))))) % (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 5)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target places) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))))) )))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom places))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _shallow_copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom context)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logb ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """ Returns the exponent of the magnitude of self's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Infinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'logb(0)')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . adjusted) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _islogical ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if self is a logical operand.\n\n        For being logical, it must be a finite number with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom dig)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dig))))))))))) (compare_op_bitwise_or_pair (notin_bitwise_or not in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '01'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _fill_logical ( (params (parameters (param_no_default (param self) ,) (param_no_default (param context) ,) (param_no_default (param opa) ,) (param_no_default (param opb)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dif)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opa)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dif))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom opa)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom dif))))))) + (term (factor (power (await_primary (primary (atom opa)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dif))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom opa)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom opa)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dif)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opb)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dif))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom opb)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom dif))))))) + (term (factor (power (await_primary (primary (atom opb)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dif))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom opb)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom opb)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opa))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opb)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_and ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies an 'and' operation between self and other's digits."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _islogical) ( ))))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _islogical) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ( (star_targets_tuple_seq (star_target (target_with_star_atom (star_atom opa))) , (star_target (target_with_star_atom (star_atom opb)))) ))))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fill_logical) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string "")))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))) ))))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) ))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom a))) , (star_target (target_with_star_atom (star_atom b)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom zip)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opa)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opb)))))))))))))))))) ))))))))))))))))) ]))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom result)) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_invert ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Invert all its digits."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . logical_xor) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '1')))))))) * (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_or ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies an 'or' operation between self and other's digits."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _islogical) ( ))))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _islogical) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ( (star_targets_tuple_seq (star_target (target_with_star_atom (star_atom opa))) , (star_target (target_with_star_atom (star_atom opb)))) ))))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fill_logical) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string "")))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))) ))))))))))) | (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) ))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom a))) , (star_target (target_with_star_atom (star_atom b)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom zip)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opa)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opb)))))))))))))))))) ))))))))))))))))) ]))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom result)) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_xor ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies an 'xor' operation between self and other's digits."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _islogical) ( ))))))))))))))) or (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _islogical) ( )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ( (star_targets_tuple_seq (star_target (target_with_star_atom (star_atom opa))) , (star_target (target_with_star_atom (star_atom opb)))) ))))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fill_logical) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string "")))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))) )))))))))) ^ (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) ))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom a))) , (star_target (target_with_star_atom (star_atom b)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom zip)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opa)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom opb)))))))))))))))))) ))))))))))))))))) ]))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom result)) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def max_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares the values numerically with their sign ignored."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sn)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom on)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (primary (atom self)) . copy_abs) ( )) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . copy_abs) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def min_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares the values numerically with their sign ignored."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sn)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isnan) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom on)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _isnan) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sn))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom on))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (primary (atom self)) . copy_abs) ( )) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom other)) . copy_abs) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_minus ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the largest representable number smaller than itself."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeInfinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '9')))))))) * (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etop) ( )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_FLOOR)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _ignore_all_flags) ( ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom new_self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_self))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __sub__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_plus ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the smallest representable number larger than itself."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Infinity)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '9')))))))) * (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etop) ( )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . copy) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _set_rounding) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_CEILING)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _ignore_all_flags) ( ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom new_self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_self))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom new_self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __add__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . Etiny) ( ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_toward ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the number closest to self, in the direction towards other.\n\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom comparison)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _cmp) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom comparison))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_sign) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom comparison))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . next_plus) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . next_minus) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Infinite result from next_toward')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ans)) . _sign))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom ans)) . adjusted) ( ))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emin)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Subnormal)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Inexact)))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Rounded)))))))))))))))))) ))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def number_class ( (params (parameters (param_no_default (param self) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns an indication of the class of self.\n\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_snan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "sNaN")))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_qnan) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "NaN")))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom inf)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom inf))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "+Infinity")))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom inf))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-Infinity")))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_zero) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-Zero")))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "+Zero")))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . is_subnormal) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-Subnormal")))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "+Subnormal")))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "-Normal")))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "+Normal")))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def radix ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Just returns 10, as this is Decimal, :)"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def rotate ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a rotated copy of self, value-of-other times."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom torot)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom topad)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rotdig)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom topad))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom topad))))))) + (term (factor (power (await_primary (primary (atom rotdig)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom topad))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom rotdig)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom topad))))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotated)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom rotdig)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom torot)))))))))))))))) :)) ])))))) + (term (factor (power (await_primary (primary (primary (atom rotdig)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom torot)))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom rotated)) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def scaleb ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns self operand after adding the second value to its exp."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom liminf)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor - (factor (power (await_primary (primary (atom 2))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) + (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom limsup)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 2)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . Emax)))))) + (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom liminf))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom limsup))))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom d)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def shift ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a shifted copy of self, value-of-other times."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ans)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _check_nans) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ans)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . _exp)))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom context)) . prec))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))))) )))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _isinfinity) ( ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom torot)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom topad)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom context)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rotdig)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom topad))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom topad))))))) + (term (factor (power (await_primary (primary (atom rotdig)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom topad))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rotdig)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom rotdig)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom topad))))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom torot))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shifted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom rotdig)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom torot)))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shifted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom rotdig))))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom torot)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shifted)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom shifted)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom context)) . prec)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom shifted)) . lstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __reduce__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . __class__))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) , ))))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __copy__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom type)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __class__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __deepcopy__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param memo)))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom type)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . __class__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __format__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param specifier) ,) (param_with_default (param context) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param _localeconv) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Format a Decimal instance according to the given specifier.\n\n        The specifier should be a standard format specifier, with the\n        form described in PEP 3101.  Formatting types 'e', 'E', 'f',\n        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting\n        type is omitted it defaults to 'g' or 'G', depending on the\n        value of context.capitals.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom context))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom spec)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _parse_format_specifier)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom specifier)))))))))))))))) , (kwargs (kwarg_or_starred _localeconv = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _localeconv)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _format_sign)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom body)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . copy_abs) ( )))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target body) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '%')))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _format_align)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom body)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'g')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'G'))))))))))))))))))))) ]))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . capitals)))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (atom 2)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom context)) . rounding))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom precision)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom precision))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'eE'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom precision))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fF%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom precision))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'gG'))))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom precision))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _round) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom precision)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fF%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _rescale) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'no_neg_0'))))))))))))))))))))) ])))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom adjusted_sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom adjusted_sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom leftdigits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'eE'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom precision))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (atom precision)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fF%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'gG'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp)))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 6)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom leftdigits)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dotplace)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>)))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom dotplace)))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int)))))) + (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom dotplace))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) ))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace)))))))))))))))))) ]))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _int) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dotplace)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>)))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom leftdigits))))))) - (term (factor (power (await_primary (primary (atom dotplace)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _format_number)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom adjusted_sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom intpart)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _dec_from_triple ( (params (parameters (param_no_default (param sign) ,) (param_no_default (param coefficient) ,) (param_no_default (param exponent) ,) (param_with_default (param special) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n\n    This function is for *internal use only*.\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __new__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coefficient)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exponent)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _is_special))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom special)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom _numbers)) . Number) . register) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) ))))))))))))))))))) \n)) (statement (compound_stmt (class_def (class_def_raw class _ContextManager ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom object)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __init__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param new_context)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . new_context))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom new_context)) . copy) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __enter__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . saved_context))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom setcontext)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . new_context))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . new_context))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __exit__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param t) ,) (param_no_default (param v) ,) (param_no_default (param tb)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom setcontext)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . saved_context))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class Context ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom object)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    clamp -  If 1, change exponents if too high (Default 0)\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __init__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param prec) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param rounding) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param Emin) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param Emax) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param capitals) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param clamp) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param flags) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param traps) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (param_with_default (param _ignored_flags) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (compound_stmt (try_stmt try : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom dc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DefaultContext)))))))))))))))))))) \n))) <DEDENT>) (except_block except (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NameError)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt pass) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . prec))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom prec))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . prec)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . rounding)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . Emin))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Emin))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Emin))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . Emin)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . Emax))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Emax))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Emax))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . Emax)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . capitals))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom capitals))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom capitals))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . capitals)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . clamp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom clamp))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom clamp))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dc)) . clamp)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _ignored_flags))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _ignored_flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ]))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _ignored_flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _ignored_flags)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom traps))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . traps))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom dc)) . traps) . copy) ( )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom traps)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dict)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . traps))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dict)) (genexp ( (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom traps)))))))))))))))))))) ))))))))))))))))))) )))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom s)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom _signals))))))) + (term (factor (power (await_primary (primary (atom traps))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . traps))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom traps)))))))))))))))))))) \n))) <DEDENT>)))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom dict)) . fromkeys) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _signals)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dict)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom dict)) (genexp ( (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))))) ))))))))))))))))))) )))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom s)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom _signals))))))) + (term (factor (power (await_primary (primary (atom flags))))))))))))))))) ))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _set_integer_check ( (params (parameters (param_no_default (param self) ,) (param_no_default (param name) ,) (param_no_default (param value) ,) (param_no_default (param vmin) ,) (param_no_default (param vmax)))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s must be an integer")))))))) % (factor (power (await_primary (primary (atom name)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-inf'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s must be in [%s, %d]. got: %s")))))))) % (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))))))))))) )))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'inf'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s must be in [%d, %s]. got: %s")))))))) % (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))))))))))) )))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s must be in [%d, %d]. got %s")))))))) % (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmin)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom vmax)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))))))))))) )))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __setattr__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _set_signal_dict ( (params (parameters (param_no_default (param self) ,) (param_no_default (param name) ,) (param_no_default (param d)))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom dict)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s must be a signal dict")))))))) % (factor (power (await_primary (primary (atom d)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom key)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom key))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _signals)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom KeyError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s is not a valid signal dict")))))))) % (factor (power (await_primary (primary (atom d)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom key)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _signals)))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom key))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom KeyError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s is not a valid signal dict")))))))) % (factor (power (await_primary (primary (atom d)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __setattr__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom d)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __setattr__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param name) ,) (param_no_default (param value)))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'prec'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_integer_check) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'inf')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Emin'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_integer_check) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-inf')))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Emax'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_integer_check) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'inf')))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'capitals'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_integer_check) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'clamp'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_integer_check) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'rounding'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _rounding_modes)))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s: invalid rounding mode")))))))) % (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __setattr__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'flags')))))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'traps'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _set_signal_dict) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_ignored_flags'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom object)) . __setattr__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom name)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom AttributeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "'decimal.Context' object has no attribute '%s'")))))))) % (factor (power (await_primary (primary (atom name)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))))))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __delattr__ ( (params (parameters (param_no_default (param self) ,) (param_no_default (param name)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom AttributeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "%s cannot be deleted")))))))) % (factor (power (await_primary (primary (atom name)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __reduce__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom flags)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sig))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom sig))) , (star_target (target_with_star_atom (star_atom v)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . flags) . items) ( ))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom v))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom traps)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sig))))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom sig))) , (star_target (target_with_star_atom (star_atom v)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . traps) . items) ( ))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom v))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . __class__))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . prec))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . rounding))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emin))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emax))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . capitals))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . clamp))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom traps))))))))))))))))))) ))))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __repr__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Show the current context."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom s)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom s)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string 'Context(prec=%(prec)d, rounding=%(rounding)s, ') (string 'Emin=%(Emin)d, Emax=%(Emax)d, capitals=%(capitals)d, ') (string 'clamp=%(clamp)d')))))))) % (factor (power (await_primary (primary (primary (atom vars)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom names)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom f)) . __name__)))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom f))) , (star_target (target_with_star_atom (star_atom v)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . flags) . items) ( ))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom v))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom s)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom (strings (string 'flags=['))))))))) + (term (factor (power (await_primary (primary (primary (primary (atom (strings (string ', ')))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom names)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom (strings (string ']')))))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom names)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (listcomp [ (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom t)) . __name__)))))))))))))))) (for_if_clauses (for_if_clause for (star_targets (star_target (target_with_star_atom (star_atom t))) , (star_target (target_with_star_atom (star_atom v)))) in (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . traps) . items) ( ))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom v))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom s)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom (strings (string 'traps=['))))))))) + (term (factor (power (await_primary (primary (primary (primary (atom (strings (string ', ')))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom names)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom (strings (string ']')))))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string ', ')))) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom s)))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom (strings (string ')')))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def clear_flags ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Reset all flags to zero"""))))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom flag)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . flags))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (t_primary (atom self)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flag))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def clear_traps ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Reset all traps to zero"""))))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom flag)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . traps))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (t_primary (atom self)) . traps) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flag))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _shallow_copy ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a shallow copy from self."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom nc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . rounding))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emin))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emax))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . capitals))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . clamp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . flags))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . traps))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _ignored_flags))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom nc)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a deep copy from self."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom nc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . prec))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . rounding))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emin))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emax))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . capitals))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . clamp))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . flags) . copy) ( )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . traps) . copy) ( )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _ignored_flags))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom nc)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __copy__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom copy)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def _raise_error ( (params (parameters (param_no_default (param self) ,) (param_no_default (param condition) ,) (param_with_default (param explanation) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))) ,) (star_etc * (param_no_default (param args))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Handles an error\n\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it sets the flag, then, if the corresponding\n        trap_enabler is set, it reraises the exception.  Otherwise, it returns\n        the default value after setting the flag.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom error)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _condition_map)) . get) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom condition)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom condition)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom error))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _ignored_flags)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom error)) ( )) . handle) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (starred_expression * (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom args))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (t_primary (atom self)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom error))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . traps) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom error))))))))))))))))))) ]))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom condition)) ( )) . handle) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))) , (starred_expression * (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom args))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom error)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom explanation)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _ignore_all_flags ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Ignore all flags, if they are raised"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _ignore_flags) ( (arguments (args (starred_expression * (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _signals))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _ignore_flags ( (params (parameters (param_no_default (param self) ,) (star_etc * (param_no_default (param flags))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Ignore the flags, if they are raised"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . _ignored_flags))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . _ignored_flags)))))) + (term (factor (power (await_primary (primary (primary (atom list)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))) ))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom list)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _regard_flags ( (params (parameters (param_no_default (param self) ,) (star_etc * (param_no_default (param flags))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Stop ignoring the flags, if they are raised"""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom flags)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom tuple)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom list))))))))))))))))))) )))))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom flags)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom flags)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom flag)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flags)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom self)) . _ignored_flags) . remove) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom flag)))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __hash__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def Etiny ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns Etiny (= Emin - prec + 1)"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emin)))))) - (term (factor (power (await_primary (primary (primary (atom self)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def Etop ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns maximum exponent (= Emax - prec + 1)"""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . Emax)))))) - (term (factor (power (await_primary (primary (primary (atom self)) . prec)))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _set_rounding ( (params (parameters (param_no_default (param self) ,) (param_no_default (param type)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Sets the rounding type.\n\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n\n        context = context.copy()\n        # so you don't change the calling context\n        # if an error occurs in the middle.\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n\n        This will make it round up for that operation.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rounding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . rounding))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . rounding))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom type)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rounding)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def create_decimal ( (params (parameters (param_no_default (param self) ,) (param_with_default (param num) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Creates a new Decimal instance but using self as context.\n\n        This method implements the to-number operation of the\n        IBM Decimal specification."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str)))))))))))))))))) ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom num)) . strip) ( )))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '_'))))))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ConversionSyntax)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "trailing or leading whitespace and ") (string "underscores are not permitted.")))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom num)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom d)) . _isnan) ( ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom d)) . _int))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom self)) . prec)))))) - (term (factor (power (await_primary (primary (primary (atom self)) . clamp)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ConversionSyntax)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "diagnostic info too long in NaN")))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom d)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def create_decimal_from_float ( (params (parameters (param_no_default (param self) ,) (param_no_default (param f)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Creates a new Decimal instance from a float but rounding using self\n        as the context.\n\n        >>> context = Context(prec=5, rounding=ROUND_DOWN)\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Decimal('3.1415')\n        >>> context = Context(prec=5, traps=[Inexact])\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Traceback (most recent call last):\n            ...\n        decimal.Inexact: None\n\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom Decimal)) . from_float) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom d)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def abs ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the absolute value of the operand.\n\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n\n        >>> ExtendedContext.abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.abs(Decimal('101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(-1)\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __abs__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def add ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the sum of the two operands.\n\n        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))\n        Decimal('19.00')\n        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))\n        Decimal('1.02E+4')\n        >>> ExtendedContext.add(1, Decimal(2))\n        Decimal('3')\n        >>> ExtendedContext.add(Decimal(8), 5)\n        Decimal('13')\n        >>> ExtendedContext.add(5, 5)\n        Decimal('10')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __add__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _apply ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . _fix) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def canonical ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n\n        >>> ExtendedContext.canonical(Decimal('2.50'))\n        Decimal('2.50')\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "canonical requires a Decimal as an argument.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . canonical) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares values numerically.\n\n        If the signs of the operands differ, a value representing each operand\n        ('-1' if the operand is less than zero, '0' if the operand is zero or\n        negative zero, or '1' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: '-1' if the result is less than zero, '0' if the result is\n        zero or negative zero, or '1' if the result is greater than zero.\n\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, Decimal(2))\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . compare) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_signal ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares the values of the two operands numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print(c.flags[InvalidOperation])\n        0\n        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print(c.flags[InvalidOperation])\n        1\n        >>> c.compare_signal(-1, 2)\n        Decimal('-1')\n        >>> c.compare_signal(Decimal(-1), 2)\n        Decimal('-1')\n        >>> c.compare_signal(-1, Decimal(2))\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . compare_signal) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_total ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))\n        Decimal('0')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))\n        Decimal('1')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, Decimal(2))\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . compare_total) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def compare_total_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares two operands using their abstract representation ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . compare_total_mag) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_abs ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy of the operand with the sign set to 0.\n\n        >>> ExtendedContext.copy_abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.copy_abs(-1)\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . copy_abs) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_decimal ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy of the decimal object.\n\n        >>> ExtendedContext.copy_decimal(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))\n        Decimal('-1.00')\n        >>> ExtendedContext.copy_decimal(1)\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_negate ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a copy of the operand with the sign inverted.\n\n        >>> ExtendedContext.copy_negate(Decimal('101.5'))\n        Decimal('-101.5')\n        >>> ExtendedContext.copy_negate(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.copy_negate(1)\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . copy_negate) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def copy_sign ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Copies the second operand's sign to the first one.\n\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(1, -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(Decimal(1), -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(1, Decimal(-2))\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . copy_sign) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def divide ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Decimal division in a specified context.\n\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))\n        Decimal('0.333333333')\n        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))\n        Decimal('0.666666667')\n        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))\n        Decimal('2.5')\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))\n        Decimal('0.1')\n        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))\n        Decimal('4.00')\n        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))\n        Decimal('1.20')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))\n        Decimal('1000')\n        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))\n        Decimal('1.20E+6')\n        >>> ExtendedContext.divide(5, 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal(5), 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(5, Decimal(5))\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __truediv__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def divide_int ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Divides two numbers and returns the integer part of the result.\n\n        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))\n        Decimal('0')\n        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal(10), 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, Decimal(3))\n        Decimal('3')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __floordiv__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def divmod ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return (a // b, a % b).\n\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))\n        (Decimal('2'), Decimal('2'))\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(Decimal(8), 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __divmod__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def exp ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns e ** a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal('-Infinity'))\n        Decimal('0')\n        >>> c.exp(Decimal('-1'))\n        Decimal('0.367879441')\n        >>> c.exp(Decimal('0'))\n        Decimal('1')\n        >>> c.exp(Decimal('1'))\n        Decimal('2.71828183')\n        >>> c.exp(Decimal('0.693147181'))\n        Decimal('2.00000000')\n        >>> c.exp(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.exp(10)\n        Decimal('22026.4658')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . exp) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def fma ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b) ,) (param_no_default (param c)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a multiplied by b, plus c.\n\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))\n        Decimal('22')\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))\n        Decimal('-8')\n        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))\n        Decimal('1.38435736E+12')\n        >>> ExtendedContext.fma(1, 3, 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, Decimal(3), 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, 3, Decimal(4))\n        Decimal('7')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . fma) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_canonical ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "is_canonical requires a Decimal as an argument.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_canonical) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_finite ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_finite(1)\n        True\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_finite) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_infinite ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is infinite; otherwise return False.\n\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_infinite(1)\n        False\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_infinite) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_nan ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        >>> ExtendedContext.is_nan(1)\n        False\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_nan) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_normal ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is a normal number;\n        otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        >>> c.is_normal(1)\n        True\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_normal) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_qnan ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is a quiet NaN; otherwise return False.\n\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        >>> ExtendedContext.is_qnan(1)\n        False\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_qnan) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_signed ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is negative; otherwise return False.\n\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        >>> ExtendedContext.is_signed(8)\n        False\n        >>> ExtendedContext.is_signed(-8)\n        True\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_signed) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_snan ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is a signaling NaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        >>> ExtendedContext.is_snan(1)\n        False\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_snan) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_subnormal ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is subnormal; otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        >>> c.is_subnormal(1)\n        False\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_subnormal) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def is_zero ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return True if the operand is a zero; otherwise return False.\n\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        >>> ExtendedContext.is_zero(1)\n        False\n        >>> ExtendedContext.is_zero(0)\n        True\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . is_zero) ( )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def ln ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the natural (base e) logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.ln(Decimal('1.000'))\n        Decimal('0')\n        >>> c.ln(Decimal('2.71828183'))\n        Decimal('1.00000000')\n        >>> c.ln(Decimal('10'))\n        Decimal('2.30258509')\n        >>> c.ln(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.ln(1)\n        Decimal('0')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . ln) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def log10 ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the base 10 logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.log10(Decimal('0.001'))\n        Decimal('-3')\n        >>> c.log10(Decimal('1.000'))\n        Decimal('0')\n        >>> c.log10(Decimal('2'))\n        Decimal('0.301029996')\n        >>> c.log10(Decimal('10'))\n        Decimal('1')\n        >>> c.log10(Decimal('70'))\n        Decimal('1.84509804')\n        >>> c.log10(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.log10(0)\n        Decimal('-Infinity')\n        >>> c.log10(1)\n        Decimal('0')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . log10) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logb ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """ Returns the exponent of the magnitude of the operand's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n\n        >>> ExtendedContext.logb(Decimal('250'))\n        Decimal('2')\n        >>> ExtendedContext.logb(Decimal('2.50'))\n        Decimal('0')\n        >>> ExtendedContext.logb(Decimal('0.03'))\n        Decimal('-2')\n        >>> ExtendedContext.logb(Decimal('0'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.logb(1)\n        Decimal('0')\n        >>> ExtendedContext.logb(10)\n        Decimal('1')\n        >>> ExtendedContext.logb(100)\n        Decimal('2')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . logb) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_and ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies the logical operation 'and' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))\n        Decimal('1000')\n        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))\n        Decimal('10')\n        >>> ExtendedContext.logical_and(110, 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(Decimal(110), 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(110, Decimal(1101))\n        Decimal('100')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . logical_and) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_invert ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Invert all the digits in the operand.\n\n        The operand must be a logical number.\n\n        >>> ExtendedContext.logical_invert(Decimal('0'))\n        Decimal('111111111')\n        >>> ExtendedContext.logical_invert(Decimal('1'))\n        Decimal('111111110')\n        >>> ExtendedContext.logical_invert(Decimal('111111111'))\n        Decimal('0')\n        >>> ExtendedContext.logical_invert(Decimal('101010101'))\n        Decimal('10101010')\n        >>> ExtendedContext.logical_invert(1101)\n        Decimal('111110010')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . logical_invert) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_or ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies the logical operation 'or' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(110, 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(Decimal(110), 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(110, Decimal(1101))\n        Decimal('1111')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . logical_or) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def logical_xor ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Applies the logical operation 'xor' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))\n        Decimal('110')\n        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))\n        Decimal('1101')\n        >>> ExtendedContext.logical_xor(110, 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(Decimal(110), 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(110, Decimal(1101))\n        Decimal('1011')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . logical_xor) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def max ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """max compares two values numerically and returns the maximum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max(1, 2)\n        Decimal('2')\n        >>> ExtendedContext.max(Decimal(1), 2)\n        Decimal('2')\n        >>> ExtendedContext.max(1, Decimal(2))\n        Decimal('2')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . max) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def max_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))\n        Decimal('-10')\n        >>> ExtendedContext.max_mag(1, -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(Decimal(1), -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(1, Decimal(-2))\n        Decimal('-2')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . max_mag) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def min ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """min compares two values numerically and returns the minimum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))\n        Decimal('2')\n        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))\n        Decimal('-10')\n        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))\n        Decimal('1.0')\n        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.min(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.min(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.min(1, Decimal(29))\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . min) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def min_mag ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))\n        Decimal('-2')\n        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))\n        Decimal('-3')\n        >>> ExtendedContext.min_mag(1, -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(Decimal(1), -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(1, Decimal(-2))\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . min_mag) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def minus ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Minus corresponds to unary prefix minus in Python.\n\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.minus(Decimal('1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.minus(Decimal('-1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.minus(1)\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __neg__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def multiply ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """multiply multiplies two operands.\n\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together\n        ('long multiplication'), resulting in a number which may be as long as\n        the sum of the lengths of the two operands.\n\n        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))\n        Decimal('3.60')\n        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))\n        Decimal('21')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))\n        Decimal('0.72')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))\n        Decimal('-0.0')\n        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))\n        Decimal('4.28135971E+11')\n        >>> ExtendedContext.multiply(7, 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(Decimal(7), 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(7, Decimal(7))\n        Decimal('49')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __mul__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_minus ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the largest representable number smaller than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal('1'))\n        Decimal('0.999999999')\n        >>> c.next_minus(Decimal('1E-1007'))\n        Decimal('0E-1007')\n        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))\n        Decimal('-1.00000004')\n        >>> c.next_minus(Decimal('Infinity'))\n        Decimal('9.99999999E+999')\n        >>> c.next_minus(1)\n        Decimal('0.999999999')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . next_minus) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_plus ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the smallest representable number larger than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal('1'))\n        Decimal('1.00000001')\n        >>> c.next_plus(Decimal('-1E-1007'))\n        Decimal('-0E-1007')\n        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))\n        Decimal('-1.00000002')\n        >>> c.next_plus(Decimal('-Infinity'))\n        Decimal('-9.99999999E+999')\n        >>> c.next_plus(1)\n        Decimal('1.00000001')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . next_plus) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def next_toward ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal('1'), Decimal('2'))\n        Decimal('1.00000001')\n        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))\n        Decimal('-0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))\n        Decimal('-1.00000002')\n        >>> c.next_toward(Decimal('1'), Decimal('0'))\n        Decimal('0.999999999')\n        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))\n        Decimal('0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))\n        Decimal('-1.00000004')\n        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))\n        Decimal('-0.00')\n        >>> c.next_toward(0, 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(Decimal(0), 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(0, Decimal(1))\n        Decimal('1E-1007')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . next_toward) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def normalize ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """normalize reduces an operand to its simplest form.\n\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n\n        >>> ExtendedContext.normalize(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.normalize(Decimal('-2.0'))\n        Decimal('-2')\n        >>> ExtendedContext.normalize(Decimal('1.200'))\n        Decimal('1.2')\n        >>> ExtendedContext.normalize(Decimal('-120'))\n        Decimal('-1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('120.00'))\n        Decimal('1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('0.00'))\n        Decimal('0')\n        >>> ExtendedContext.normalize(6)\n        Decimal('6')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . normalize) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def number_class ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns an indication of the class of the operand.\n\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        >>> c.number_class(123)\n        '+Normal'\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . number_class) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def plus ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Plus corresponds to unary prefix plus in Python.\n\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.plus(Decimal('1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.plus(Decimal('-1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.plus(-1)\n        Decimal('-1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __pos__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def power ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b) ,) (param_with_default (param modulo) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Raises a to the power of b, to modulo if given.\n\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in 'precision' digits.\n\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most 'precision' digits\n\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal('2'), Decimal('3'))\n        Decimal('8')\n        >>> c.power(Decimal('-2'), Decimal('3'))\n        Decimal('-8')\n        >>> c.power(Decimal('2'), Decimal('-3'))\n        Decimal('0.125')\n        >>> c.power(Decimal('1.7'), Decimal('8'))\n        Decimal('69.7575744')\n        >>> c.power(Decimal('10'), Decimal('0.301029996'))\n        Decimal('2.00000000')\n        >>> c.power(Decimal('Infinity'), Decimal('-1'))\n        Decimal('0')\n        >>> c.power(Decimal('Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('Infinity'), Decimal('1'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('-1'))\n        Decimal('-0')\n        >>> c.power(Decimal('-Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('-Infinity'), Decimal('1'))\n        Decimal('-Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('2'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('0'), Decimal('0'))\n        Decimal('NaN')\n\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))\n        Decimal('11')\n        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))\n        Decimal('-11')\n        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))\n        Decimal('1')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))\n        Decimal('11')\n        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))\n        Decimal('11729830')\n        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))\n        Decimal('-0')\n        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))\n        Decimal('1')\n        >>> ExtendedContext.power(7, 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(Decimal(7), 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(7, Decimal(7), 2)\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __pow__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom modulo)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def quantize ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a value equal to 'a' (rounded), having the exponent of 'b'.\n\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))\n        Decimal('2.170')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))\n        Decimal('2.17')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))\n        Decimal('2.2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))\n        Decimal('2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))\n        Decimal('0E+1')\n        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))\n        Decimal('-0')\n        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))\n        Decimal('-0E+5')\n        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))\n        Decimal('217.0')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))\n        Decimal('217')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))\n        Decimal('2.2E+2')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))\n        Decimal('2E+2')\n        >>> ExtendedContext.quantize(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(1, Decimal(2))\n        Decimal('1')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . quantize) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def radix ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Just returns 10, as this is Decimal, :)\n\n        >>> ExtendedContext.radix()\n        Decimal('10')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def remainder ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the remainder from integer division.\n\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))\n        Decimal('2.1')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))\n        Decimal('1.0')\n        >>> ExtendedContext.remainder(22, 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(Decimal(22), 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(22, Decimal(6))\n        Decimal('4')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __mod__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def remainder_near ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))\n        Decimal('-0.9')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))\n        Decimal('-2')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))\n        Decimal('-0.3')\n        >>> ExtendedContext.remainder_near(3, 11)\n        Decimal('3')\n        >>> ExtendedContext.remainder_near(Decimal(3), 11)\n        Decimal('3')\n        >>> ExtendedContext.remainder_near(3, Decimal(11))\n        Decimal('3')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . remainder_near) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def rotate ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a rotated copy of a, b times.\n\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n\n        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))\n        Decimal('400000003')\n        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))\n        Decimal('12')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))\n        Decimal('891234567')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678912')\n        >>> ExtendedContext.rotate(1333333, 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(Decimal(1333333), 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(1333333, Decimal(1))\n        Decimal('13333330')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . rotate) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def same_quantum ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns True if the two operands have the same exponent.\n\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        >>> ExtendedContext.same_quantum(10000, -1)\n        True\n        >>> ExtendedContext.same_quantum(Decimal(10000), -1)\n        True\n        >>> ExtendedContext.same_quantum(10000, Decimal(-1))\n        True\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . same_quantum) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def scaleb ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns the first operand after adding the second value its exp.\n\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))\n        Decimal('0.0750')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))\n        Decimal('7.50')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))\n        Decimal('7.50E+3')\n        >>> ExtendedContext.scaleb(1, 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(Decimal(1), 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(1, Decimal(4))\n        Decimal('1E+4')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . scaleb) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def shift ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Returns a shifted copy of a, b times.\n\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n\n        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))\n        Decimal('400000000')\n        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))\n        Decimal('0')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))\n        Decimal('1234567')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678900')\n        >>> ExtendedContext.shift(88888888, 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(Decimal(88888888), 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(88888888, Decimal(2))\n        Decimal('888888800')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . shift) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def sqrt ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Square root of a non-negative number to context precision.\n\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n\n        >>> ExtendedContext.sqrt(Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.sqrt(Decimal('-0'))\n        Decimal('-0')\n        >>> ExtendedContext.sqrt(Decimal('0.39'))\n        Decimal('0.624499800')\n        >>> ExtendedContext.sqrt(Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.sqrt(Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.sqrt(Decimal('1.0'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('1.00'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('7'))\n        Decimal('2.64575131')\n        >>> ExtendedContext.sqrt(Decimal('10'))\n        Decimal('3.16227766')\n        >>> ExtendedContext.sqrt(2)\n        Decimal('1.41421356')\n        >>> ExtendedContext.prec\n        9\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . sqrt) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def subtract ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Return the difference between the two operands.\n\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))\n        Decimal('0.23')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))\n        Decimal('0.00')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))\n        Decimal('-0.77')\n        >>> ExtendedContext.subtract(8, 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(Decimal(8), 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(8, Decimal(5))\n        Decimal('3')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __sub__) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))) , (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom r)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_eng_string ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Convert to a string, using engineering notation if an exponent is needed.\n\n        Engineering notation has an exponent which is a multiple of 3.  This\n        can leave up to 3 digits to the left of the decimal place and may\n        require the addition of either one or two trailing zeros.\n\n        The operation is not affected by the context.\n\n        >>> ExtendedContext.to_eng_string(Decimal('123E+1'))\n        '1.23E+3'\n        >>> ExtendedContext.to_eng_string(Decimal('123E+3'))\n        '123E+3'\n        >>> ExtendedContext.to_eng_string(Decimal('123E-10'))\n        '12.3E-9'\n        >>> ExtendedContext.to_eng_string(Decimal('-123E-12'))\n        '-123E-12'\n        >>> ExtendedContext.to_eng_string(Decimal('7E-7'))\n        '700E-9'\n        >>> ExtendedContext.to_eng_string(Decimal('7E+1'))\n        '70'\n        >>> ExtendedContext.to_eng_string(Decimal('0E+1'))\n        '0.00E+3'\n\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . to_eng_string) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_sci_string ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . __str__) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_integral_exact ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n\n        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_exact(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))\n        Decimal('-Infinity')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . to_integral_exact) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def to_integral_value ( (params (parameters (param_no_default (param self) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n\n        >>> ExtendedContext.to_integral_value(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_value(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))\n        Decimal('-Infinity')\n        """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _convert_other)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (kwargs (kwarg_or_starred raiseit = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom a)) . to_integral_value) ( (arguments (args (kwargs (kwarg_or_starred context = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom to_integral)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom to_integral_value)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class _WorkRep ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom object)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom __slots__)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign')))))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'int')))))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'exp'))))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __init__ ( (params (parameters (param_no_default (param self) ,) (param_with_default (param value) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom value)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _sign))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _int))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) . _exp))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . sign))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom value)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def __repr__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "(%r, %r, %r)")))))))) % (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . sign))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . int))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . exp)))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _normalize ( (params (parameters (param_no_default (param op1) ,) (param_no_default (param op2) ,) (param_with_default (param prec) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Normalizes op1, op2 to have the same exp and length of coefficient.\n\n    Done during addition.\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op1)) . exp)))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom op2)) . exp)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom tmp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom tmp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op2)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom tmp_len)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom tmp)) . int))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other_len)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . int))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom tmp)) . exp)))))) + (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom tmp_len))))))) - (term (factor (power (await_primary (primary (atom prec))))))) - (term (factor (power (await_primary (primary (atom 2)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom other_len))))))) + (term (factor (power (await_primary (primary (primary (atom other)) . exp)))))) - (term (factor (power (await_primary (primary (atom 1))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom other)) . int))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom other)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target (single_subscript_attribute_target (t_primary (atom tmp)) . int)) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom tmp)) . exp)))))) - (term (factor (power (await_primary (primary (primary (atom other)) . exp)))))))))))))))) )))))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom tmp)) . exp))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . exp))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op1))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom op2)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _nbits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) . bit_length))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def _decimal_lshift_exact ( (params (parameters (param_no_default (param n) ,) (param_no_default (param e)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """ Given integers n and e, return n * 10**e if it's an integer, else None.\n\n    The computation is designed to avoid computing large powers of 10\n    unnecessarily.\n\n    >>> _decimal_lshift_exact(3, 4)\n    30000\n    >>> _decimal_lshift_exact(300, -999999999)  # returns None\n\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom e))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom e)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom str_n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom val_n)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str_n)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom str_n)) . rstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))) if (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom val_n))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom e)))))))))))))))))) else (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom n)))))) // (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom e)))))))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _sqrt_nearest ( (params (parameters (param_no_default (param n) ,) (param_no_default (param a)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom n))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "Both arguments to _sqrt_nearest should be positive.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom b)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom b))) , (star_target (target_with_star_atom (star_atom a)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom a))))))) - (term (term (factor - (factor (power (await_primary (primary (atom n))))))) // (factor (power (await_primary (primary (atom a)))))))) >> (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _rshift_nearest ( (params (parameters (param_no_default (param x) ,) (param_no_default (param shift)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom b))) , (star_target (target_with_star_atom (star_atom q)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))) << (sum (term (factor (power (await_primary (primary (atom shift))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom x)))))))) >> (sum (term (factor (power (await_primary (primary (atom shift)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom q))))))) + (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom 2)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom x))))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom b))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _div_nearest ( (params (parameters (param_no_default (param a) ,) (param_no_default (param b)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q))) , (star_target (target_with_star_atom (star_atom r)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom a)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom q))))))) + (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom 2)))))) * (factor (power (await_primary (primary (atom r))))))) + (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q))))))))) & (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom b))))))))))))))))))) )))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _ilog ( (params (parameters (param_no_default (param x) ,) (param_no_default (param M) ,) (param_with_default (param L) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 8)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom x))))))) - (term (factor (power (await_primary (primary (atom M)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom R)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom R))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom L))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom y)))))))))))))))))) )))))))) << (sum (sum (term (factor (power (await_primary (primary (atom L))))))) - (term (factor (power (await_primary (primary (atom R))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom R))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom L))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom y)))))))))))))))))) )))))))) >> (sum (sum (term (factor (power (await_primary (primary (atom R))))))) - (term (factor (power (await_primary (primary (atom L))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom M)))))) * (factor (power (await_primary (primary (atom y))))))))))))))))) )))))))))) << (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom M))))))) + (term (factor (power (await_primary (primary (primary (atom _sqrt_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom M)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom M))))))) + (term (factor (power (await_primary (primary (primary (atom _rshift_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom y)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom R)))))))))))))))))) ))))))))))))))))) )))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target R) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom T)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor - (factor (power (await_primary (primary (atom 10))))))) * (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))) )))))) // (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 3)))))) * (factor (power (await_primary (primary (atom L))))))))))))))))) )))))))))))))))))))) ))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom yshift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _rshift_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom y)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom R)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom w)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom T)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom k)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom range)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom T))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom w)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom k)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom yshift)))))) * (factor (power (await_primary (primary (atom w)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom w)))))) * (factor (power (await_primary (primary (atom y)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _dlog10 ( (params (parameters (param_no_default (param c) ,) (param_no_default (param e) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target p) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom f)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom l))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom l))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom p))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom M)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p)))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom k)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom f)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom k))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target c) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom k)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom k))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _ilog)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_10)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _log10_digits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom p)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom log_d)))))) * (factor (power (await_primary (primary (atom M)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom log_10)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_tenpower)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom f)))))) * (factor (power (await_primary (primary (atom M)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_tenpower)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom p))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom log_tenpower))))))) + (term (factor (power (await_primary (primary (atom log_d)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _dlog ( (params (parameters (param_no_default (param c) ,) (param_no_default (param e) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target p) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom f)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom l))))))) - (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom l))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom p))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom k)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom f)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom k))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target c) (augassign *=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom k)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom k))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _ilog)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom log_d)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom extra)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom f)))))))))))))))))) )))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom f_log_ten)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom f)))))) * (factor (power (await_primary (primary (primary (atom _log10_digits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom extra)))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom f_log_ten)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom f_log_ten)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom f_log_ten))))))) + (term (factor (power (await_primary (primary (atom log_d)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (class_def (class_def_raw class _Log10Memoize ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom object)))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__."""))))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def __init__ ( (params (parameters (param_no_default (param self)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . digits))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "23025850929940456840179914546843642076011014886")))))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def getdigits ( (params (parameters (param_no_default (param self) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given an integer p >= 0, return floor(10**p)*log(10).\n\n        For example, self.getdigits(3) returns 2302.\n        """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom p))))))))))) (compare_op_bitwise_or_pair (lt_bitwise_or < (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "p should be nonnegative")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom p))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . digits))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom extra)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n)) (statement (compound_stmt (while_stmt while (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom True))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom M)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra))))))) + (term (factor (power (await_primary (primary (atom 2))))))))))))))))) )))))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _ilog)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 10)))))) * (factor (power (await_primary (primary (atom M)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom digits)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom extra))))))))))))))))) :)) ])))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom extra))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target extra) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom self)) . digits))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom digits)) . rstrip) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom self)) . digits) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) ]))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _log10_digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _Log10Memoize)) ( )) . getdigits))))))))))))))))))) \n)) (statement (compound_stmt (function_def (function_def_raw def _iexp ( (params (parameters (param_no_default (param x) ,) (param_no_default (param M) ,) (param_with_default (param L) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 8)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller)."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom R)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _nbits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom x)))))))) << (sum (term (factor (power (await_primary (primary (atom L))))))))))))))))) )))))))) // (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom T)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor - (factor (power (await_primary (primary (atom 10))))))) * (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))))))))))))) )))))))))))))))))) )))))) // (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom 3)))))) * (factor (power (await_primary (primary (atom L))))))))))))))))) )))))))))))))))))))) ))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom x)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom T)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom Mshift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))) << (sum (term (factor (power (await_primary (primary (atom R)))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom i)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom range)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom T))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom x)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom Mshift))))))) + (term (factor (power (await_primary (primary (atom y))))))))))))))))) )))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom Mshift)))))) * (factor (power (await_primary (primary (atom i)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom k)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom range)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom R))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom Mshift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (shift_expr (sum (term (factor (power (await_primary (primary (atom M)))))))) << (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom k))))))) + (term (factor (power (await_primary (primary (atom 2))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom y)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom y)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom y))))))) + (term (factor (power (await_primary (primary (atom Mshift))))))))))))))))) )))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Mshift)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom M))))))) + (term (factor (power (await_primary (primary (atom y)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _dexp ( (params (parameters (param_no_default (param c) ,) (param_no_default (param e) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n\n    Returns integers d, f such that:\n\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp."""))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target p) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom extra)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom q)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom extra)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom e))))))) + (term (factor (power (await_primary (primary (atom q)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom cshift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom c)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom shift)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom cshift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom c)))))) // (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom shift))))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom quot))) , (star_target (target_with_star_atom (star_atom rem)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom divmod)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom cshift)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _log10_digits)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom q)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom rem)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rem)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom extra)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _iexp)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom rem)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p)))))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1000)))))))))))))))))) ))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom quot))))))) - (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom 3)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _dpower ( (params (parameters (param_no_default (param xc) ,) (param_no_default (param xe) ,) (param_no_default (param yc) ,) (param_no_default (param ye) ,) (param_no_default (param p)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom b)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom abs)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc)))))))))))))))))) )))))))))))))))))) )))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom ye)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom lxc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dlog)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xe)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom b))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom shift)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom ye))))))) - (term (factor (power (await_primary (primary (atom b)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom shift))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom pc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (term (factor (power (await_primary (primary (atom lxc)))))) * (factor (power (await_primary (primary (atom yc)))))) * (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom shift)))))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom pc)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom lxc)))))) * (factor (power (await_primary (primary (atom yc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor - (factor (power (await_primary (primary (atom shift))))))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom pc))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom xc)))))))))))))))))) )))))))))))))))))) ))))))) + (term (factor (power (await_primary (primary (atom xe))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))))) ))))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom yc))))))))))) (compare_op_bitwise_or_pair (gt_bitwise_or > (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ))))))))))))))))))))) ))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 1))))))) - (term (factor (power (await_primary (primary (atom p)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom 10))) ** (factor (power (await_primary (primary (atom p))))))))) - (term (factor (power (await_primary (primary (atom 1))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom p))))))))))))))))))))) \n))) <DEDENT>)))))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff))) , (star_target (target_with_star_atom (star_atom exp)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dexp)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom pc)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom 1))))))))))))))))) ))))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom p))))))) + (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom coeff)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _div_nearest)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target exp) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom coeff))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _log10_lb ( (params (parameters (param_no_default (param c) ,) (param_with_default (param correction) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (dict { (double_starred_kvpairs (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '1')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 100)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '2')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 70)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '3')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 53)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '4')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 40)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '5')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 31)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '6')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 23)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '7')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 16)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '8')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '9')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 5))))))))))))))))))) }))))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Compute a lower bound for 100*log10(c) for a positive integer c."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "The argument to _log10_lb should be nonnegative.")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom str_c)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom c)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom 100)))))) * (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom str_c)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom correction)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str_c)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ])))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _convert_other ( (params (parameters (param_no_default (param other) ,) (param_with_default (param raiseit) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False))))))))))))))))) ,) (param_with_default (param allow_float) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Convert other to Decimal.\n\n    Verifies that it's ok to use in an implicit construction.\n    If allow_float is true, allow conversion from float;  this\n    is used in the comparison methods (__eq__ and friends).\n\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom int)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom allow_float))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom float)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom Decimal)) . from_float) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom raiseit))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom TypeError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom (strings (string "Unable to convert %s to Decimal")))))))) % (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _convert_for_comparison ( (params (parameters (param_no_default (param self) ,) (param_no_default (param other) ,) (param_with_default (param equality_op) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom False)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given a Decimal instance self and a Python object other, return\n    a pair (s, o) of Decimal instances such that "s op o" is\n    equivalent to "self op other" for any of the 6 comparison\n    operators "op".\n\n    """))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Decimal)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _numbers)) . Rational))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _is_special))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom self)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _dec_from_triple)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _sign))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom str)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _int))))))))))))))))) )))))) * (factor (power (await_primary (primary (primary (atom other)) . denominator))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom self)) . _exp))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . numerator))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom equality_op))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _numbers)) . Complex))))))))))))))))) ))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . imag)))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom other)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom other)) . real))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom isinstance)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom float)))))))))))))))))) ))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom context)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom getcontext)) ( )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom equality_op))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (t_primary (atom context)) . flags) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom FloatOperation))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom context)) . _raise_error) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom FloatOperation)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "strict semantics for mixing floats and Decimals are enabled")))))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom self))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom Decimal)) . from_float) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom other)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented))))))))))))))))) , (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom NotImplemented)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom DefaultContext)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( (arguments (args (kwargs (kwarg_or_starred prec = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 28))))))))))))))))) , (kwarg_or_starred rounding = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN))))))))))))))))) , (kwarg_or_starred traps = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation))))))))))))))))))) ])))))))))))))))))) , (kwarg_or_starred flags = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ])))))))))))))))))) , (kwarg_or_starred Emax = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 999999))))))))))))))))) , (kwarg_or_starred Emin = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 999999)))))))))))))))))) , (kwarg_or_starred capitals = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1))))))))))))))))) , (kwarg_or_starred clamp = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom BasicContext)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( (arguments (args (kwargs (kwarg_or_starred prec = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 9))))))))))))))))) , (kwarg_or_starred rounding = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_UP))))))))))))))))) , (kwarg_or_starred traps = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom DivisionByZero)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Overflow)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom InvalidOperation)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Clamped)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom Underflow))))))))))))))))))) ])))))))))))))))))) , (kwarg_or_starred flags = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ])))))))))))))))))))) ,) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom ExtendedContext)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Context)) ( (arguments (args (kwargs (kwarg_or_starred prec = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 9))))))))))))))))) , (kwarg_or_starred rounding = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ROUND_HALF_EVEN))))))))))))))))) , (kwarg_or_starred traps = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ])))))))))))))))))) , (kwarg_or_starred flags = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ])))))))))))))))))))) ,) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name re)))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _parser)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom re)) . compile) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string r"""        # A numeric string consists of:\n#    \s*\n    (?P<sign>[-+])?              # an optional sign, followed by either...\n    (\n        (?=\d|\.\d)              # ...a number (with at least one digit)\n        (?P<int>\d*)             # having a (possibly empty) integer part\n        (\.(?P<frac>\d*))?       # followed by an optional fractional part\n        (E(?P<exp>[-+]?\d+))?    # followed by an optional exponent, or...\n    |\n        Inf(inity)?              # ...an infinity, or...\n    |\n        (?P<signal>s)?           # ...an (optionally signaling)\n        NaN                      # NaN\n        (?P<diag>\d*)            # with (possibly empty) diagnostic info.\n    )\n#    \s*\n    \Z\n""")))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom re)) . VERBOSE)))))))))) | (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom re)) . IGNORECASE))))))))))))))))) )) . match))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _all_zeros)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom re)) . compile) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0*$')))))))))))))))))))) )) . match))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _exact_half)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (primary (atom re)) . compile) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '50*$')))))))))))))))))))) )) . match))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _parse_format_specifier_regex)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom re)) . compile) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string r"""\A\n(?:\n   (?P<fill>.)?\n   (?P<align>[<>=^])\n)?\n(?P<sign>[-+ ])?\n(?P<no_neg_0>z)?\n(?P<alt>\#)?\n(?P<zeropad>0)?\n(?P<minimumwidth>(?!0)\d+)?\n(?P<thousands_sep>,)?\n(?:\.(?P<precision>0|(?!0)\d+))?\n(?P<type>[eEfFgGn%])?\n\Z\n""")))))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom re)) . VERBOSE)))))))))) | (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom re)) . DOTALL))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (del_stmt del (del_targets (del_target (del_t_atom re))))) \n)) (statement (compound_stmt (try_stmt try : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (import_stmt (import_name import (dotted_as_names (dotted_as_name (dotted_name locale) as _locale))))) \n))) <DEDENT>) (except_block except (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom ImportError)))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt pass) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _parse_format_specifier ( (params (parameters (param_no_default (param format_spec) ,) (param_with_default (param _localeconv) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Parse and validate a format specifier.\n\n    Turns a standard numeric format specifier into a dict, with the\n    following entries:\n\n      fill: fill character to pad field to minimum width\n      align: alignment type, either '<', '>', '=' or '^'\n      sign: either '+', '-' or ' '\n      minimumwidth: nonnegative integer giving minimum width\n      zeropad: boolean, indicating whether to pad with zeros\n      thousands_sep: string to use as thousands separator, or ''\n      grouping: grouping for thousands separators, in format\n        used by localeconv\n      decimal_point: string to use for decimal point\n      precision: nonnegative integer giving precision, or None\n      type: one of the characters 'eEfFgG%', or None\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom m)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _parse_format_specifier_regex)) . match) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom format_spec)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom m))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string "Invalid format specifier: "))))))))) + (term (factor (power (await_primary (primary (atom format_spec)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom format_dict)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom m)) . groupdict) ( )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fill)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fill'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom align)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'align'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'zeropad'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'zeropad'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'zeropad'))))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fill))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string "Fill character conflicts with '0'") (string " in format specifier: "))))))))) + (term (factor (power (await_primary (primary (atom format_spec)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align))))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string "Alignment conflicts with '0' in ") (string "format specifier: "))))))))) + (term (factor (power (await_primary (primary (atom format_spec)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fill'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fill)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string ' ')))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'align'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '>')))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-')))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'minimumwidth'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'minimumwidth'))))))))))))))))))))) ]))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '0')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom int)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ]))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'gGn'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'precision'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) \n))) <DEDENT>))))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'n'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'g')))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _localeconv))))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _localeconv)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom _locale)) . localeconv) ( )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (isnot_bitwise_or is not (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom (strings (string "Explicit thousands separator conflicts with ") (string "'n' type in format specifier: "))))))))) + (term (factor (power (await_primary (primary (atom format_spec)))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _localeconv)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'grouping'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _localeconv)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'grouping'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal_point'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _localeconv)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal_point'))))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (is_bitwise_or is (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom None))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'grouping'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 3)))))))))))))))))) , (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) ]))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (t_primary (atom format_dict)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal_point'))))))))))))))))))))) ]))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '.')))))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom format_dict)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _format_align ( (params (parameters (param_no_default (param sign) ,) (param_no_default (param body) ,) (param_no_default (param spec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Given an unpadded, non-aligned numeric string 'body' and sign\n    string 'sign', add padding and alignment conforming to the given\n    format specifier dictionary 'spec' (as produced by\n    parse_format_specifier).\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom minimumwidth)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'minimumwidth'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fill)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'fill'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom padding)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (atom fill)))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom minimumwidth))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom body)))))))))))))))))) ))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom align)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'align'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '<'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom body))))))) + (term (factor (power (await_primary (primary (atom padding)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '>'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom padding))))))) + (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom body)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '='))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom padding))))))) + (term (factor (power (await_primary (primary (atom body)))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom align))))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '^'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom half)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom padding)))))))))))))))))) )))))) // (factor (power (await_primary (primary (atom 2)))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom result)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom padding)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom half)))))))))))))))))) ])))))) + (term (factor (power (await_primary (primary (atom sign))))))) + (term (factor (power (await_primary (primary (atom body))))))) + (term (factor (power (await_primary (primary (primary (atom padding)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom half)))))))))))))))) :)) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Unrecognised alignment field')))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom result)))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _group_lengths ( (params (parameters (param_no_default (param grouping)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Convert a localeconv-style grouping into a (possibly infinite)\n    iterable of integers representing group lengths.\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (import_stmt (import_from from (dotted_name itertools) import (import_from_targets (import_from_as_names (import_from_as_name chain) , (import_from_as_name repeat)))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom grouping)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ]))))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom grouping)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom grouping)))))))))))))))))) ))))))))))) (compare_op_bitwise_or_pair (gte_bitwise_or >= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 2))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom chain)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom grouping)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom repeat)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom grouping)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 2)))))))))))))))))))) ]))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom grouping)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1)))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _locale)) . CHAR_MAX)))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom grouping)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'unrecognised format for grouping')))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _insert_thousands_sep ( (params (parameters (param_no_default (param digits) ,) (param_no_default (param spec) ,) (param_with_default (param min_width) (default_assignment = (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Insert thousands separators into a digit string.\n\n    spec is a dictionary whose keys should include 'thousands_sep' and\n    'grouping'; typically it's the result of parsing the format\n    specifier using _parse_format_specifier.\n\n    The min_width keyword argument gives the minimum length of the\n    result, which will be padded on the left with zeros if necessary.\n\n    If necessary, the zero padding adds an extra '0' on the left to\n    avoid a leading thousands separator.  For example, inserting\n    commas every three digits in '123456', with min_width=8, gives\n    '0,123,456', even though that has length 9.\n\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sep)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'thousands_sep'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom grouping)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'grouping'))))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom groups)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (list [ ]))))))))))))))))))))) \n)) (statement (compound_stmt (for_stmt for (star_targets (star_target (target_with_star_atom (star_atom l)))) in (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _group_lengths)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom grouping)))))))))))))))))) )))))))))))))))))) : (block \n <INDENT> (statements (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom l))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (raise_stmt raise (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom ValueError)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string "group length should be positive")))))))))))))))))))) )))))))))))))))))) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom min)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom min_width)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom l)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom groups)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom l))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) ))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (primary (atom digits)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom l))))))))))))))))) :)) ]))))))))))))))))) ))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom digits)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom digits)) [ (slices (slice : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom l))))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target min_width) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom l)))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion not (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))) and (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom min_width))))))))))) (compare_op_bitwise_or_pair (lte_bitwise_or <= (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt break) \n))) <DEDENT>)))) (statement (simple_stmts (simple_stmt (assignment (single_target min_width) (augassign -=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sep)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom l)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom max)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) )))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom min_width)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom groups)) . append) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (term (factor (power (await_primary (primary (atom (strings (string '0')))))))) * (factor (power (await_primary (primary (atom (group ( (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom l))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom digits)))))))))))))))))) ))))))))))))))))) ))))))))) + (term (factor (power (await_primary (primary (primary (atom digits)) [ (slices (slice (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom l))))))))))))))))) :)) ]))))))))))))))))) ))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom sep)) . join) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom reversed)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom groups)))))))))))))))))) )))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _format_sign ( (params (parameters (param_no_default (param is_negative) ,) (param_no_default (param spec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Determine sign character."""))))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom is_negative))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-')))))))))))))))))))))) \n))) <DEDENT>) (elif_stmt elif (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string ' +'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'sign'))))))))))))))))))))) ]))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '')))))))))))))))))))))) \n))) <DEDENT>))))))) <DEDENT>))))) (statement (compound_stmt (function_def (function_def_raw def _format_number ( (params (parameters (param_no_default (param is_negative) ,) (param_no_default (param intpart) ,) (param_no_default (param fracpart) ,) (param_no_default (param exp) ,) (param_no_default (param spec)))) ) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string """Format a number, given the following data:\n\n    is_negative: true if the number is negative, else false\n    intpart: string of digits that must appear before the decimal point\n    fracpart: string of digits that must come after the point\n    exp: exponent, as an integer\n    spec: dictionary resulting from parsing the format specifier\n\n    This function uses the information in spec to:\n      insert separators (decimal separator and thousands separators)\n      format the sign\n      format the exponent\n      add trailing '%' for the '%' type\n      zero-pad if necessary\n      fill and align if necessary\n    """))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom sign)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _format_sign)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom is_negative)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))))) )))))))))))))))))))) \n)) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fracpart)))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'alt'))))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom fracpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'decimal_point'))))))))))))))))))))) ])))))) + (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp))))))))))) (compare_op_bitwise_or_pair (noteq_bitwise_or != (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))) or (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (in_bitwise_or in (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'eE'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom echar)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom (dict { (double_starred_kvpairs (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'E')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'E')))))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'e')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'e')))))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'G')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'E')))))))))))))))))))) , (double_starred_kvpair (kvpair (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'g')))))))))))))))))) : (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'e'))))))))))))))))))))) }))) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))))))))))) ]))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (single_target fracpart) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom (strings (string "{0}{1:+}")))) . format) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom echar)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom exp)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'type'))))))))))))))))))))) ])))))))))) (compare_op_bitwise_or_pair (eq_bitwise_or == (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '%'))))))))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (single_target fracpart) (augassign +=) (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '%')))))))))))))))))))))) \n))) <DEDENT>)))) (statement (compound_stmt (if_stmt if (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'zeropad'))))))))))))))))))))) ])))))))))))))))) : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom min_width)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (sum (term (factor (power (await_primary (primary (primary (atom spec)) [ (slices (slice (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'minimumwidth'))))))))))))))))))))) ])))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))))) ))))))) - (term (factor (power (await_primary (primary (primary (atom len)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>) (else_block else : (block \n <INDENT> (statements (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom min_width)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom intpart)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _insert_thousands_sep)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom intpart)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom min_width)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (return_stmt return (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom _format_align)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom sign)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom intpart))))))) + (term (factor (power (await_primary (primary (atom fracpart)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom spec)))))))))))))))))) )))))))))))))))))))) \n))) <DEDENT>))))) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _Infinity)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'Inf')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _NegativeInfinity)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string '-Inf')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _NaN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (strings (string 'NaN')))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _Zero)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 0)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _One)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 1)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _NegativeOne)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom Decimal)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor - (factor (power (await_primary (primary (atom 1))))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _SignedInfinity)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom (tuple ( (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _Infinity)))))))))))))))))) , (star_named_expressions (star_named_expression (named_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _NegativeInfinity))))))))))))))))))) )))))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _PyHASH_MODULUS)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom sys)) . hash_info) . modulus))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _PyHASH_INF)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom sys)) . hash_info) . inf))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _PyHASH_NAN)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (primary (atom sys)) . hash_info) . nan))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (assignment (star_targets (star_target (target_with_star_atom (star_atom _PyHASH_10INV)))) = (star_expressions (star_expression (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (primary (atom pow)) ( (arguments (args (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom 10)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (sum (term (factor (power (await_primary (primary (atom _PyHASH_MODULUS))))))) - (term (factor (power (await_primary (primary (atom 2)))))))))))))))) , (expression (disjunction (conjunction (inversion (comparison (bitwise_or (bitwise_xor (bitwise_and (shift_expr (sum (term (factor (power (await_primary (primary (atom _PyHASH_MODULUS)))))))))))))))))) )))))))))))))))))))) \n)) (statement (simple_stmts (simple_stmt (del_stmt del (del_targets (del_target (del_t_atom sys))))) \n))) <EOF>)