(kotlinFile (preamble packageHeader importList) (topLevelObject (classDeclaration class (simpleIdentifier C) (classBody { \n \n (classMemberDeclaration (propertyDeclaration val (variableDeclaration (simpleIdentifier s) : (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) \n (getter get ( ) = (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (literalConstant (stringLiteral (lineStringLiteral " ")))))))))))))))))))) (anysemi \n) (anysemi \n)) (classMemberDeclaration (propertyDeclaration var (variableDeclaration (simpleIdentifier t) : (type (typeReference (userType (simpleUserType (simpleIdentifier String)))))) \n (setter set ( (simpleIdentifier value) ) (functionBody (block { (statements (statement (blockLevelExpression (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (simpleIdentifier t))))))))))))))) (assignmentOperator =) (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (simpleIdentifier value))))))))))))))))))) }))) (semi \n) (getter get ( ) = (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (simpleIdentifier t)))))))))))))))))) (anysemi \n)) }))) (anysemi \n) <EOF>)