(kotlinFile (preamble packageHeader importList) (topLevelObject (functionDeclaration fun (identifier (simpleIdentifier f2)) (functionValueParameters ( )) : (type (nullableType (typeReference (userType (simpleUserType (simpleIdentifier Array)))) ?)) (functionBody (block { (statements (anysemi \n) (statement (blockLevelExpression (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (jumpExpression return (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (literalConstant null)))))))))))))))))))))))))))))))))) (anysemi \n)) })))) (anysemi \n) (anysemi \n) (topLevelObject (functionDeclaration fun (identifier (simpleIdentifier foo)) (functionValueParameters ( )) (functionBody = \n (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (conditionalExpression (whenExpression when ( (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression val (identifier (simpleIdentifier type)))))))))))))))) (assignmentOperator =) (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (simpleIdentifier f2)) (postfixUnaryOperation (callSuffix (valueArguments ( )))))))))))))))))) ) { \n (whenEntry (whenCondition (typeTest (isOperator is) (type (typeReference (userType (simpleUserType (simpleIdentifier Array))))))) -> (controlStructureBody (block { (statements (anysemi \n) (statement (blockLevelExpression (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (literalConstant 1)))))))))))))))))) (anysemi \n)) })) (semi \n \n)) (whenEntry else -> (controlStructureBody (block { (statements (anysemi \n) (statement (blockLevelExpression (expression (disjunction (conjunction (equalityComparison (comparison (namedInfix (elvisExpression (infixFunctionCall (rangeExpression (additiveExpression (multiplicativeExpression (typeRHS (prefixUnaryExpression (postfixUnaryExpression (atomicExpression (literalConstant 0)))))))))))))))))) (anysemi \n)) }))) \n })))))))))))))))))))) (anysemi \n) <EOF>)