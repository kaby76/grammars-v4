(sourceUnit (pragmaDirective pragma  solidity 0.4.4 ;) (pragmaDirective pragma  solidity ^0.4.4 ;) (pragmaDirective pragma  solidity ~0.4.4 ;) (pragmaDirective pragma  solidity >0.4.4 ;) (pragmaDirective pragma  solidity >=0.4.4 ;) (pragmaDirective pragma  solidity <0.4.4 ;) (pragmaDirective pragma  solidity <=0.4.4 ;) (pragmaDirective pragma  solidity =0.4.4 ;) (libraryDefinition library (identifier a) { }) (libraryDefinition library (identifier b) { }) (libraryDefinition library (identifier c) { }) (libraryDefinition library (identifier f) { }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier a)) , (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier b))) ) ;)) (contractBodyElement (functionDefinition function (identifier g) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier c))) ) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (eventDefinition event (identifier e) ( (eventParameter (typeName (typeName (elementaryTypeName uint)) [ (expression (literal (numberLiteral 10))) ]) (identifier a)) , (eventParameter (typeName (typeName (elementaryTypeName bytes7)) [ (expression (literal (numberLiteral 8))) ]) indexed (identifier b)) , (eventParameter (typeName (typeName (identifierPath (identifier c))) [ (expression (literal (numberLiteral 3))) ]) (identifier x)) ) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (typeName (elementaryTypeName uint8)) [ (expression (expression (literal (numberLiteral 10))) * (expression (literal (numberLiteral 2)))) ]) (identifier x)) ;))) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (stateVariableDeclaration (typeName (typeName (elementaryTypeName uint)) [ (expression (literal (numberLiteral 10))) ]) (identifier a) ;)) (contractBodyElement (stateVariableDeclaration (typeName (typeName (elementaryTypeName uint)) [ ]) (identifier a2) ;)) (contractBodyElement (structDefinition struct (identifier x) { (structMember (typeName (typeName (elementaryTypeName uint)) [ (expression (expression (literal (numberLiteral 2))) ** (expression (literal (numberLiteral 20)))) ]) (identifier b) ;) (structMember (typeName (typeName (identifierPath (identifier y))) [ (expression (literal (numberLiteral 0))) ]) (identifier c) ;) })) (contractBodyElement (structDefinition struct (identifier y) { (structMember (typeName (elementaryTypeName uint)) (identifier d) ;) (structMember (typeName (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName uint)) => (typeName (identifierPath (identifier x))) ))) [ ]) (identifier e) ;) })) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (expression (tupleExpression ( (expression (expression (expression (inlineArrayExpression [ (expression (literal (numberLiteral 1))) , (expression (literal (numberLiteral 2))) , (expression (expression (literal (numberLiteral 3))) + (expression (literal (numberLiteral 4)))) ])) [ (expression (expression (identifier a)) (assignOp /=) (expression (literal (numberLiteral 9)))) ]) - (expression (literal (numberLiteral 3)))) ))) ** (expression (literal (numberLiteral 4)))) ;))) }))) }) (importDirective import (path "./abc.sol") as (identifier x) ;) (importDirective import * as (identifier y) from (path "./abc.sol") ;) (importDirective import (symbolAliases { (importAliases (identifier a) as (identifier b)) , (importAliases (identifier c) as (identifier d)) , (importAliases (identifier f)) }) from (path "./abc.sol") ;) (contractDefinition contract (identifier z) { }) (contractDefinition contract (identifier A) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier x)) = (expression (expression (expression (literal (numberLiteral 3))) < (expression (literal (numberLiteral 0)))) ? (expression (expression (expression (literal (numberLiteral 2))) > (expression (literal (numberLiteral 1)))) ? (expression (literal (numberLiteral 2))) : (expression (literal (numberLiteral 1)))) : (expression (expression (expression (literal (numberLiteral 7))) > (expression (literal (numberLiteral 2)))) ? (expression (literal (numberLiteral 7))) : (expression (literal (numberLiteral 6))))) ;))) }))) }) (contractDefinition contract (identifier A) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier x)) = (expression (expression (literal (boolLiteral true))) ? (expression (literal (numberLiteral 1))) : (expression (literal (numberLiteral 0)))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier y)) = (expression (expression (literal (boolLiteral false))) ? (expression (literal (numberLiteral 0))) : (expression (literal (numberLiteral 1)))) ;))) }))) }) (contractDefinition contract (identifier A) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier y)) = (expression (literal (numberLiteral 1))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier x)) = (expression (expression (expression (literal (numberLiteral 3))) < (expression (literal (numberLiteral 0)))) ? (expression (expression (identifier x)) (assignOp =) (expression (literal (numberLiteral 3)))) : (expression (literal (numberLiteral 6)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (literal (boolLiteral true))) ? (expression (expression (identifier x)) (assignOp =) (expression (literal (numberLiteral 3)))) : (expression (literal (numberLiteral 4)))) ;))) }))) }) (contractDefinition contract (identifier A) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier x)) = (expression (expression (expression (literal (numberLiteral 3))) > (expression (literal (numberLiteral 0)))) ? (expression (literal (numberLiteral 3))) : (expression (literal (numberLiteral 0)))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier y)) = (expression (expression (tupleExpression ( (expression (expression (literal (numberLiteral 3))) > (expression (literal (numberLiteral 0)))) ))) ? (expression (literal (numberLiteral 3))) : (expression (literal (numberLiteral 0)))) ;))) }))) }) (contractDefinition contract (identifier A) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier x)) = (expression (literal (numberLiteral 3))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier y)) = (expression (literal (numberLiteral 1))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier z)) = (expression (expression (tupleExpression ( (expression (expression (identifier x)) > (expression (identifier y))) ))) ? (expression (identifier x)) : (expression (identifier y))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier w)) = (expression (expression (expression (identifier x)) > (expression (identifier y))) ? (expression (identifier x)) : (expression (identifier y))) ;))) }))) }) (contractDefinition contract (identifier base) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (contractDefinition contract (identifier derived) (inheritanceSpecifierList is (inheritanceSpecifier (identifierPath (identifier base)))) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (contractDefinition contract (identifier foo) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (contractDefinition contract (identifier bar) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (contractDefinition contract (identifier derived) (inheritanceSpecifierList is (inheritanceSpecifier (identifierPath (identifier foo))) , (inheritanceSpecifier (identifierPath (identifier bar)))) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (contractDefinition contract (identifier A) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName fixed40x40)) (identifier storeMe) ;)) (contractBodyElement (functionDefinition function (identifier f) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName ufixed)) (identifier x)) , (parameterDeclaration (typeName (elementaryTypeName fixed32x32)) (identifier y))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (identifierPath (identifier ufixed8x8))) (identifier a)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName fixed)) (identifier b)) ;))) }))) }) (libraryDefinition library (identifier d) { }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName address)) (identifier b))) ) (block { (statement (ifStatement if ( (expression (expression (identifier a)) < (expression (literal (numberLiteral 0)))) ) (statement (simpleStatement (expressionStatement (expression (expression (identifier b)) (assignOp =) (expression (literal (numberLiteral 0x67)))) ;))) else (statement (ifStatement if ( (expression (expression (identifier a)) == (expression (literal (numberLiteral 0)))) ) (statement (simpleStatement (expressionStatement (expression (expression (identifier b)) (assignOp =) (expression (literal (numberLiteral 0x12)))) ;))) else (statement (simpleStatement (expressionStatement (expression (expression (identifier b)) (assignOp =) (expression (literal (numberLiteral 0x78)))) ;))))))) }))) }) (contractDefinition contract (identifier test) { }) (contractDefinition contract (identifier c) { (contractBodyElement (enumDefinition enum (identifier foo) { (identifier Foo) })) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier stateVar) ;)) (contractBodyElement (functionDefinition function (identifier functionName) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes20)) (identifier arg1)) , (parameterDeclaration (typeName (elementaryTypeName address)) (identifier addr))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName int)) (identifier id))) ) (block { }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (enumDefinition enum (identifier validEnum) { (identifier Value1) , (identifier Value2) , (identifier Value3) , (identifier Value4) })) (contractBodyElement (functionDefinition function (identifier c) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (expression (identifier validEnum)) . (identifier Value3))) ;))) }))) (contractBodyElement (stateVariableDeclaration (typeName (identifierPath (identifier validEnum))) (identifier a) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (eventDefinition event (identifier e) ( ) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (eventDefinition event (identifier e) ( ) anonymous ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (eventDefinition event (identifier e) ( (eventParameter (typeName (elementaryTypeName uint)) (identifier a)) , (eventParameter (typeName (elementaryTypeName bytes32)) (identifier s)) ) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (eventDefinition event (identifier e) ( (eventParameter (typeName (elementaryTypeName uint)) (identifier a)) , (eventParameter (typeName (elementaryTypeName bytes32)) indexed (identifier s)) , (eventParameter (typeName (elementaryTypeName bool)) indexed (identifier b)) ) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (expression (literal (numberLiteral 3))) ** (expression (identifier a))) ;))) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (functionDefinition function (identifier x) ( ) (visibility external) (block { }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (functionDefinition function (identifier c) ( ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (literal (numberLiteral 0))) ;))) (statement (forStatement for ( (simpleStatement (expressionStatement (expression (expression (identifier i)) (assignOp =) (expression (literal (numberLiteral 0)))) ;)) (expressionStatement (expression (expression (identifier i)) < (expression (literal (numberLiteral 10)))) ;) (expression (expression (identifier i)) ++) ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (identifier i)) ;))) (statement (breakStatement break ;)) (statement (continueStatement continue ;)) })))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (literal (numberLiteral 0))) ;))) (statement (forStatement for ( ; ; ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (identifier i)) ;))) (statement (breakStatement break ;)) (statement (continueStatement continue ;)) })))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (literal (numberLiteral 0))) ;))) (statement (forStatement for ( (simpleStatement (expressionStatement (expression (expression (identifier i)) (assignOp =) (expression (literal (numberLiteral 0)))) ;)) (expressionStatement (expression (expression (identifier i)) < (expression (literal (numberLiteral 10)))) ;) (expression (expression (identifier i)) ++) ) (statement (continueStatement continue ;)))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (forStatement for ( (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier i)) = (expression (literal (numberLiteral 0))) ;)) (expressionStatement (expression (expression (identifier i)) < (expression (literal (numberLiteral 10)))) ;) (expression (expression (identifier i)) ++) ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (identifier i)) ;))) (statement (breakStatement break ;)) (statement (continueStatement continue ;)) })))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier functionName) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes32)) (identifier input))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes32)) (identifier out))) ) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName string)) (identifier a) = (expression (literal (hexStringLiteral hex"00FF0000"))) ;)) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName string)) (identifier b) = (expression (literal (hexStringLiteral hex'00AA0000'))) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (ifStatement if ( (expression (expression (identifier a)) >= (expression (literal (numberLiteral 8)))) ) (statement (block { (statement (returnStatement return ;)) })) else (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint32)) (identifier b)) = (expression (literal (numberLiteral 7))) ;))) })))) }))) }) (importDirective import (path './abc.sol') as (identifier my_abc) ;) (contractDefinition contract (identifier test) { }) (importDirective import (symbolAliases { (importAliases (identifier a) as (identifier my_a)) , (importAliases (identifier b) as (identifier my_b)) }) from (path './abc.sol') ;) (contractDefinition contract (identifier test) { }) (importDirective import (path "./abc.sol") ;) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (importDirective import * as (identifier abc) from (path './abc.sol') ;) (contractDefinition contract (identifier test) { }) (contractDefinition contract (identifier c) { (contractBodyElement (stateVariableDeclaration (typeName (typeName (elementaryTypeName uint)) [ ]) (identifier a) ;)) (contractBodyElement (functionDefinition function (identifier f) ( ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint))) , (parameterDeclaration (typeName (elementaryTypeName uint)))) ) (block { (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (inlineArrayExpression [ (expression (literal (numberLiteral 1))) , (expression (literal (numberLiteral 2))) , (expression (literal (numberLiteral 3))) ]))) ;))) (statement (returnStatement return (expression (tupleExpression ( (expression (expression (identifier a)) [ (expression (literal (numberLiteral 3))) ]) , (expression (expression (inlineArrayExpression [ (expression (literal (numberLiteral 2))) , (expression (literal (numberLiteral 3))) , (expression (literal (numberLiteral 4))) ])) [ (expression (literal (numberLiteral 0))) ]) ))) ;)) }))) }) (libraryDefinition library (identifier Lib) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier test) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 1) wei))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 3) gwei))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 4) ether))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 1) seconds))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 2) minutes))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 3) hours))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 4) days))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 5) weeks))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (literalWithSubDenomination (numberLiteral 6) years))) ;))) }))) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier a) ;)) }) (contractDefinition contract (identifier c) { (contractBodyElement (functionDefinition function (identifier c) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression (expression (expression (expression (literalWithSubDenomination (numberLiteral 1) wei)) * (expression (literalWithSubDenomination (numberLiteral 100) wei))) + (expression (literalWithSubDenomination (numberLiteral 7) gwei))) - (expression (literal (numberLiteral 3))))) ;))) }))) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier a) ;)) }) (contractDefinition contract (identifier Foo) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (typeName (elementaryTypeName uint)) [ ]) (dataLocation storage) (identifier x)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (typeName (elementaryTypeName uint)) [ ]) (dataLocation memory) (identifier y)) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName address)) => (typeName (elementaryTypeName bytes32)) ))) (identifier names) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (structDefinition struct (identifier test_struct) { (structMember (typeName (elementaryTypeName address)) (identifier addr) ;) (structMember (typeName (elementaryTypeName uint256)) (identifier count) ;) (structMember (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName bytes32)) => (typeName (identifierPath (identifier test_struct))) ))) (identifier self_reference) ;) })) }) (contractDefinition contract (identifier test) { (contractBodyElement (structDefinition struct (identifier test_struct) { (structMember (typeName (elementaryTypeName address)) (identifier addr) ;) (structMember (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName uint64)) => (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName bytes32)) => (typeName (elementaryTypeName uint)) ))) ))) (identifier complex_mapping) ;) })) }) (contractDefinition contract (identifier c) { (contractBodyElement (modifierDefinition modifier (identifier mod) (block { (statement (ifStatement if ( (expression (expression (expression (identifier msg)) . (identifier sender)) == (expression (literal (numberLiteral 0)))) ) (statement (simpleStatement (expressionStatement (expression (identifier _)) ;))))) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (modifierDefinition modifier (identifier mod) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName address)) (identifier a))) ) (block { (statement (ifStatement if ( (expression (expression (expression (identifier msg)) . (identifier sender)) == (expression (identifier a))) ) (statement (simpleStatement (expressionStatement (expression (identifier _)) ;))))) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (modifierDefinition modifier (identifier mod1) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName address)) (identifier a))) ) (block { (statement (ifStatement if ( (expression (expression (expression (identifier msg)) . (identifier sender)) == (expression (identifier a))) ) (statement (simpleStatement (expressionStatement (expression (identifier _)) ;))))) }))) (contractBodyElement (modifierDefinition modifier (identifier mod2) (block { (statement (ifStatement if ( (expression (expression (expression (identifier msg)) . (identifier sender)) == (expression (literal (numberLiteral 2)))) ) (statement (simpleStatement (expressionStatement (expression (identifier _)) ;))))) }))) (contractBodyElement (functionDefinition function (identifier f) ( ) (modifierInvocation (identifierPath (identifier mod1)) (callArgumentList ( (expression (literal (numberLiteral 7))) ))) (modifierInvocation (identifierPath (identifier mod2))) (block { }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (stateVariableDeclaration (typeName (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName uint)) => (typeName (typeName (typeName (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName uint)) => (typeName (elementaryTypeName int8)) ))) [ (expression (literal (numberLiteral 8))) ]) [ ]) [ (expression (literal (numberLiteral 9))) ]) ))) [ ]) (identifier x) ;)) }) (contractDefinition contract (identifier C) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier a)) , (expression (identifier b)) , (expression (identifier c)) ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier d)) ))) (assignOp =) (expression (literal (numberLiteral 2)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( , (expression (identifier e)) ))) (assignOp =) (expression (literal (numberLiteral 3)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier f)) , ))) (assignOp =) (expression (literal (numberLiteral 4)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier x)) , , ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( , (expression (identifier y)) , ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( , , ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) }))) (contractBodyElement (functionDefinition function (identifier g) ( ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint))) , (parameterDeclaration (typeName (elementaryTypeName uint))) , (parameterDeclaration (typeName (elementaryTypeName uint)))) ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (contractDefinition contract (identifier test2) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (importDirective import (path "./abc.sol") ;) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (contractDefinition contract (identifier test2) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (importDirective import (path "./def.sol") ;) (contractDefinition contract (identifier foo) { (contractBodyElement (functionDefinition function (identifier foo) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier a))) ) (block { }))) }) (contractDefinition contract (identifier bar) { (contractBodyElement (functionDefinition function (identifier bar) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName string)) (identifier a)) , (parameterDeclaration (typeName (elementaryTypeName string)) (identifier b))) ) (block { }))) }) (contractDefinition contract (identifier derived) (inheritanceSpecifierList is (inheritanceSpecifier (identifierPath (identifier foo)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) , (inheritanceSpecifier (identifierPath (identifier bar)) (callArgumentList ( (expression (literal (stringLiteral "abc"))) , (expression (literal (stringLiteral "def"))) )))) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bool)) (identifier succeeded))) ) (block { (statement (returnStatement return (expression (literal (boolLiteral false))) ;)) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier stateVar) ;)) (contractBodyElement (functionDefinition function (identifier functionName) ( ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName int256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName int256)) (identifier x)) = (expression (expression (expression (tupleExpression ( (expression (expression (literal (numberLiteral 1))) + (expression (literal (numberLiteral 4)))) ))) * (expression (tupleExpression ( (expression (expression (identifier a)) - (expression (literal (numberLiteral 12)))) )))) + (expression - (expression (literal (numberLiteral 9))))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bool)) (identifier y)) = (expression (expression (expression (literal (boolLiteral true))) && (expression (tupleExpression ( (expression (expression (identifier a)) < (expression (literal (numberLiteral 6)))) )))) || (expression (literal (boolLiteral false)))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier a))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier r))) ) (block { (statement (returnStatement return (expression (identifier a)) ;)) }))) (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier a)) , (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier b))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier r))) ) (block { (statement (returnStatement return (expression (expression (identifier a)) + (expression (identifier b))) ;)) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (functionDefinition function (identifier fun) ( ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier r))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint32)) (identifier _)) = (expression (literal (numberLiteral 8))) ;))) (statement (returnStatement return (expression (expression (identifier _)) + (expression (literal (numberLiteral 1)))) ;)) }))) }) (pragmaDirective pragma  solidity ^0.4.4 ;) (contractDefinition contract (identifier test) { }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier stateVar) ;)) (contractBodyElement (functionDefinition function (identifier functionName) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes32)) (identifier input))) ) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes32)) (identifier out))) ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier stateVariable1) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (expressionStatement (expression (expression (elementaryTypeName uint64)) (callArgumentList ( (expression (literal (numberLiteral 2))) ))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint256)) (identifier stateVar) ;)) (contractBodyElement (structDefinition struct (identifier MyStructName) { (structMember (typeName (elementaryTypeName address)) (identifier addr) ;) (structMember (typeName (elementaryTypeName uint256)) (identifier count) ;) })) }) (contractDefinition contract (identifier C) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier a)) = (expression (tupleExpression ( (expression (literal (numberLiteral 1))) ))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier b)) , ))) (assignOp =) (expression (literal (numberLiteral 1)))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier c)) , (expression (identifier d)) ))) (assignOp =) (expression (tupleExpression ( (expression (literal (numberLiteral 1))) , (expression (expression (literal (numberLiteral 2))) + (expression (identifier a))) )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier e)) , ))) (assignOp =) (expression (tupleExpression ( (expression (literal (numberLiteral 1))) , (expression (literal (numberLiteral 2))) , (expression (identifier b)) )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier a)) ))) (assignOp =) (expression (literal (numberLiteral 3)))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (typeName (elementaryTypeName uint64)) [ ]) (identifier x)) = (expression (expression new (typeName (typeName (elementaryTypeName uint64)) [ ])) (callArgumentList ( (expression (literal (numberLiteral 3))) ))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint)) (identifier a)) = (expression (literal (numberLiteral 10))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) --) ;))) (statement (simpleStatement (expressionStatement (expression (expression (identifier a)) (assignOp =) (expression ~ (expression (identifier a)))) ;))) (statement (simpleStatement (expressionStatement (expression delete (expression (identifier a))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bool)) (identifier b)) = (expression ! (expression (literal (boolLiteral true)))) ;))) }))) }) (libraryDefinition library (identifier Lib) { }) (contractDefinition contract (identifier C) { (contractBodyElement (structDefinition struct (identifier s) { (structMember (typeName (elementaryTypeName uint)) (identifier a) ;) })) (contractBodyElement (usingDirective using (identifierPath (identifier Lib)) for (typeName (elementaryTypeName uint)) ;)) (contractBodyElement (usingDirective using (identifierPath (identifier Lib)) for * ;)) (contractBodyElement (usingDirective using (identifierPath (identifier Lib)) for (typeName (identifierPath (identifier s))) ;)) (contractBodyElement (functionDefinition function (identifier f) ( ) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName int)) (identifier b)) = (expression (literal (numberLiteral 5))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier c)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName address)) => (typeName (elementaryTypeName bytes32)) ))) (identifier d)) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName int)) (identifier b)) = (expression (literal (numberLiteral 2))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier c)) = (expression (literal (numberLiteral 0x87))) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (mappingType mapping ( (mappingKeyType (elementaryTypeName address)) => (typeName (elementaryTypeName bytes32)) ))) (identifier d)) ;))) (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier name)) = (expression (literal (stringLiteral "Solidity"))) ;))) }))) }) (contractDefinition contract (identifier c) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint)) private (identifier a) ;)) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint)) internal (identifier b) ;)) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint)) public (identifier c) ;)) (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint)) (identifier d) ;)) (contractBodyElement (functionDefinition function (identifier f) ( ) (block { }))) (contractBodyElement (functionDefinition function (identifier f_priv) ( ) (visibility private) (block { }))) (contractBodyElement (functionDefinition function (identifier f_public) ( ) (visibility public) (block { }))) (contractBodyElement (functionDefinition function (identifier f_internal) ( ) (visibility internal) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier fun) ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint256)) (identifier a))) ) (block { (statement (whileStatement while ( (expression (literal (boolLiteral true))) ) (statement (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier x)) = (expression (literal (numberLiteral 1))) ;))) (statement (breakStatement break ;)) (statement (continueStatement continue ;)) })))) (statement (simpleStatement (expressionStatement (expression (expression (identifier x)) (assignOp =) (expression (literal (numberLiteral 9)))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier x) ( ) (block { (statement (assemblyStatement assembly { (yulStatement (yulFunctionCall mstore ( (yulExpression (yulLiteral 0x40)) , (yulExpression (yulLiteral 0x60)) ))) (yulStatement (yulSwitchStatement switch (yulExpression (yulFunctionCall div ( (yulExpression (yulFunctionCall calldataload ( (yulExpression (yulLiteral 0)) ))) , (yulExpression (yulFunctionCall exp ( (yulExpression (yulLiteral 2)) , (yulExpression (yulLiteral 226)) ))) ))) (yulSwitchCase case (yulLiteral 0xb3de648b) (yulBlock { (yulStatement (yulVariableDeclaration let r , x := (yulFunctionCall f ( (yulExpression (yulFunctionCall calldataload ( (yulExpression (yulLiteral 4)) ))) )))) (yulStatement (yulVariableDeclaration let ret := (yulExpression (yulFunctionCall $allocate ( (yulExpression (yulLiteral 0x20)) ))))) (yulStatement (yulFunctionCall mstore ( (yulExpression (yulPath ret)) , (yulExpression (yulPath r)) ))) (yulStatement (yulFunctionCall return ( (yulExpression (yulPath ret)) , (yulExpression (yulLiteral 0x20)) ))) })) default (yulBlock { (yulStatement (yulFunctionCall revert ( (yulExpression (yulLiteral 0)) , (yulExpression (yulLiteral 0)) ))) }))) (yulStatement (yulFunctionDefinition function $allocate ( size ) -> pos (yulBlock { (yulStatement (yulAssignment (yulPath pos) := (yulExpression (yulFunctionCall mload ( (yulExpression (yulLiteral 0x40)) ))))) (yulStatement (yulFunctionCall mstore ( (yulExpression (yulLiteral 0x40)) , (yulExpression (yulFunctionCall add ( (yulExpression (yulPath pos)) , (yulExpression (yulPath size)) ))) ))) }))) (yulStatement (yulFunctionDefinition function f ( x ) -> y (yulBlock { (yulStatement (yulAssignment (yulPath y) := (yulExpression (yulLiteral 1)))) (yulStatement (yulForStatement for (yulBlock { (yulStatement (yulVariableDeclaration let i := (yulExpression (yulLiteral 0)))) }) (yulExpression (yulFunctionCall lt ( (yulExpression (yulPath i)) , (yulExpression (yulPath x)) ))) (yulBlock { (yulStatement (yulAssignment (yulPath i) := (yulExpression (yulFunctionCall add ( (yulExpression (yulPath i)) , (yulExpression (yulLiteral 1)) ))))) }) (yulBlock { (yulStatement (yulAssignment (yulPath y) := (yulExpression (yulFunctionCall mul ( (yulExpression (yulLiteral 2)) , (yulExpression (yulPath y)) ))))) }))) (yulStatement (yulIfStatement if (yulExpression (yulFunctionCall gt ( (yulExpression (yulPath y)) , (yulExpression (yulLiteral 2)) ))) (yulBlock { (yulStatement (yulFunctionCall revert ( (yulExpression (yulLiteral 0)) , (yulExpression (yulLiteral 0)) ))) }))) }))) })) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( ) (stateMutability view) (block { (statement (returnStatement return (expression (literal (numberLiteral 2))) ;)) }))) (contractBodyElement (functionDefinition function (identifier g) ( ) (stateMutability pure) (block { (statement (returnStatement return (expression (literal (numberLiteral 2))) ;)) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier a)) = (expression (literal (numberLiteral 2.3e5))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier f) ( ) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclaration (typeName (elementaryTypeName uint256)) (identifier a)) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( (expression (identifier a)) , ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( , ))) (assignOp =) (expression (expression (identifier g)) (callArgumentList ( )))) ;))) (statement (simpleStatement (expressionStatement (expression (expression (tupleExpression ( ))) (assignOp =) (expression (tupleExpression ( )))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier foo) ( ) (visibility public) returns ( (parameterList (parameterDeclaration (typeName (elementaryTypeName bytes1)) (identifier b))) ) (block { (statement (assemblyStatement assembly { (yulStatement (yulAssignment (yulPath n) := (yulExpression (yulFunctionCall byte ( (yulExpression (yulLiteral 0x0)) ))))) })) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier x) ( ) (block { (statement (emitStatement emit (expression (identifier EventCalled)) (callArgumentList ( (expression (literal (numberLiteral 1))) , (expression (literal (numberLiteral 2))) , (expression (literal (numberLiteral 3))) )) ;)) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (constructorDefinition constructor ( (parameterList (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier a)) , (parameterDeclaration (typeName (elementaryTypeName uint)) (identifier b))) ) (modifierInvocation (identifierPath (identifier withModifier))) (block { }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier x) ( ) (stateMutability payable) (block { (statement (simpleStatement (variableDeclarationStatement (variableDeclarationTuple ( (variableDeclaration (typeName (elementaryTypeName bytes32)) (identifier a)) , (variableDeclaration (typeName (elementaryTypeName uint)) (identifier b)) )) = (expression (expression (identifier foo)) (callArgumentList ( ))) ;))) }))) }) (contractDefinition contract (identifier test) { (contractBodyElement (stateVariableDeclaration (typeName (elementaryTypeName uint)) (identifier x) = (expression (literalWithSubDenomination (numberLiteral .1) ether)) ;)) }) (contractDefinition contract (identifier test) { (contractBodyElement (functionDefinition function (identifier x) ( ) (block { (statement (returnStatement return (expression (tupleExpression ( ))) ;)) }))) }) <EOF>)