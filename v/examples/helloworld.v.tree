(sourceFile (topLevelDecl (functionDecl fn main (function_ (signature (parameters ( ))) (block { (statementList (statement (declaration (varDecl (noMutDecl (identifierList areas) := (expressionList (expression (unaryExpr (primaryExpr (operand (literal (arrayLit [ (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'game')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'web')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'tools')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'science')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'systems')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'embedded')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'GUI')))))) , (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'mobile')))))) ]))))))))))) eos (statement (forStmt for (inClause (expressionList (expression (unaryExpr (primaryExpr (operand (operandName area)))))) in areas) (block { (statementList (statement (simpleStmt (expressionStmt (expression (unaryExpr (primaryExpr (primaryExpr (operand (operandName println))) (arguments ( (expressionList (expression (unaryExpr (primaryExpr (operand (literal (basicLit 'Hello, $area developers!'))))))) )))))))) eos) }))) eos) })))) (eos <EOF>) <EOF>)