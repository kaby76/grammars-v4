(root (stmtblock (stmtmulti (stmt (variablesetstmt SET (set_rest (set_rest_more (generic_set (var_name (colid (identifier client_min_messages))) TO (var_list (var_value (boolean_or_string_ (nonreservedword_or_sconst (sconst (anysconst 'warning'))))))))))) ; (stmt (droprolestmt DROP ROLE IF EXISTS (role_list (rolespec (nonreservedword (identifier regress_seclabel_user1)))))) ; (stmt (droprolestmt DROP ROLE IF EXISTS (role_list (rolespec (nonreservedword (identifier regress_seclabel_user2)))))) ; (stmt (variableresetstmt RESET (reset_rest (generic_reset (var_name (colid (identifier client_min_messages))))))) ; (stmt (createuserstmt CREATE USER (roleid (rolespec (nonreservedword (identifier regress_seclabel_user1)))) (with_ WITH) (optrolelist (createoptroleelem (alteroptroleelem (identifier CREATEROLE)))))) ; (stmt (createuserstmt CREATE USER (roleid (rolespec (nonreservedword (identifier regress_seclabel_user2)))) optrolelist)) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier seclabel_tbl1))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier seclabel_tbl2))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier x)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier y)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (viewstmt CREATE VIEW (qualified_name (colid (identifier seclabel_view1))) AS (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary SELECT (target_list_ (target_list (target_el *))) (from_clause FROM (from_list (table_ref (relation_expr (qualified_name (colid (identifier seclabel_tbl2)))))))))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier seclabel_four))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (numeric integer)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ SELECT 4 $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (unreserved_keyword sql))))))) ; (stmt (createdomainstmt CREATE DOMAIN (any_name (colid (identifier seclabel_domain))) (as_ AS) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier seclabel_tbl1)))) (alter_table_cmds (alter_table_cmd OWNER TO (rolespec (nonreservedword (identifier regress_seclabel_user1))))))) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier seclabel_tbl2)))) (alter_table_cmds (alter_table_cmd OWNER TO (rolespec (nonreservedword (identifier regress_seclabel_user2))))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_any_name TABLE) (any_name (colid (identifier seclabel_tbl1))) IS (security_label (sconst (anysconst 'classified'))))) ; (stmt (seclabelstmt SECURITY LABEL (provider_ FOR (nonreservedword_or_sconst (sconst (anysconst 'dummy')))) ON (object_type_any_name TABLE) (any_name (colid (identifier seclabel_tbl1))) IS (security_label (sconst (anysconst 'classified'))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_any_name TABLE) (any_name (colid (identifier seclabel_tbl1))) IS (security_label (sconst (anysconst '...invalid label...'))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_any_name TABLE) (any_name (colid (identifier seclabel_tbl3))) IS (security_label (sconst (anysconst 'unclassified'))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_name ROLE) (name (colid (identifier regress_seclabel_user1))) IS (security_label (sconst (anysconst 'classified'))))) ; (stmt (seclabelstmt SECURITY LABEL (provider_ FOR (nonreservedword_or_sconst (sconst (anysconst 'dummy')))) ON (object_type_name ROLE) (name (colid (identifier regress_seclabel_user1))) IS (security_label (sconst (anysconst 'classified'))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_name ROLE) (name (colid (identifier regress_seclabel_user1))) IS (security_label (sconst (anysconst '...invalid label...'))))) ; (stmt (seclabelstmt SECURITY LABEL ON (object_type_name ROLE) (name (colid (identifier regress_seclabel_user3))) IS (security_label (sconst (anysconst 'unclassified'))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier seclabel_four))) (func_args ( )))))) ; (stmt (dropstmt DROP DOMAIN (type_name_list (typename (simpletypename (generictype (type_function_name (identifier seclabel_domain)))) opt_array_bounds)))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) (any_name_list_ (any_name (colid (identifier seclabel_view1)))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) (any_name_list_ (any_name (colid (identifier seclabel_tbl1)))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) (any_name_list_ (any_name (colid (identifier seclabel_tbl2)))))) ; (stmt (droprolestmt DROP USER (role_list (rolespec (nonreservedword (identifier regress_seclabel_user1)))))) ; (stmt (droprolestmt DROP USER (role_list (rolespec (nonreservedword (identifier regress_seclabel_user2)))))) ;)) <EOF>)