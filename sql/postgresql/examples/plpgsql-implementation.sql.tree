(root (stmtblock (stmtmulti (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier stamp_user))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier id))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (unreserved_keyword comment))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier void)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \n    #variable_conflict use_variable\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = curtime, comment = comment\n          WHERE users.id = id;\n    END;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier stamp_user))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier id))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (unreserved_keyword comment))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier void)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \n    <<fn>>\n    DECLARE\n        curtime timestamp := now();\n    BEGIN\n        UPDATE users SET last_modified = fn.curtime, comment = stamp_user.comment\n          WHERE users.id = stamp_user.id;\n    END;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier logfunc1))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier logtxt))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier void)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \n    BEGIN\n        INSERT INTO logtable VALUES (logtxt, 'now');\n    END;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier logfunc2))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier logtxt))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier void)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \n    DECLARE\n        curtime timestamp;\n    BEGIN\n        curtime := 'now';\n        INSERT INTO logtable VALUES (logtxt, curtime);\n    END;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ;)) <EOF>)