(root (stmtblock (stmtmulti (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger))) on (colLabel (identifier ddl_command_start)) execute (function_or_procedure procedure) (func_name (type_function_name (identifier pg_backend_pid))) ( ))) ; (stmt (createfunctionstmt create function (func_name (type_function_name (identifier test_event_trigger))) (func_args_with_defaults ( )) returns (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$ \nBEGIN\n    RAISE NOTICE 'test_event_trigger: % %', tg_event, tg_tag;\nEND\n $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary SELECT (target_list_ (target_list (target_el (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (func_expr (func_application (func_name (type_function_name (identifier test_event_trigger))) ( )))))))))))))))))))))))))))))))))) ; (stmt (createfunctionstmt create function (func_name (type_function_name (identifier test_event_trigger_arg))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (unreserved_keyword name))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) returns (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$  BEGIN RETURN 1; END  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt create function (func_name (type_function_name (identifier test_event_trigger_sql))) (func_args_with_defaults ( )) returns (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$ \nSELECT 1  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (unreserved_keyword sql))))))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger))) on (colLabel (identifier elephant_bootstrap)) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger))) on (colLabel (identifier ddl_command_start)) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger_end))) on (colLabel (identifier ddl_command_end)) execute (function_or_procedure function) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier food)) in ( (event_trigger_value_list (sconst (anysconst 'sandwich'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'sandwich'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'create table')) , (sconst (anysconst 'create skunkcabbage'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'DROP EVENT TRIGGER'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'CREATE ROLE'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'CREATE DATABASE'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'CREATE TABLESPACE'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'create table'))) )) and (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'CREATE FUNCTION'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger2))) on (colLabel (identifier ddl_command_start)) when (event_trigger_when_list (event_trigger_when_item (colid (identifier tag)) in ( (event_trigger_value_list (sconst (anysconst 'create table')) , (sconst (anysconst 'CREATE FUNCTION'))) ))) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (commentstmt comment on (object_type_name (drop_type_name event trigger)) (name (colid (identifier regress_event_trigger))) is (comment_text (sconst (anysconst 'test comment'))))) ; (stmt (createrolestmt create role (roleid (rolespec (nonreservedword (identifier regress_evt_user)))) optrolelist)) ; (stmt (variablesetstmt set (set_rest (set_rest_more role (nonreservedword_or_sconst (nonreservedword (identifier regress_evt_user))))))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier regress_event_trigger_noperms))) on (colLabel (identifier ddl_command_start)) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_event_trigger))) ( ))) ; (stmt (variableresetstmt reset (reset_rest (generic_reset (var_name (colid (unreserved_keyword role))))))) ; (stmt (altereventtrigstmt alter event trigger (name (colid (identifier regress_event_trigger))) (enable_trigger disable))) ; (stmt (createstmt create table (qualified_name (colid (identifier event_trigger_fire1))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (altereventtrigstmt alter event trigger (name (colid (identifier regress_event_trigger))) (enable_trigger enable))) ; (stmt (variablesetstmt set (set_rest (set_rest_more (generic_set (var_name (colid (identifier session_replication_role))) = (var_list (var_value (boolean_or_string_ (nonreservedword_or_sconst (nonreservedword (unreserved_keyword replica))))))))))) ; (stmt (createstmt create table (qualified_name (colid (identifier event_trigger_fire2))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (altereventtrigstmt alter event trigger (name (colid (identifier regress_event_trigger))) (enable_trigger enable replica))) ; (stmt (createstmt create table (qualified_name (colid (identifier event_trigger_fire3))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (altereventtrigstmt alter event trigger (name (colid (identifier regress_event_trigger))) (enable_trigger enable always))) ; (stmt (createstmt create table (qualified_name (colid (identifier event_trigger_fire4))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (variableresetstmt reset (reset_rest (generic_reset (var_name (colid (identifier session_replication_role))))))) ; (stmt (createstmt create table (qualified_name (colid (identifier event_trigger_fire5))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (createfunctionstmt create function (func_name (type_function_name (identifier f1))) (func_args_with_defaults ( )) returns (func_return (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item as (func_as (sconst (anysconst $$ \nbegin\n  create table event_trigger_fire6 (a int);\n  return 0;\nend  $$))))))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary select (target_list_ (target_list (target_el (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (func_expr (func_application (func_name (type_function_name (identifier f1))) ( )))))))))))))))))))))))))))))))))) ; (stmt (createfunctionstmt create procedure (func_name (type_function_name (identifier p1))) (func_args_with_defaults ( )) (createfunc_opt_list (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item as (func_as (sconst (anysconst $$ \nbegin\n  create table event_trigger_fire7 (a int);\nend  $$))))))) ; (stmt (callstmt call (func_application (func_name (type_function_name (identifier p1))) ( )))) ; (stmt (altereventtrigstmt alter event trigger (name (colid (identifier regress_event_trigger))) (enable_trigger disable))) ; (stmt (dropstmt drop (object_type_any_name table) (any_name_list_ (any_name (colid (identifier event_trigger_fire2))) , (any_name (colid (identifier event_trigger_fire3))) , (any_name (colid (identifier event_trigger_fire4))) , (any_name (colid (identifier event_trigger_fire5))) , (any_name (colid (identifier event_trigger_fire6))) , (any_name (colid (identifier event_trigger_fire7)))))) ; (stmt (removefuncstmt drop routine (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier f1))) (func_args ( ))) , (function_with_argtypes (func_name (type_function_name (identifier p1))) (func_args ( )))))) ; (stmt (grantstmt grant (privileges all) on (privilege_target table (qualified_name_list (qualified_name (colid (identifier event_trigger_fire1))))) to (grantee_list (grantee (rolespec (nonreservedword (identifier public))))))) ; (stmt (commentstmt comment on (object_type_any_name table) (any_name (colid (identifier event_trigger_fire1))) is (comment_text (sconst (anysconst 'here is a comment'))))) ; (stmt (revokestmt revoke (privileges all) on (privilege_target table (qualified_name_list (qualified_name (colid (identifier event_trigger_fire1))))) from (grantee_list (grantee (rolespec (nonreservedword (identifier public))))))) ; (stmt (dropstmt drop (object_type_any_name table) (any_name_list_ (any_name (colid (identifier event_trigger_fire1)))))) ; (stmt (createfdwstmt create foreign data wrapper (name (colid (identifier useless))))) ; (stmt (createforeignserverstmt create server (name (colid (identifier useless_server))) foreign data wrapper (name (colid (identifier useless))))) ; (stmt (createusermappingstmt create user mapping for (auth_ident (rolespec (nonreservedword (identifier regress_evt_user)))) server (name (colid (identifier useless_server))))) ; (stmt (alterdefaultprivilegesstmt alter default privileges (defacloptionlist (defacloption for role (role_list (rolespec (nonreservedword (identifier regress_evt_user)))))) (defaclaction revoke (privileges (privilege_list (privilege (colid (unreserved_keyword delete))))) on (defacl_privilege_target tables) from (grantee_list (grantee (rolespec (nonreservedword (identifier regress_evt_user)))))))) ; (stmt (alterownerstmt alter event trigger (name (colid (identifier regress_event_trigger))) owner to (rolespec (nonreservedword (identifier regress_evt_user))))) ; (stmt (alterrolestmt alter role (rolespec (nonreservedword (identifier regress_evt_user))) (alteroptrolelist (alteroptroleelem (identifier superuser))))) ; (stmt (alterownerstmt alter event trigger (name (colid (identifier regress_event_trigger))) owner to (rolespec (nonreservedword (identifier regress_evt_user))))) ; (stmt (renamestmt alter event trigger (name (colid (identifier regress_event_trigger))) rename to (name (colid (identifier regress_event_trigger2))))) ; (stmt (renamestmt alter event trigger (name (colid (identifier regress_event_trigger))) rename to (name (colid (identifier regress_event_trigger3))))) ; (stmt (dropstmt drop (drop_type_name event trigger) (name_list (name (colid (identifier regress_event_trigger)))))) ; (stmt (droprolestmt drop role (role_list (rolespec (nonreservedword (identifier regress_evt_user)))))) ; (stmt (dropstmt drop (drop_type_name event trigger) if exists (name_list (name (colid (identifier regress_event_trigger2)))))) ; (stmt (dropstmt drop (drop_type_name event trigger) if exists (name_list (name (colid (identifier regress_event_trigger2)))))) ; (stmt (dropstmt drop (drop_type_name event trigger) (name_list (name (colid (identifier regress_event_trigger3)))))) ; (stmt (dropstmt drop (drop_type_name event trigger) (name_list (name (colid (identifier regress_event_trigger_end)))))) ; (stmt (createschemastmt CREATE SCHEMA (optschemaname (colid (identifier schema_one))) authorization (rolespec (nonreservedword (identifier regress_evt_user))) optschemaeltlist)) ; (stmt (createschemastmt CREATE SCHEMA (optschemaname (colid (identifier schema_two))) authorization (rolespec (nonreservedword (identifier regress_evt_user))) optschemaeltlist)) ; (stmt (createschemastmt CREATE SCHEMA (optschemaname (colid (identifier audit_tbls))) authorization (rolespec (nonreservedword (identifier regress_evt_user))) optschemaeltlist)) ; (stmt (createstmt CREATE (opttemp TEMP) TABLE (qualified_name (colid (identifier a_temp_tbl))) ( ))) ; (stmt (variablesetstmt SET (set_rest (set_rest_more SESSION AUTHORIZATION (nonreservedword_or_sconst (nonreservedword (identifier regress_evt_user))))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier schema_one)) (indirection (indirection_el . (attr_name (colLabel (identifier table_one)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier schema_one)) (indirection (indirection_el . (attr_name (colLabel (identifier "table two")))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier schema_one)) (indirection (indirection_el . (attr_name (colLabel (identifier table_three)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier audit_tbls)) (indirection (indirection_el . (attr_name (colLabel (identifier schema_one_table_two)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier the_value)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier schema_two)) (indirection (indirection_el . (attr_name (colLabel (identifier table_two)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier schema_two)) (indirection (indirection_el . (attr_name (colLabel (identifier table_three)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier audit_tbls)) (indirection (indirection_el . (attr_name (colLabel (identifier schema_two_table_three)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier the_value)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (colid (identifier schema_two)) (indirection (indirection_el . (attr_name (colLabel (unreserved_keyword add)))))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item (common_func_opt_item CALLED ON NULL INPUT)) (createfunc_opt_item AS (func_as (sconst (anysconst $$  BEGIN RETURN coalesce( $1,0) + coalesce( $2,0); END;  $$))))))) ; (stmt (definestmt CREATE AGGREGATE (func_name (colid (identifier schema_two)) (indirection (indirection_el . (attr_name (colLabel (identifier newton)))))) (old_aggr_definition ( (old_aggr_list (old_aggr_elem (identifier BASETYPE) = (def_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (old_aggr_elem (identifier SFUNC) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier schema_two)) (attrs . (attr_name (colLabel (unreserved_keyword add)))))) opt_array_bounds)))) , (old_aggr_elem (identifier STYPE) = (def_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )))) ; (stmt (variableresetstmt RESET (reset_rest SESSION AUTHORIZATION))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier undroppable_objs))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier object_type)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier object_identity)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (insertstmt INSERT INTO (insert_target (qualified_name (colid (identifier undroppable_objs)))) (insert_rest (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary (values_clause VALUES ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'table'))))))))))))))))))))))))) , (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'schema_one.table_three')))))))))))))))))))))))))) ) , ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'table'))))))))))))))))))))))))) , (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'audit_tbls.schema_two_table_three')))))))))))))))))))))))))) )))))))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier dropped_objects))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (unreserved_keyword type)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (unreserved_keyword schema)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (unreserved_keyword object)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier undroppable))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n\tobj record;\nBEGIN\n\tPERFORM 1 FROM pg_tables WHERE tablename = 'undroppable_objs';\n\tIF NOT FOUND THEN\n\t\tRAISE NOTICE 'table undroppable_objs not found, skipping';\n\t\tRETURN;\n\tEND IF;\n\tFOR obj IN\n\t\tSELECT * FROM pg_event_trigger_dropped_objects() JOIN\n\t\t\tundroppable_objs USING (object_type, object_identity)\n\tLOOP\n\t\tRAISE EXCEPTION 'object % of type % cannot be dropped',\n\t\t\tobj.object_identity, obj.object_type;\n\tEND LOOP;\nEND;\n $$))))))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier undroppable))) ON (colLabel (identifier sql_drop)) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier undroppable))) ( ))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier test_evtrig_dropped_objects))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n    obj record;\nBEGIN\n    FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()\n    LOOP\n        IF obj.object_type = 'table' THEN\n                EXECUTE format('DROP TABLE IF EXISTS audit_tbls.%I',\n\t\t\t\t\tformat('%s_%s', obj.schema_name, obj.object_name));\n        END IF;\n\n\tINSERT INTO dropped_objects\n\t\t(type, schema, object) VALUES\n\t\t(obj.object_type, obj.schema_name, obj.object_identity);\n    END LOOP;\nEND\n $$))))))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier regress_event_trigger_drop_objects))) ON (colLabel (identifier sql_drop)) WHEN (event_trigger_when_list (event_trigger_when_item (colid (identifier TAG)) IN ( (event_trigger_value_list (sconst (anysconst 'drop table')) , (sconst (anysconst 'drop function')) , (sconst (anysconst 'drop view')) , (sconst (anysconst 'drop owned')) , (sconst (anysconst 'drop schema')) , (sconst (anysconst 'alter table'))) ))) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier test_evtrig_dropped_objects))) ( ))) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier schema_one)) (indirection (indirection_el . (attr_name (colLabel (identifier table_one))))))) (alter_table_cmds (alter_table_cmd DROP (column_ COLUMN) (colid (identifier a)))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier schema_one))) , (name (colid (identifier schema_two)))) (drop_behavior_ CASCADE))) ; (stmt (deletestmt DELETE FROM (relation_expr_opt_alias (relation_expr (qualified_name (colid (identifier undroppable_objs))))) (where_or_current_clause WHERE (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (identifier object_identity)))))))))))))) = (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'audit_tbls.schema_two_table_three')))))))))))))))))))))))))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier schema_one))) , (name (colid (identifier schema_two)))) (drop_behavior_ CASCADE))) ; (stmt (deletestmt DELETE FROM (relation_expr_opt_alias (relation_expr (qualified_name (colid (identifier undroppable_objs))))) (where_or_current_clause WHERE (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (identifier object_identity)))))))))))))) = (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'schema_one.table_three')))))))))))))))))))))))))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier schema_one))) , (name (colid (identifier schema_two)))) (drop_behavior_ CASCADE))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary SELECT (target_list_ (target_list (target_el *))) (from_clause FROM (from_list (table_ref (relation_expr (qualified_name (colid (identifier dropped_objects))))))) (where_clause WHERE (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword schema))))))))))))))) IS NULL)))))) OR (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword schema)))))))))))))) <> (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'pg_toast')))))))))))))))))))))))))))))))) ; (stmt (dropownedstmt DROP OWNED BY (role_list (rolespec (nonreservedword (identifier regress_evt_user)))))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary SELECT (target_list_ (target_list (target_el *))) (from_clause FROM (from_list (table_ref (relation_expr (qualified_name (colid (identifier dropped_objects))))))) (where_clause WHERE (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword type)))))))))))))) = (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'schema')))))))))))))))))))))))))))))))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_evt_user)))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier regress_event_trigger_drop_objects)))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier undroppable)))))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier event_trigger_report_dropped))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE r record;\nBEGIN\n    FOR r IN SELECT * from pg_event_trigger_dropped_objects()\n    LOOP\n    IF NOT r.normal AND NOT r.original THEN\n        CONTINUE;\n    END IF;\n    RAISE NOTICE 'NORMAL: orig=% normal=% istemp=% type=% identity=% name=% args=%',\n        r.original, r.normal, r.is_temporary, r.object_type,\n        r.object_identity, r.address_names, r.address_args;\n    END LOOP;\nEND;  $$))))))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier regress_event_trigger_report_dropped))) ON (colLabel (identifier sql_drop)) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier event_trigger_report_dropped))) ( ))) ; (stmt (createschemastmt CREATE SCHEMA (colid (identifier evttrig)) (optschemaeltlist (schema_stmt (createstmt CREATE TABLE (qualified_name (colid (identifier one))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier col_a)) (typename (simpletypename (generictype (type_function_name (identifier SERIAL)))) opt_array_bounds) (colquallist (colconstraint (colconstraintelem PRIMARY KEY))))) , (tableelement (columnDef (colid (identifier col_b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) (colquallist (colconstraint (colconstraintelem DEFAULT (b_expr (c_expr (aexprconst (sconst (anysconst 'forty two')))))))))))) ))) (schema_stmt (indexstmt CREATE INDEX (index_name_ (name (colid (identifier one_idx)))) ON (relation_expr (qualified_name (colid (identifier one)))) ( (index_params (index_elem (colid (identifier col_b)) index_elem_options)) ))) (schema_stmt (createstmt CREATE TABLE (qualified_name (colid (identifier two))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier col_c)) (typename (simpletypename (numeric INTEGER)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem CHECK ( (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (identifier col_c)))))))))))))) > (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 0)))))))))))))))))))))))) ))) (colconstraint (colconstraintelem REFERENCES (qualified_name (colid (identifier one))))) (colconstraint (colconstraintelem DEFAULT (b_expr (c_expr (aexprconst (iconst 42))))))))))) )))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier parted)))))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier id)) (typename (simpletypename (numeric int)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem PRIMARY KEY))))))) ) (optpartitionspec (partitionspec PARTITION BY (colid (unreserved_keyword RANGE)) ( (part_params (part_elem (colid (identifier id)))) ))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_1_10)))))) PARTITION OF (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier parted)))))) (opttypedtableelementlist ( (typedtableelementlist (typedtableelement (columnOptions (colid (identifier id)) colquallist))) )) (partitionboundspec FOR VALUES FROM ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 1))))))))))))))))))))))))) ) TO ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 10))))))))))))))))))))))))) )))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_10_20)))))) PARTITION OF (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier parted)))))) (opttypedtableelementlist ( (typedtableelementlist (typedtableelement (columnOptions (colid (identifier id)) colquallist))) )) (partitionboundspec FOR VALUES FROM ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 10))))))))))))))))))))))))) ) TO ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 20))))))))))))))))))))))))) )) (optpartitionspec (partitionspec PARTITION BY (colid (unreserved_keyword RANGE)) ( (part_params (part_elem (colid (identifier id)))) ))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_10_15)))))) PARTITION OF (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_10_20)))))) (opttypedtableelementlist ( (typedtableelementlist (typedtableelement (columnOptions (colid (identifier id)) colquallist))) )) (partitionboundspec FOR VALUES FROM ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 10))))))))))))))))))))))))) ) TO ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 15))))))))))))))))))))))))) )))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_15_20)))))) PARTITION OF (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier part_10_20)))))) (opttypedtableelementlist ( (typedtableelementlist (typedtableelement (columnOptions (colid (identifier id)) colquallist))) )) (partitionboundspec FOR VALUES FROM ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 15))))))))))))))))))))))))) ) TO ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 20))))))))))))))))))))))))) )))) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier two))))))) (alter_table_cmds (alter_table_cmd DROP (column_ COLUMN) (colid (identifier col_c)))))) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier one))))))) (alter_table_cmds (alter_table_cmd ALTER (column_ COLUMN) (colid (identifier col_b)) (alter_column_default DROP DEFAULT))))) ; (stmt (altertablestmt ALTER TABLE (relation_expr (qualified_name (colid (identifier evttrig)) (indirection (indirection_el . (attr_name (colLabel (identifier one))))))) (alter_table_cmds (alter_table_cmd DROP CONSTRAINT (name (colid (identifier one_pkey))))))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) (any_name_list_ (any_name (colid (identifier evttrig)) (attrs . (attr_name (colLabel (identifier one_idx)))))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier evttrig)))) (drop_behavior_ CASCADE))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) (any_name_list_ (any_name (colid (identifier a_temp_tbl)))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier regress_event_trigger_report_dropped)))))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary select (target_list_ (target_list (target_el (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (func_expr (func_application (func_name (type_function_name (identifier pg_event_trigger_table_rewrite_oid))) ( )))))))))))))))))))))))))))))))))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier test_evtrig_no_rewrite))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n  RAISE EXCEPTION 'rewrites not allowed';\nEND;\n $$))))))) ; (stmt (createeventtrigstmt create event trigger (name (colid (identifier no_rewrite_allowed))) on (colLabel (identifier table_rewrite)) execute (function_or_procedure procedure) (func_name (type_function_name (identifier test_evtrig_no_rewrite))) ( ))) ; (stmt (createstmt create table (qualified_name (colid (identifier rewriteme))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier id)) (typename (simpletypename (generictype (type_function_name (identifier serial)))) opt_array_bounds) (colquallist (colconstraint (colconstraintelem primary key))))) , (tableelement (columnDef (colid (identifier foo)) (typename (simpletypename (numeric float)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier bar)) (typename (simpletypename (generictype (type_function_name (identifier timestamptz)))) opt_array_bounds) colquallist)))) ))) ; (stmt (insertstmt insert into (insert_target (qualified_name (colid (identifier rewriteme)))) (insert_rest (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary select (target_list_ (target_list (target_el (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (identifier x))))))))) * (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (fconst 1.001))))))))))))))))))))))))))) (from_clause from (from_list (table_ref (func_table (func_expr_windowless (func_application (func_name (type_function_name (identifier generate_series))) ( (func_arg_list (func_arg_expr (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 1))))))))))))))))))))))))) , (func_arg_expr (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 500)))))))))))))))))))))))))) )))) (func_alias_clause (alias_clause as (colid (identifier t)) ( (name_list (name (colid (identifier x)))) )))))))))))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd alter (column_ column) (colid (identifier foo)) type (typename (simpletypename (numeric numeric)) opt_array_bounds))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd add column (columnDef (colid (identifier baz)) (typename (simpletypename (numeric int)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem default (b_expr (c_expr (aexprconst (iconst 0)))))))))))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier test_evtrig_no_rewrite))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n  RAISE NOTICE 'Table ''%'' is being rewritten (reason = %)',\n               pg_event_trigger_table_rewrite_oid()::regclass,\n               pg_event_trigger_table_rewrite_reason();\nEND;\n $$))))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd add column (columnDef (colid (identifier onemore)) (typename (simpletypename (numeric int)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem default (b_expr (c_expr (aexprconst (iconst 0))))))))) , (alter_table_cmd add column (columnDef (colid (identifier another)) (typename (simpletypename (numeric int)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem default (b_expr - (b_expr (c_expr (aexprconst (iconst 1)))))))))) , (alter_table_cmd alter (column_ column) (colid (identifier foo)) type (typename (simpletypename (numeric numeric (type_modifiers_ ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 10)))))))))))))))))))))))) , (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 4))))))))))))))))))))))))) )))) opt_array_bounds))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd alter (column_ column) (colid (identifier foo)) type (typename (simpletypename (numeric numeric (type_modifiers_ ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 12)))))))))))))))))))))))) , (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 4))))))))))))))))))))))))) )))) opt_array_bounds))))) ; (stmt (transactionstmt begin)) ; (stmt (variablesetstmt set (set_rest (set_rest_more (generic_set (var_name (colid (identifier timezone))) to (var_list (var_value (boolean_or_string_ (nonreservedword_or_sconst (sconst (anysconst 'UTC'))))))))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd alter (column_ column) (colid (identifier bar)) type (typename (simpletypename (constdatetime timestamp)) opt_array_bounds))))) ; (stmt (variablesetstmt set (set_rest (set_rest_more (generic_set (var_name (colid (identifier timezone))) to (var_list (var_value (boolean_or_string_ (nonreservedword_or_sconst (sconst (anysconst '0'))))))))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd alter (column_ column) (colid (identifier bar)) type (typename (simpletypename (generictype (type_function_name (identifier timestamptz)))) opt_array_bounds))))) ; (stmt (variablesetstmt set (set_rest (set_rest_more (generic_set (var_name (colid (identifier timezone))) to (var_list (var_value (boolean_or_string_ (nonreservedword_or_sconst (sconst (anysconst 'Europe/London'))))))))))) ; (stmt (altertablestmt alter table (relation_expr (qualified_name (colid (identifier rewriteme)))) (alter_table_cmds (alter_table_cmd alter (column_ column) (colid (identifier bar)) type (typename (simpletypename (constdatetime timestamp)) opt_array_bounds))))) ; (stmt (transactionstmt rollback)) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier test_evtrig_no_rewrite))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql)))) (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n  RAISE NOTICE 'Table is being rewritten (reason = %)',\n               pg_event_trigger_table_rewrite_reason();\nEND;\n $$))))))) ; (stmt (definestmt create type (any_name (colid (identifier rewritetype))) as ( (opttablefuncelementlist (tablefuncelementlist (tablefuncelement (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds)))) ))) ; (stmt (createstmt create table (qualified_name (colid (identifier rewritemetoo1))) of (any_name (colid (identifier rewritetype))))) ; (stmt (createstmt create table (qualified_name (colid (identifier rewritemetoo2))) of (any_name (colid (identifier rewritetype))))) ; (stmt (altercompositetypestmt alter type (any_name (colid (identifier rewritetype))) (alter_type_cmds (alter_type_cmd alter attribute (colid (identifier a)) type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) (drop_behavior_ cascade))))) ; (stmt (createstmt create table (qualified_name (colid (identifier rewritemetoo3))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (generictype (type_function_name (identifier rewritetype)))) opt_array_bounds) colquallist)))) ))) ; (stmt (altercompositetypestmt alter type (any_name (colid (identifier rewritetype))) (alter_type_cmds (alter_type_cmd alter attribute (colid (identifier a)) type (typename (simpletypename (character (character_c varchar))) opt_array_bounds) (drop_behavior_ cascade))))) ; (stmt (dropstmt drop (object_type_any_name table) (any_name_list_ (any_name (colid (identifier rewriteme)))))) ; (stmt (dropstmt drop (drop_type_name event trigger) (name_list (name (colid (identifier no_rewrite_allowed)))))) ; (stmt (removefuncstmt drop function (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_evtrig_no_rewrite))) (func_args ( )))))) ; (stmt (variableresetstmt RESET (reset_rest SESSION AUTHORIZATION))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier event_trigger_test))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric integer)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier start_command))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\nRAISE NOTICE '% - ddl_command_start', tg_tag;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier end_command))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\nRAISE NOTICE '% - ddl_command_end', tg_tag;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE (or_replace_ OR REPLACE) FUNCTION (func_name (type_function_name (identifier drop_sql_command))) (func_args_with_defaults ( )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier event_trigger)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\nRAISE NOTICE '% - sql_drop', tg_tag;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier start_rls_command))) ON (colLabel (identifier ddl_command_start)) WHEN (event_trigger_when_list (event_trigger_when_item (colid (identifier TAG)) IN ( (event_trigger_value_list (sconst (anysconst 'CREATE POLICY')) , (sconst (anysconst 'ALTER POLICY')) , (sconst (anysconst 'DROP POLICY'))) ))) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier start_command))) ( ))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier end_rls_command))) ON (colLabel (identifier ddl_command_end)) WHEN (event_trigger_when_list (event_trigger_when_item (colid (identifier TAG)) IN ( (event_trigger_value_list (sconst (anysconst 'CREATE POLICY')) , (sconst (anysconst 'ALTER POLICY')) , (sconst (anysconst 'DROP POLICY'))) ))) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier end_command))) ( ))) ; (stmt (createeventtrigstmt CREATE EVENT TRIGGER (name (colid (identifier sql_drop_command))) ON (colLabel (identifier sql_drop)) WHEN (event_trigger_when_list (event_trigger_when_item (colid (identifier TAG)) IN ( (event_trigger_value_list (sconst (anysconst 'DROP POLICY'))) ))) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier drop_sql_command))) ( ))) ; (stmt (createpolicystmt CREATE POLICY (name (colid (identifier p1))) ON (qualified_name (colid (identifier event_trigger_test))) (rowsecurityoptionalexpr USING ( (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst FALSE))))))))))))))))))))))) )))) ; (stmt (alterpolicystmt ALTER POLICY (name (colid (identifier p1))) ON (qualified_name (colid (identifier event_trigger_test))) (rowsecurityoptionalexpr USING ( (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst TRUE))))))))))))))))))))))) )))) ; (stmt (renamestmt ALTER POLICY (name (colid (identifier p1))) ON (qualified_name (colid (identifier event_trigger_test))) RENAME TO (name (colid (identifier p2))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name POLICY) (name (colid (identifier p2))) ON (any_name (colid (identifier event_trigger_test))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier start_rls_command)))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier end_rls_command)))))) ; (stmt (dropstmt DROP (drop_type_name EVENT TRIGGER) (name_list (name (colid (identifier sql_drop_command)))))) ;)) <EOF>)