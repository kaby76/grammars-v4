(root (stmtblock (stmtmulti (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier sales_tax))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier subtotal))) (func_type (typename (simpletypename (numeric real)) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric real)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier sales_tax))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric real)) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric real)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n    subtotal ALIAS FOR  $1;\nBEGIN\n    RETURN subtotal * 0.06;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier instr))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (character (character_c varchar))) opt_array_bounds)))) , (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric integer)) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric integer)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n    v_string ALIAS FOR  $1;\n    index ALIAS FOR  $2;\nBEGIN\n    -- some computations using v_string and index here\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier concat_selected_fields))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier in_t))) (func_type (typename (simpletypename (generictype (type_function_name (identifier sometablename)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    RETURN in_t.f1 || in_t.f3 || in_t.f5 || in_t.f7;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier sales_tax))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier subtotal))) (func_type (typename (simpletypename (numeric real)) opt_array_bounds)))) , (func_arg_with_default (func_arg (arg_class OUT) (param_name (type_function_name (identifier tax))) (func_type (typename (simpletypename (numeric real)) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    tax := subtotal * 0.06;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier sum_n_product))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier x))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier y))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (arg_class OUT) (param_name (type_function_name (identifier sum))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) , (func_arg_with_default (func_arg (arg_class OUT) (param_name (type_function_name (identifier prod))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    sum := x + y;\n    prod := x * y;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier extended_sales))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier p_itemno))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )) RETURNS TABLE ( (table_func_column_list (table_func_column (param_name (type_function_name (identifier quantity))) (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) , (table_func_column (param_name (type_function_name (identifier total))) (func_type (typename (simpletypename (numeric numeric)) opt_array_bounds)))) ) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    RETURN QUERY SELECT s.quantity, s.quantity * s.price FROM sales AS s\n                 WHERE s.itemno = p_itemno;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier add_three_values))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier v1))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v2))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v3))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n    result ALIAS FOR  $0;\nBEGIN\n    result := v1 + v2 + v3;\n    RETURN result;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier add_three_values))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier v1))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v2))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v3))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (arg_class OUT) (param_name (type_function_name (identifier sum))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    sum := v1 + v2 + v3;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier add_three_values))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier v1))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v2))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier v3))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (arg_class OUT) (param_name (type_function_name (identifier sum))) (func_type (typename (simpletypename (generictype (type_function_name (identifier anyelement)))) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    sum := v1 + v2 + v3;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier less_than))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier a))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier b))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric boolean)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    RETURN a < b;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier less_than))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier a))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier b))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric boolean)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nDECLARE\n    local_a text := a;\n    local_b text := b;\nBEGIN\n    RETURN local_a < local_b;\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier less_than_c))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (param_name (type_function_name (identifier a))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) , (func_arg_with_default (func_arg (param_name (type_function_name (identifier b))) (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) RETURNS (func_return (func_type (typename (simpletypename (numeric boolean)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item AS (func_as (sconst (anysconst $$ \nBEGIN\n    RETURN a < b COLLATE "C";\nEND;\n $$)))) (createfunc_opt_item LANGUAGE (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ;)) <EOF>)