(root (stmtblock (stmtmulti (stmt (createrolestmt CREATE ROLE (roleid (rolespec (nonreservedword (identifier regress_subscription_user)))) (optrolelist (createoptroleelem (alteroptroleelem (identifier LOGIN))) (createoptroleelem (alteroptroleelem (identifier SUPERUSER)))))) ; (stmt (createrolestmt CREATE ROLE (roleid (rolespec (nonreservedword (identifier regress_subscription_user2)))) optrolelist)) ; (stmt (createrolestmt CREATE ROLE (roleid (rolespec (nonreservedword (identifier regress_subscription_user_dummy)))) (optrolelist (createoptroleelem (alteroptroleelem (identifier LOGIN))) (createoptroleelem (alteroptroleelem (identifier NOSUPERUSER)))))) ; (stmt (variablesetstmt SET (set_rest (set_rest_more SESSION AUTHORIZATION (nonreservedword_or_sconst (sconst (anysconst 'regress_subscription_user'))))))) ; (stmt (transactionstmt BEGIN)) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'testconn')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier create_slot)))) ))))) ; (stmt (transactionstmt COMMIT)) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'testconn')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier foo))) , (publication_name_item (colLabel (identifier testpub))) , (publication_name_item (colLabel (identifier foo)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (commentstmt COMMENT ON (object_type_name SUBSCRIPTION) (name (colid (identifier regress_testsub))) IS (comment_text (sconst (anysconst 'test subscription'))))) ; (stmt (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary SELECT (target_list_ (target_list (target_el (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (func_expr (func_application (func_name (type_function_name (identifier obj_description))) ( (func_arg_list (func_arg_expr (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (identifier s)) (indirection (indirection_el . (attr_name (colLabel (identifier oid))))))))))))))))))))))))))))) , (func_arg_expr (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (sconst (anysconst 'pg_subscription'))))))))))))))))))))))))))) )))))))))))))))))))))))))))) (from_clause FROM (from_list (table_ref (relation_expr (qualified_name (colid (identifier pg_subscription)))) (alias_clause (colid (identifier s)))))))))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (variablesetstmt SET (set_rest (set_rest_more SESSION AUTHORIZATION (nonreservedword_or_sconst (sconst (anysconst 'regress_subscription_user2'))))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier foo)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (variablesetstmt SET (set_rest (set_rest_more SESSION AUTHORIZATION (nonreservedword_or_sconst (sconst (anysconst 'regress_subscription_user'))))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false))) , (def_elem (colLabel (identifier copy_data)) = (def_arg (reserved_keyword true)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false))) , (def_elem (colLabel (identifier enabled)) = (def_arg (reserved_keyword true)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false))) , (def_elem (colLabel (identifier create_slot)) = (def_arg (reserved_keyword true)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE)) , (def_elem (colLabel (identifier enabled)) = (def_arg (reserved_keyword true)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE)) , (def_elem (colLabel (identifier create_slot)) = (def_arg (reserved_keyword true)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE)) , (def_elem (colLabel (identifier enabled)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub2))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE)) , (def_elem (colLabel (identifier create_slot)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub3))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE)) , (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub3))) ENABLE)) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub3))) REFRESH PUBLICATION)) ; (stmt (dropsubscriptionstmt DROP SUBSCRIPTION (name (colid (identifier regress_testsub3))))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'foobar')))) ; \dRs+\n\n (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub2))) , (publication_name_item (colLabel (identifier testpub3)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (unreserved_keyword refresh)) = (def_arg (reserved_keyword false)))) ))))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist2')))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg (sconst (anysconst 'newname'))))) )))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_doesnotexist))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist2')))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET (definition ( (def_list (def_elem (colLabel (identifier create_slot)) = (def_arg (reserved_keyword false)))) )))) ; \dRs+\n\n (stmt (transactionstmt BEGIN)) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) ENABLE)) ; \dRs\n\n (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) DISABLE)) ; \dRs\n\n (stmt (transactionstmt COMMIT)) ; (stmt (variablesetstmt SET (set_rest (set_rest_more ROLE (nonreservedword_or_sconst (nonreservedword (identifier regress_subscription_user_dummy))))))) ; (stmt (renamestmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) RENAME TO (name (colid (identifier regress_testsub_dummy))))) ; (stmt (variableresetstmt RESET (reset_rest (generic_reset (var_name (colid (unreserved_keyword ROLE))))))) ; (stmt (renamestmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) RENAME TO (name (colid (identifier regress_testsub_foo))))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub_foo))) SET (definition ( (def_list (def_elem (colLabel (identifier synchronous_commit)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword local)))) opt_array_bounds))))) )))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub_foo))) SET (definition ( (def_list (def_elem (colLabel (identifier synchronous_commit)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier foobar)))) opt_array_bounds))))) )))) ; \dRs+\n\n (stmt (renamestmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub_foo))) RENAME TO (name (colid (identifier regress_testsub))))) ; (stmt (alterownerstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) OWNER TO (rolespec (nonreservedword (identifier regress_subscription_user2))))) ; (stmt (alterrolestmt ALTER ROLE (rolespec (nonreservedword (identifier regress_subscription_user2))) (alteroptrolelist (alteroptroleelem (identifier SUPERUSER))))) ; (stmt (alterownerstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) OWNER TO (rolespec (nonreservedword (identifier regress_subscription_user2))))) ; (stmt (transactionstmt BEGIN)) ; (stmt (dropsubscriptionstmt DROP SUBSCRIPTION (name (colid (identifier regress_testsub))))) ; (stmt (transactionstmt COMMIT)) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE))) )))) ; (stmt (transactionstmt BEGIN)) ; (stmt (dropsubscriptionstmt DROP SUBSCRIPTION (name (colid (identifier regress_testsub))))) ; (stmt (transactionstmt COMMIT)) ; (stmt (dropsubscriptionstmt DROP SUBSCRIPTION IF EXISTS (name (colid (identifier regress_testsub))))) ; (stmt (dropsubscriptionstmt DROP SUBSCRIPTION (name (colid (identifier regress_testsub))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false))) , (def_elem (colLabel (type_func_name_keyword binary)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier foo)))) opt_array_bounds))))) ))))) ; (stmt (createsubscriptionstmt CREATE SUBSCRIPTION (name (colid (identifier regress_testsub))) CONNECTION (sconst (anysconst 'dbname=regress_doesnotexist')) PUBLICATION (publication_name_list (publication_name_item (colLabel (identifier testpub)))) (definition_ WITH (definition ( (def_list (def_elem (colLabel (identifier connect)) = (def_arg (reserved_keyword false))) , (def_elem (colLabel (type_func_name_keyword binary)) = (def_arg (reserved_keyword true)))) ))))) ; \dRs+\n\n (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET (definition ( (def_list (def_elem (colLabel (type_func_name_keyword binary)) = (def_arg (reserved_keyword false)))) )))) ; (stmt (altersubscriptionstmt ALTER SUBSCRIPTION (name (colid (identifier regress_testsub))) SET (definition ( (def_list (def_elem (colLabel (identifier slot_name)) = (def_arg NONE))) )))) ; \dRs+\n\n (stmt (dropsubscriptionstmt DROP SUBSCRIPTION (name (colid (identifier regress_testsub))))) ; (stmt (variableresetstmt RESET (reset_rest SESSION AUTHORIZATION))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_subscription_user)))))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_subscription_user2)))))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_subscription_user_dummy)))))) ;)) <EOF>)