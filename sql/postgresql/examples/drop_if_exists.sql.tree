(root (stmtblock (stmtmulti (stmt (dropstmt DROP (object_type_any_name TABLE) (any_name_list_ (any_name (colid (identifier test_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) IF EXISTS (any_name_list_ (any_name (colid (identifier test_exists)))))) ; (stmt (createstmt CREATE TABLE (qualified_name (colid (identifier test_exists))) ( (opttableelementlist (tableelementlist (tableelement (columnDef (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds) colquallist)) , (tableelement (columnDef (colid (identifier b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) colquallist)))) ))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) (any_name_list_ (any_name (colid (identifier test_view_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) IF EXISTS (any_name_list_ (any_name (colid (identifier test_view_exists)))))) ; (stmt (viewstmt CREATE VIEW (qualified_name (colid (identifier test_view_exists))) AS (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary select (target_list_ (target_list (target_el *))) (from_clause from (from_list (table_ref (relation_expr (qualified_name (colid (identifier test_exists)))))))))))))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) IF EXISTS (any_name_list_ (any_name (colid (identifier test_view_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) (any_name_list_ (any_name (colid (identifier test_view_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) (any_name_list_ (any_name (colid (identifier test_index_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) IF EXISTS (any_name_list_ (any_name (colid (identifier test_index_exists)))))) ; (stmt (indexstmt CREATE INDEX (index_name_ (name (colid (identifier test_index_exists)))) on (relation_expr (qualified_name (colid (identifier test_exists)))) ( (index_params (index_elem (colid (identifier a)) index_elem_options)) ))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) IF EXISTS (any_name_list_ (any_name (colid (identifier test_index_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) (any_name_list_ (any_name (colid (identifier test_index_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name SEQUENCE) (any_name_list_ (any_name (colid (identifier test_sequence_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name SEQUENCE) IF EXISTS (any_name_list_ (any_name (colid (identifier test_sequence_exists)))))) ; (stmt (createseqstmt CREATE SEQUENCE (qualified_name (colid (identifier test_sequence_exists))))) ; (stmt (dropstmt DROP (object_type_any_name SEQUENCE) IF EXISTS (any_name_list_ (any_name (colid (identifier test_sequence_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name SEQUENCE) (any_name_list_ (any_name (colid (identifier test_sequence_exists)))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier test_schema_exists)))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) IF EXISTS (name_list (name (colid (identifier test_schema_exists)))))) ; (stmt (createschemastmt CREATE SCHEMA (colid (identifier test_schema_exists)) optschemaeltlist)) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) IF EXISTS (name_list (name (colid (identifier test_schema_exists)))))) ; (stmt (dropstmt DROP (drop_type_name SCHEMA) (name_list (name (colid (identifier test_schema_exists)))))) ; (stmt (dropstmt DROP TYPE (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_type_exists)))) opt_array_bounds)))) ; (stmt (dropstmt DROP TYPE IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_type_exists)))) opt_array_bounds)))) ; (stmt (definestmt CREATE type (any_name (colid (identifier test_type_exists))) as ( (opttablefuncelementlist (tablefuncelementlist (tablefuncelement (colid (identifier a)) (typename (simpletypename (numeric int)) opt_array_bounds)) , (tablefuncelement (colid (identifier b)) (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) ))) ; (stmt (dropstmt DROP TYPE IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_type_exists)))) opt_array_bounds)))) ; (stmt (dropstmt DROP TYPE (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_type_exists)))) opt_array_bounds)))) ; (stmt (dropstmt DROP DOMAIN (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_domain_exists)))) opt_array_bounds)))) ; (stmt (dropstmt DROP DOMAIN IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_domain_exists)))) opt_array_bounds)))) ; (stmt (createdomainstmt CREATE domain (any_name (colid (identifier test_domain_exists))) (as_ as) (typename (simpletypename (numeric int)) opt_array_bounds) (colquallist (colconstraint (colconstraintelem not null)) (colconstraint (colconstraintelem check ( (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword value)))))))))))))) > (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (aexprconst (iconst 0)))))))))))))))))))))))) )))))) ; (stmt (dropstmt DROP DOMAIN IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_domain_exists)))) opt_array_bounds)))) ; (stmt (dropstmt DROP DOMAIN (type_name_list (typename (simpletypename (generictype (type_function_name (identifier test_domain_exists)))) opt_array_bounds)))) ; (stmt (createuserstmt CREATE USER (roleid (rolespec (nonreservedword (identifier regress_test_u1)))) optrolelist)) ; (stmt (createrolestmt CREATE ROLE (roleid (rolespec (nonreservedword (identifier regress_test_r1)))) optrolelist)) ; (stmt (creategroupstmt CREATE GROUP (roleid (rolespec (nonreservedword (identifier regress_test_g1)))) optrolelist)) ; (stmt (droprolestmt DROP USER (role_list (rolespec (nonreservedword (identifier regress_test_u2)))))) ; (stmt (droprolestmt DROP USER IF EXISTS (role_list (rolespec (nonreservedword (identifier regress_test_u1))) , (rolespec (nonreservedword (identifier regress_test_u2)))))) ; (stmt (droprolestmt DROP USER (role_list (rolespec (nonreservedword (identifier regress_test_u1)))))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_test_r2)))))) ; (stmt (droprolestmt DROP ROLE IF EXISTS (role_list (rolespec (nonreservedword (identifier regress_test_r1))) , (rolespec (nonreservedword (identifier regress_test_r2)))))) ; (stmt (droprolestmt DROP ROLE (role_list (rolespec (nonreservedword (identifier regress_test_r1)))))) ; (stmt (droprolestmt DROP GROUP (role_list (rolespec (nonreservedword (identifier regress_test_g2)))))) ; (stmt (droprolestmt DROP GROUP IF EXISTS (role_list (rolespec (nonreservedword (identifier regress_test_g1))) , (rolespec (nonreservedword (identifier regress_test_g2)))))) ; (stmt (droprolestmt DROP GROUP (role_list (rolespec (nonreservedword (identifier regress_test_g1)))))) ; (stmt (dropstmt DROP (object_type_any_name COLLATION) IF EXISTS (any_name_list_ (any_name (colid (identifier test_collation_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name CONVERSION) (any_name_list_ (any_name (colid (identifier test_conversion_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name CONVERSION) IF EXISTS (any_name_list_ (any_name (colid (identifier test_conversion_exists)))))) ; (stmt (createconversionstmt CREATE CONVERSION (any_name (colid (identifier test_conversion_exists))) FOR (sconst (anysconst 'LATIN1')) TO (sconst (anysconst 'UTF8')) FROM (any_name (colid (identifier iso8859_1_to_utf8))))) ; (stmt (dropstmt DROP (object_type_any_name CONVERSION) (any_name_list_ (any_name (colid (identifier test_conversion_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH PARSER) (any_name_list_ (any_name (colid (identifier test_tsparser_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH PARSER) IF EXISTS (any_name_list_ (any_name (colid (identifier test_tsparser_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH DICTIONARY) (any_name_list_ (any_name (colid (identifier test_tsdict_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH DICTIONARY) IF EXISTS (any_name_list_ (any_name (colid (identifier test_tsdict_exists)))))) ; (stmt (definestmt CREATE TEXT SEARCH DICTIONARY (any_name (colid (identifier test_tsdict_exists))) (definition ( (def_list (def_elem (colLabel (unreserved_keyword Template)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier ispell)))) opt_array_bounds)))) , (def_elem (colLabel (identifier DictFile)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier ispell_sample)))) opt_array_bounds)))) , (def_elem (colLabel (identifier AffFile)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier ispell_sample)))) opt_array_bounds))))) )))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH DICTIONARY) (any_name_list_ (any_name (colid (identifier test_tsdict_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH TEMPLATE) (any_name_list_ (any_name (colid (identifier test_tstemplate_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH TEMPLATE) IF EXISTS (any_name_list_ (any_name (colid (identifier test_tstemplate_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH CONFIGURATION) (any_name_list_ (any_name (colid (identifier test_tsconfig_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH CONFIGURATION) IF EXISTS (any_name_list_ (any_name (colid (identifier test_tsconfig_exists)))))) ; (stmt (definestmt CREATE TEXT SEARCH CONFIGURATION (any_name (colid (identifier test_tsconfig_exists))) (definition ( (def_list (def_elem (colLabel (unreserved_keyword COPY)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier english)))) opt_array_bounds))))) )))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH CONFIGURATION) (any_name_list_ (any_name (colid (identifier test_tsconfig_exists)))))) ; (stmt (dropstmt DROP (drop_type_name EXTENSION) (name_list (name (colid (identifier test_extension_exists)))))) ; (stmt (dropstmt DROP (drop_type_name EXTENSION) IF EXISTS (name_list (name (colid (identifier test_extension_exists)))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_function_exists))) (func_args ( )))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_function_exists))) (func_args ( )))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_function_exists))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) , (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))) , (func_arg (func_type (typename (simpletypename (numeric int)) (opt_array_bounds [ ]))))) )))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_function_exists))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) , (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))) , (func_arg (func_type (typename (simpletypename (numeric int)) (opt_array_bounds [ ]))))) )))))) ; (stmt (removeaggrstmt DROP AGGREGATE (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier test_aggregate_exists))) (aggr_args ( * )))))) ; (stmt (removeaggrstmt DROP AGGREGATE IF EXISTS (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier test_aggregate_exists))) (aggr_args ( * )))))) ; (stmt (removeaggrstmt DROP AGGREGATE (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier test_aggregate_exists))) (aggr_args ( (aggr_args_list (aggr_arg (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )))))) ; (stmt (removeaggrstmt DROP AGGREGATE IF EXISTS (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier test_aggregate_exists))) (aggr_args ( (aggr_args_list (aggr_arg (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )))))) ; (stmt (removeoperstmt DROP OPERATOR (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op @#@)) (oper_argtypes ( (typename (simpletypename (numeric int)) opt_array_bounds) , (typename (simpletypename (numeric int)) opt_array_bounds) )))))) ; (stmt (removeoperstmt DROP OPERATOR IF EXISTS (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op @#@)) (oper_argtypes ( (typename (simpletypename (numeric int)) opt_array_bounds) , (typename (simpletypename (numeric int)) opt_array_bounds) )))))) ; (stmt (definestmt CREATE OPERATOR (any_operator (all_op @#@)) (definition ( (def_list (def_elem (colLabel (identifier leftarg)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier int8)))) opt_array_bounds)))) , (def_elem (colLabel (identifier rightarg)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier int8)))) opt_array_bounds)))) , (def_elem (colLabel (unreserved_keyword procedure)) = (def_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier int8xor)))) opt_array_bounds))))) )))) ; (stmt (removeoperstmt DROP OPERATOR (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op @#@)) (oper_argtypes ( (typename (simpletypename (generictype (type_function_name (identifier int8)))) opt_array_bounds) , (typename (simpletypename (generictype (type_function_name (identifier int8)))) opt_array_bounds) )))))) ; (stmt (dropstmt DROP (drop_type_name LANGUAGE) (name_list (name (colid (identifier test_language_exists)))))) ; (stmt (dropstmt DROP (drop_type_name LANGUAGE) IF EXISTS (name_list (name (colid (identifier test_language_exists)))))) ; (stmt (dropcaststmt DROP CAST ( (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) AS (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) ))) ; (stmt (dropcaststmt DROP CAST (if_exists_ IF EXISTS) ( (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) AS (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds) ))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) IF EXISTS (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier no_such_table))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) IF EXISTS (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier no_such_table))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_table))))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) IF EXISTS (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_table))))))) ; (stmt (createtrigstmt CREATE TRIGGER (name (colid (identifier test_trigger_exists))) (triggeractiontime BEFORE) (triggerevents (triggeroneevent UPDATE)) ON (qualified_name (colid (identifier test_exists))) (triggerforspec FOR (triggerforopteach EACH) (triggerfortype ROW)) EXECUTE (function_or_procedure PROCEDURE) (func_name (type_function_name (identifier suppress_redundant_updates_trigger))) ( triggerfuncargs ))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) (name (colid (identifier test_trigger_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) IF EXISTS (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier no_such_table))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) IF EXISTS (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier no_such_table))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_table))))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) IF EXISTS (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_table))))))) ; (stmt (rulestmt CREATE RULE (name (colid (identifier test_rule_exists))) AS ON (event INSERT) TO (qualified_name (colid (identifier test_exists))) DO (instead_ INSTEAD) (ruleactionlist (ruleactionstmt (insertstmt INSERT INTO (insert_target (qualified_name (colid (identifier test_exists)))) (insert_rest (selectstmt (select_no_parens (select_clause (simple_select_intersect (simple_select_pramary (values_clause VALUES ( (expr_list (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword NEW)) (indirection (indirection_el . (attr_name (colLabel (identifier a)))))))))))))))))))))))))))) , (a_expr (a_expr_qual (a_expr_lessless (a_expr_or (a_expr_and (a_expr_between (a_expr_in (a_expr_unary_not (a_expr_isnull (a_expr_is_not (a_expr_compare (a_expr_like (a_expr_qual_op (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword NEW)) (indirection (indirection_el . (attr_name (colLabel (identifier b))))))))))))))) (qual_op ||) (a_expr_unary_qualop (a_expr_add (a_expr_mul (a_expr_caret (a_expr_unary_sign (a_expr_at_time_zone (a_expr_collate (a_expr_typecast (c_expr (columnref (colid (unreserved_keyword NEW)) (indirection (indirection_el . (attr_name (colLabel (identifier a))))))) :: (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))))))))))))))))))))) ))))))))))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) (name (colid (identifier test_rule_exists))) ON (any_name (colid (identifier test_exists))))) ; (stmt (dropstmt DROP (drop_type_name FOREIGN DATA WRAPPER) (name_list (name (colid (identifier test_fdw_exists)))))) ; (stmt (dropstmt DROP (drop_type_name FOREIGN DATA WRAPPER) IF EXISTS (name_list (name (colid (identifier test_fdw_exists)))))) ; (stmt (dropstmt DROP (drop_type_name SERVER) (name_list (name (colid (identifier test_server_exists)))))) ; (stmt (dropstmt DROP (drop_type_name SERVER) IF EXISTS (name_list (name (colid (identifier test_server_exists)))))) ; (stmt (dropopclassstmt DROP OPERATOR CLASS (any_name (colid (identifier test_operator_class))) USING (name (colid (identifier btree))))) ; (stmt (dropopclassstmt DROP OPERATOR CLASS IF EXISTS (any_name (colid (identifier test_operator_class))) USING (name (colid (identifier btree))))) ; (stmt (dropopclassstmt DROP OPERATOR CLASS (any_name (colid (identifier test_operator_class))) USING (name (colid (identifier no_such_am))))) ; (stmt (dropopclassstmt DROP OPERATOR CLASS IF EXISTS (any_name (colid (identifier test_operator_class))) USING (name (colid (identifier no_such_am))))) ; (stmt (dropopfamilystmt DROP OPERATOR FAMILY (any_name (colid (identifier test_operator_family))) USING (name (colid (identifier btree))))) ; (stmt (dropopfamilystmt DROP OPERATOR FAMILY IF EXISTS (any_name (colid (identifier test_operator_family))) USING (name (colid (identifier btree))))) ; (stmt (dropopfamilystmt DROP OPERATOR FAMILY (any_name (colid (identifier test_operator_family))) USING (name (colid (identifier no_such_am))))) ; (stmt (dropopfamilystmt DROP OPERATOR FAMILY IF EXISTS (any_name (colid (identifier test_operator_family))) USING (name (colid (identifier no_such_am))))) ; (stmt (dropstmt DROP (drop_type_name ACCESS METHOD) (name_list (name (colid (identifier no_such_am)))))) ; (stmt (dropstmt DROP (drop_type_name ACCESS METHOD) IF EXISTS (name_list (name (colid (identifier no_such_am)))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) IF EXISTS (any_name_list_ (any_name (colid (identifier test_exists)))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) (any_name_list_ (any_name (colid (identifier test_exists)))))) ; (stmt (removeaggrstmt DROP AGGREGATE IF EXISTS (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (colid (identifier no_such_schema)) (indirection (indirection_el . (attr_name (colLabel (identifier foo)))))) (aggr_args ( (aggr_args_list (aggr_arg (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )))))) ; (stmt (removeaggrstmt DROP AGGREGATE IF EXISTS (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier foo))) (aggr_args ( (aggr_args_list (aggr_arg (func_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier no_such_type)))) opt_array_bounds))))) )))))) ; (stmt (removeaggrstmt DROP AGGREGATE IF EXISTS (aggregate_with_argtypes_list (aggregate_with_argtypes (func_name (type_function_name (identifier foo))) (aggr_args ( (aggr_args_list (aggr_arg (func_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_type)))))) opt_array_bounds))))) )))))) ; (stmt (dropcaststmt DROP CAST (if_exists_ IF EXISTS) ( (typename (simpletypename (numeric INTEGER)) opt_array_bounds) AS (typename (simpletypename (generictype (type_function_name (identifier no_such_type2)))) opt_array_bounds) ))) ; (stmt (dropcaststmt DROP CAST (if_exists_ IF EXISTS) ( (typename (simpletypename (generictype (type_function_name (identifier no_such_type1)))) opt_array_bounds) AS (typename (simpletypename (numeric INTEGER)) opt_array_bounds) ))) ; (stmt (dropcaststmt DROP CAST (if_exists_ IF EXISTS) ( (typename (simpletypename (numeric INTEGER)) opt_array_bounds) AS (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier bar)))))) opt_array_bounds) ))) ; (stmt (dropcaststmt DROP CAST (if_exists_ IF EXISTS) ( (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))) opt_array_bounds) AS (typename (simpletypename (numeric INTEGER)) opt_array_bounds) ))) ; (stmt (dropstmt DROP (object_type_any_name COLLATION) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name CONVERSION) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP DOMAIN IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))) opt_array_bounds)))) ; (stmt (dropstmt DROP (object_type_any_name FOREIGN TABLE) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (func_name (colid (identifier no_such_schema)) (indirection (indirection_el . (attr_name (colLabel (identifier foo)))))) (func_args ( )))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier foo))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier no_such_type)))) opt_array_bounds)))) )))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier foo))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_type)))))) opt_array_bounds)))) )))))) ; (stmt (dropstmt DROP (object_type_any_name INDEX) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name MATERIALIZED VIEW) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (removeoperstmt DROP OPERATOR IF EXISTS (operator_with_argtypes_list (operator_with_argtypes (any_operator (colid (identifier no_such_schema)) . (all_op (mathop +))) (oper_argtypes ( (typename (simpletypename (numeric int)) opt_array_bounds) , (typename (simpletypename (numeric int)) opt_array_bounds) )))))) ; (stmt (removeoperstmt DROP OPERATOR IF EXISTS (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op (mathop +))) (oper_argtypes ( (typename (simpletypename (generictype (type_function_name (identifier no_such_type)))) opt_array_bounds) , (typename (simpletypename (generictype (type_function_name (identifier no_such_type)))) opt_array_bounds) )))))) ; (stmt (removeoperstmt DROP OPERATOR IF EXISTS (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op (mathop +))) (oper_argtypes ( (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_type)))))) opt_array_bounds) , (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_type)))))) opt_array_bounds) )))))) ; (stmt (dropopclassstmt DROP OPERATOR CLASS IF EXISTS (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier widget_ops))))) USING (name (colid (identifier btree))))) ; (stmt (dropopfamilystmt DROP OPERATOR FAMILY IF EXISTS (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier float_ops))))) USING (name (colid (identifier btree))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name RULE) IF EXISTS (name (colid (identifier foo))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier bar))))))) ; (stmt (dropstmt DROP (object_type_any_name SEQUENCE) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name TABLE) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH CONFIGURATION) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH DICTIONARY) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH PARSER) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_any_name TEXT SEARCH TEMPLATE) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (dropstmt DROP (object_type_name_on_any_name TRIGGER) IF EXISTS (name (colid (identifier foo))) ON (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier bar))))))) ; (stmt (dropstmt DROP TYPE IF EXISTS (type_name_list (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))) opt_array_bounds)))) ; (stmt (dropstmt DROP (object_type_any_name VIEW) IF EXISTS (any_name_list_ (any_name (colid (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier foo)))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier test_ambiguous_funcname))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )) returns (func_return (func_type (typename (simpletypename (numeric int)) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$  select  $1;  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (unreserved_keyword sql))))))) ; (stmt (createfunctionstmt CREATE FUNCTION (func_name (type_function_name (identifier test_ambiguous_funcname))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) returns (func_return (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$  select  $1;  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (unreserved_keyword sql))))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (colid (identifier test_ambiguous_funcname)))))) ; (stmt (removefuncstmt DROP FUNCTION IF EXISTS (function_with_argtypes_list (function_with_argtypes (colid (identifier test_ambiguous_funcname)))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_ambiguous_funcname))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) )))))) ; (stmt (removefuncstmt DROP FUNCTION (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_ambiguous_funcname))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) )))))) ; (stmt (createfunctionstmt CREATE PROCEDURE (func_name (type_function_name (identifier test_ambiguous_procname))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$  begin end;  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (createfunctionstmt CREATE PROCEDURE (func_name (type_function_name (identifier test_ambiguous_procname))) (func_args_with_defaults ( (func_args_with_defaults_list (func_arg_with_default (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds))))) )) (createfunc_opt_list (createfunc_opt_item as (func_as (sconst (anysconst $$  begin end;  $$)))) (createfunc_opt_item language (nonreservedword_or_sconst (nonreservedword (identifier plpgsql))))))) ; (stmt (removefuncstmt DROP PROCEDURE (function_with_argtypes_list (function_with_argtypes (colid (identifier test_ambiguous_procname)))))) ; (stmt (removefuncstmt DROP PROCEDURE IF EXISTS (function_with_argtypes_list (function_with_argtypes (colid (identifier test_ambiguous_procname)))))) ; (stmt (removefuncstmt DROP ROUTINE IF EXISTS (function_with_argtypes_list (function_with_argtypes (colid (identifier test_ambiguous_procname)))))) ; (stmt (removefuncstmt DROP PROCEDURE (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_ambiguous_procname))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (numeric int)) opt_array_bounds)))) )))))) ; (stmt (removefuncstmt DROP PROCEDURE (function_with_argtypes_list (function_with_argtypes (func_name (type_function_name (identifier test_ambiguous_procname))) (func_args ( (func_args_list (func_arg (func_type (typename (simpletypename (generictype (type_function_name (unreserved_keyword text)))) opt_array_bounds)))) )))))) ; (stmt (dropdbstmt drop database (name (colid (identifier test_database_exists))) ( (drop_option_list (drop_option force)) ))) ; (stmt (dropdbstmt drop database (name (colid (identifier test_database_exists))) (with_ with) ( (drop_option_list (drop_option force)) ))) ; (stmt (dropdbstmt drop database if exists (name (colid (identifier test_database_exists))) ( (drop_option_list (drop_option force)) ))) ; (stmt (dropdbstmt drop database if exists (name (colid (identifier test_database_exists))) (with_ with) ( (drop_option_list (drop_option force)) ))) ; (stmt (removeoperstmt DROP OPERATOR IF EXISTS (operator_with_argtypes_list (operator_with_argtypes (any_operator (all_op #)) (oper_argtypes ( NONE , (typename (simpletypename (generictype (type_function_name (identifier no_such_schema)) (attrs . (attr_name (colLabel (identifier no_such_type)))))) opt_array_bounds) )))))) ;)) <EOF>)