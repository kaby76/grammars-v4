(top_level (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier Foundation)))))) (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier CoreGraphics)))))) (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier UIKit)))))) (statement (declaration (class_declaration (access_level_modifier public) class (class_name (identifier LineChartRenderer)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier LineScatterCandleRadarChartRenderer))))) (class_body { (declarations (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifiers (declaration_modifier weak))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dataProvider)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier LineChartDataProvider)))) ?))))))) (declaration (initializer_declaration (initializer_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) init) (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier dataProvider)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier LineChartDataProvider)))) ?))) , (parameter (local_parameter_name (identifier animator)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier ChartAnimator)))) ?))) , (parameter (local_parameter_name (identifier viewPortHandler)) (type_annotation : (type_ (type_identifier (type_name (identifier ChartViewPortHandler))))))) )) (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (superclass_expression (superclass_initializer_expression super . init)))) (parenthesized_expression ( (expression_element_list (expression_element (identifier animator) : (expression (prefix_expression (postfix_expression (primary_expression (identifier animator)))))) , (expression_element (identifier viewPortHandler) : (expression (prefix_expression (postfix_expression (primary_expression (identifier viewPortHandler))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (self_expression self))) . (identifier dataProvider))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifiers (declaration_modifier override))) func) (function_name (identifier drawData)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext))))))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier lineData))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier lineData)))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier i))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier dataSetCount)))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier i))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier (context_sensitive_keyword set)))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier getDataSetByIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier i))))))) ))))))))))) else (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier isVisible))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawDataSet))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set))))) (binary_expressions (binary_expression (type_casting_operator as ! (type_ (type_identifier (type_name (identifier LineChartDataSet)))))))))) ))))))) }))))) }))))) })))) (declaration (struct_declaration (access_level_modifier internal) struct (struct_name (identifier CGCPoint)) (struct_body { (declarations (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier x)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))))) (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier y)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))))) (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dx)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))))) (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dy)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))))) (declaration (initializer_declaration (initializer_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) init) (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier x)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) , (parameter (local_parameter_name (identifier y)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat))))))) )) (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (self_expression self))) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier x)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (self_expression self))) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier y))))))))) }))))) }))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) func) (function_name (identifier drawDataSet)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier dataSet)) (type_annotation : (type_ (type_identifier (type_name (identifier LineChartDataSet))))))) )))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entries))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier yVals)))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineWidth))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier lineWidth)))))) )))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier lineDashLengths))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineDash))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier lineDashPhase))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier lineDashLengths))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier lineDashLengths)) . (identifier count)))))) ))))))) }) (else_clause else (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineDash))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))) }))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawCubicEnabled)))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawCubic))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier entries) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entries))))))) ))))))) }) (else_clause else (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawLinear))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier entries) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entries))))))) ))))))) }))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) func) (function_name (identifier drawCubic)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier dataSet)) (type_annotation : (type_ (type_identifier (type_name (identifier LineChartDataSet)))))) , (parameter (local_parameter_name (identifier entries)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) ])))) )))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier trans))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier getTransformer)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier axisDependency)))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryFrom))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _minX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryTo))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _maxX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier diff))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier entryTo))))))))) ))))) (binary_expressions (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) :) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier minx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier diff)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier maxx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryTo)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseX))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseY))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier drawingColor))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier colors)) . (identifier first)) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier intensity))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier cubicIntensity)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier cubicPath))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathCreateMutable))) (parenthesized_expression ( ))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valueToPixelMatrix))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) (postfix_operator (operator_ (operator_head !)))) . (identifier valueToPixelMatrix)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier size))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) ))))))))) ))))))) ))))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier size)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))) (binary_expression (binary_operator (operator_ (operator_head >) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) ))))))) (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier prevDx)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier prevDy)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier curDx)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier curDy)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier prevPrev))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) ]))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier prev))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) ]))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier cur))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) ]))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier next))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) ]))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathMoveToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier valueToPixelMatrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) )))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddCurveToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier valueToPixelMatrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) )))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier j))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier size)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevPrev)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))) :) (prefix_expression (postfix_expression (primary_expression (identifier j))))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prev)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier cur)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier next)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prevPrev))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prevPrev))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddCurveToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier valueToPixelMatrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) ))))))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier size)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevPrev)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))) (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))) :) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) ))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prev)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier cur)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier next)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier cur)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prevPrev))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier prevDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prevPrev))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier xIndex))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier curDy)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier next))) . (identifier value))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier intensity)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddCurveToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier valueToPixelMatrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier prev))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier prevDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDx)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier curDy))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier cur))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) ))))))) }))))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawFilledEnabled)))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawCubicFill))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier spline) : (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath)))))) , (expression_element (identifier matrix) : (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix)))))) , (expression_element (identifier from) : (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) , (expression_element (identifier to) : (expression (prefix_expression (postfix_expression (primary_expression (identifier size))))))) ))))))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextBeginPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextAddPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier cubicPath))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetStrokeColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawingColor))) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextStrokePath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) func) (function_name (identifier drawCubicFill)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier dataSet)) (type_annotation : (type_ (type_identifier (type_name (identifier LineChartDataSet)))))) , (parameter (local_parameter_name (identifier spline)) (type_annotation : (type_ (type_identifier (type_name (identifier CGMutablePath)))))) , (parameter (local_parameter_name (identifier matrix)) (type_annotation : (type_ (type_identifier (type_name (identifier CGAffineTransform)))))) , (parameter (local_parameter_name (identifier from)) (type_annotation : (type_ (type_identifier (type_name (identifier Int)))))) , (parameter (local_parameter_name (identifier to)) (type_annotation : (type_ (type_identifier (type_name (identifier Int))))))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier dataProvider))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (identifier to)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier from))))) (binary_expression (binary_operator (operator_ (operator_head <) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier fillMin))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillFormatter)) (postfix_operator (operator_ (operator_head ?)))) . (identifier getFillLinePosition)) (parenthesized_expression ( (expression_element_list (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier dataProvider) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head ?) (operator_character (operator_head ?)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier pt1))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier to)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (identifier y) : (expression (prefix_expression (postfix_expression (primary_expression (identifier fillMin))))))) ))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier pt2))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier from))))))) )))))) , (expression_element (identifier y) : (expression (prefix_expression (postfix_expression (primary_expression (identifier fillMin))))))) ))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier pt1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier pt1)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier matrix))))))) )))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier pt2)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier pt2)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier matrix))))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextBeginPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextAddPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier spline))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextAddLineToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt1))) . (identifier x))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt1))) . (identifier y)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextAddLineToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt2))) . (identifier x))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt2))) . (identifier y)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextClosePath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetFillColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillColor)) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetAlpha))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillAlpha)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextFillPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier private))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier _lineSegments))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (identifier CGPoint))))))) ])))) (parenthesized_expression ( (expression_element_list (expression_element (identifier count) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))) , (expression_element (identifier repeatedValue) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( ))))))) )))))))))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) func) (function_name (identifier drawLinear)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier dataSet)) (type_annotation : (type_ (type_identifier (type_name (identifier LineChartDataSet)))))) , (parameter (local_parameter_name (identifier entries)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) ])))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier trans))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier getTransformer)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier axisDependency)))))) ))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valueToPixelMatrix))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) . (identifier valueToPixelMatrix)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseX))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseY))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY)))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryFrom))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _minX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryTo))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _maxX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier diff))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier entryTo))))))))) ))))) (binary_expressions (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) :) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier minx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier diff)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier maxx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryTo)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))))) ))))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier colors)) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier _lineSegments)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (identifier CGPoint))))))) ])))) (parenthesized_expression ( (expression_element_list (expression_element (identifier count) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))) , (expression_element (identifier repeatedValue) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( ))))))) ))))))))) })))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier j))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) ))))))))) ))))))) )))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier count)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head &)))) (prefix_expression (postfix_expression (primary_expression (identifier j))))) (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier count))))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (break_statement break)))) })))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier e))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier xIndex)))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier value)))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ])))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix))))))) )))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier e)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ]) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier xIndex)))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ]) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier value)))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ])))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix))))))) ))))))))) }) (else_clause else (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]))))))) }))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsRight)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]) . (identifier x)))))) ))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (break_statement break)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsLeft)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ]) . (identifier x)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsTop)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]) . (identifier y)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head &)))) (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsBottom)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ]) . (identifier y)))))) ))))))))) )))))) (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsTop)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))) ]) . (identifier y)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head &)))) (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsBottom)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) ]) . (identifier y)))))) ))))))))) )))))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetStrokeColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier colorAt)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier j))))))) ))) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextStrokeLineSegments))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _lineSegments)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))) ))))))) }))))) }) (else_clause else (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier e1)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) !)))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier e2)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) !)))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))) ))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier _lineSegments)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (identifier CGPoint))))))) ])))) (parenthesized_expression ( (expression_element_list (expression_element (identifier count) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))) )))))) , (expression_element (identifier repeatedValue) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( ))))))) ))))))))) })))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier e1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) ])))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) ))))))))) ))))))) ))))))))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier x))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier count)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))) :) (prefix_expression (postfix_expression (primary_expression (identifier minx))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier j))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier x))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier e1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))) (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))) :) (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))))))) ])))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier e2)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))))) ])))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +)))))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e1))) . (identifier xIndex)))))) )))))) , (expression_element (identifier y) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e1))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix))))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _lineSegments))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +)))))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e2))) . (identifier xIndex)))))) )))))) , (expression_element (identifier y) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e2))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix))))))) ))))))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier size))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier count)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))) ))))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetStrokeColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier colorAt)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextStrokeLineSegments))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _lineSegments)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier size))))))) ))))))) }))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawFilledEnabled))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head &)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))) (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawLinearFill))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier entries) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entries)))))) , (expression_element (identifier minx) : (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) , (expression_element (identifier maxx) : (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))))) , (expression_element (identifier trans) : (expression (prefix_expression (postfix_expression (primary_expression (identifier trans))))))) ))))))) }))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier internal))) func) (function_name (identifier drawLinearFill)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier dataSet)) (type_annotation : (type_ (type_identifier (type_name (identifier LineChartDataSet)))))) , (parameter (local_parameter_name (identifier entries)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) ]))) , (parameter (local_parameter_name (identifier minx)) (type_annotation : (type_ (type_identifier (type_name (identifier Int)))))) , (parameter (local_parameter_name (identifier maxx)) (type_annotation : (type_ (type_identifier (type_name (identifier Int)))))) , (parameter (local_parameter_name (identifier trans)) (type_annotation : (type_ (type_identifier (type_name (identifier ChartTransformer))))))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier dataProvider))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetFillColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillColor)) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetAlpha))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillAlpha)))))) )))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier filled))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier generateFilledPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entries)))))) , (expression_element (identifier fillMin) : (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier fillFormatter)) (postfix_operator (operator_ (operator_head ?)))) . (identifier getFillLinePosition)) (parenthesized_expression ( (expression_element_list (expression_element (identifier dataSet) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataSet)))))) , (expression_element (identifier dataProvider) : (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head ?) (operator_character (operator_head ?)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))) , (expression_element (identifier from) : (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) , (expression_element (identifier to) : (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))))) , (expression_element (identifier matrix) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) . (identifier valueToPixelMatrix)))))) ))))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextBeginPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextAddPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextFillPath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier private))) func) (function_name (identifier generateFilledPath)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier entries)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier ChartDataEntry)))) ]))) , (parameter (local_parameter_name (identifier fillMin)) (type_annotation : (type_ (type_identifier (type_name (identifier CGFloat)))))) , (parameter (local_parameter_name (identifier from)) (type_annotation : (type_ (type_identifier (type_name (identifier Int)))))) , (parameter (local_parameter_name (identifier to)) (type_annotation : (type_ (type_identifier (type_name (identifier Int)))))) , (parameter var (local_parameter_name (identifier matrix)) (type_annotation : (type_ (type_identifier (type_name (identifier CGAffineTransform))))))) ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier CGPath)))))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseX))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseY))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier filled))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathCreateMutable))) (parenthesized_expression ( ))))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathMoveToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier matrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier from)))))) ]) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier fillMin))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddLineToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier matrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier from)))))) ]) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier from)))))) ]) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) )))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier x))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier from)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier to)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier from))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier from))))))) ))))))))) ))))))) )))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier x))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier e))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier x)))))) ]))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddLineToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier matrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier value)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY))))))))) ))))))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathAddLineToPoint))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier matrix)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier to)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier from))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier from))))))) ))))))))) ))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) )))))) ]) . (identifier xIndex)))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier fillMin))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPathCloseSubpath))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier filled))))))) )))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier filled))))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifiers (declaration_modifier override))) func) (function_name (identifier drawValues)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext))))))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier dataProvider))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))) (optional_binding_continuation_list , (optional_binding_continuation (pattern (identifier_pattern (identifier lineData))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) . (identifier lineData))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier yValCount)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) . (identifier maxVisibleValueCount)))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier scaleX)))))))) ))))))) (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dataSets))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier dataSets)))))))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier i))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSets))) . (identifier count)))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier i))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier dataSet))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSets))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))))) ])) (binary_expressions (binary_expression (type_casting_operator as ? (type_ (type_identifier (type_name (identifier LineChartDataSet)))))))))))))) else (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawValuesEnabled))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryCount)))) (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valueFont))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier valueFont)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valueTextColor))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier valueTextColor)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier formatter))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier valueFormatter)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier trans))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) . (identifier getTransformer)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier axisDependency)))))) ))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valOffset))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier circleRadius))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 1.75))))))))))) ))))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawCirclesEnabled)))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier valOffset)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier valOffset))))) (binary_expression (binary_operator (operator_ (operator_head /))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) })))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entries))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier yVals)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryFrom))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _minX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryTo))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _maxX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier diff))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier entryTo))))))))) ))))) (binary_expressions (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) :) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier minx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier diff)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier maxx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryTo)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))))) ))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier positions))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) . (identifier generateTransformedValuesLine)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entries)))))) , (expression_element (identifier phaseX) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX))))) , (expression_element (identifier phaseY) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY))))) , (expression_element (identifier from) : (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))))) , (expression_element (identifier to) : (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx))))))) ))))))))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier j))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) . (identifier count))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsRight)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]) . (identifier x)))))) ))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (break_statement break)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsLeft)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]) . (identifier x)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsY)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]) . (identifier y)))))) ))))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier val))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier minx)))))))) ]) . (identifier value)))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier ChartUtils))) . (identifier drawText)) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier text) : (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier formatter))) (postfix_operator (operator_ (operator_head !)))) . (identifier stringFromNumber)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier val))))))) ))) (postfix_operator (operator_ (operator_head !))))))) , (expression_element (identifier point) : (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]) . (identifier x))))) , (expression_element (identifier y) : (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier positions))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valOffset))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier valueFont))) . (identifier lineHeight)))))))) )))))) , (expression_element (identifier align) : (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier Center))))))) , (expression_element (identifier attributes) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (dictionary_literal [ (dictionary_literal_items (dictionary_literal_item (expression (prefix_expression (postfix_expression (primary_expression (identifier NSFontAttributeName))))) : (expression (prefix_expression (postfix_expression (primary_expression (identifier valueFont)))))) , (dictionary_literal_item (expression (prefix_expression (postfix_expression (primary_expression (identifier NSForegroundColorAttributeName))))) : (expression (prefix_expression (postfix_expression (primary_expression (identifier valueTextColor))))))) ])))))))) ))))))) }))))) }))))) }))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifiers (declaration_modifier override))) func) (function_name (identifier drawExtras)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext))))))) )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawCircles))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier private))) func) (function_name (identifier drawCircles)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext))))))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier dataProvider))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier dataProvider))))))) (optional_binding_continuation_list , (optional_binding_continuation (pattern (identifier_pattern (identifier lineData))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) . (identifier lineData))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseX))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier phaseY))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dataSets))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier dataSets)))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier pt))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( ))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier rect))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGRect))) (parenthesized_expression ( ))))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier i))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSets))) . (identifier count))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier i))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier dataSet))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier getDataSetByIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier i))))))) )))) (binary_expressions (binary_expression (type_casting_operator as ! (type_ (type_ (type_identifier (type_name (identifier LineChartDataSet)))) !))))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isVisible))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawCirclesEnabled)))) (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryCount)))) (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier trans))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) . (identifier getTransformer)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier axisDependency)))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier valueToPixelMatrix))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) . (identifier valueToPixelMatrix)))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entries))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier yVals)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier circleRadius))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier circleRadius)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier circleDiameter))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier circleRadius)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 2.0))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier circleHoleDiameter))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier circleRadius))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier circleHoleRadius))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier circleHoleDiameter)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head /))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 2.0))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier isDrawCircleHoleEnabled))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier isDrawCircleHoleEnabled)))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryFrom))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _minX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier entryTo))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier _maxX))))))) ))) (postfix_operator (operator_ (operator_head !)))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier diff))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier entryTo))))))))) ))))) (binary_expressions (binary_expression (conditional_operator ? (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))) :) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier minx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryFrom)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier diff)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier maxx))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier min))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier max))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier entryIndex)) (parenthesized_expression ( (expression_element_list (expression_element (identifier entry) : (expression (prefix_expression (postfix_expression (primary_expression (identifier entryTo)))))) , (expression_element (identifier isEqual) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) )))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) . (identifier count)))))) ))))))))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier j))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) , (pattern_initializer (pattern (identifier_pattern (identifier count))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Int))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier ceil))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier maxx)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier minx))))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseX))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier minx))))))) ))))))))) ))))))) )))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (identifier count))))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier j))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier e))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier entries))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier j)))))) ]))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier xIndex)))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier e))) . (identifier value)))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (identifier phaseY)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier pt)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPointApplyAffineTransform))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier pt)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier valueToPixelMatrix))))))) )))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsRight)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier x)))))) ))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (break_statement break)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsLeft)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier x)))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |) (operator_character (operator_head |)))) (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier viewPortHandler))) . (identifier isInBoundsY)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier y)))))) ))))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetFillColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier getCircleColor)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier j))))))) ))) (postfix_operator (operator_ (operator_head !)))) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier origin)) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier x)))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier circleRadius)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier origin)) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier y)))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier circleRadius)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier size)) . (identifier width))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier circleDiameter)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier size)) . (identifier height))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier circleDiameter)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextFillEllipseInRect))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier rect))))))) )))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier isDrawCircleHoleEnabled))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetFillColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataSet))) . (identifier circleHoleColor)) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier origin)) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier x)))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier circleHoleRadius)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier origin)) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier pt))) . (identifier y)))) (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (identifier circleHoleRadius)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier size)) . (identifier width))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier circleHoleDiameter)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier rect))) . (identifier size)) . (identifier height))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier circleHoleDiameter)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextFillEllipseInRect))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier rect))))))) ))))))) }))))) }))))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) })))) (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier private))) var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier _highlightPointBuffer))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGPoint))) (parenthesized_expression ( )))))))))) (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifiers (declaration_modifier override))) func) (function_name (identifier drawHighlighted)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier context)) (local_parameter_name (identifier context)) (type_annotation : (type_ (type_identifier (type_name (identifier CGContext)))))) , (parameter (local_parameter_name (identifier indices)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier ChartHighlight)))) ])))) )))) (function_body (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier lineData))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier lineData)))))) (optional_binding_continuation_list , (optional_binding_continuation (pattern (identifier_pattern (identifier chartXMax))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier chartXMax))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSaveGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) )))))) (statement (loop_statement (for_statement for ( (for_init (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier i))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))))) ; (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier indices))) . (identifier count)))))) ; (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier i))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +))))))) ) (code_block { (statements (statement (branch_statement (guard_statement guard (condition_clause (condition_list (condition (optional_binding_condition (optional_binding_head let (pattern (identifier_pattern (identifier (context_sensitive_keyword set)))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier lineData))) . (identifier getDataSetByIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier indices))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))))) ]) . (identifier dataSetIndex)))))) )))) (binary_expressions (binary_expression (type_casting_operator as ? (type_ (type_identifier (type_name (identifier LineChartDataSet)))))))))))))) else (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier isHighlightEnabled))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetStrokeColorWithColor))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightColor)) . (identifier CGColor)))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineWidth))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightLineWidth)))))) )))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightLineDashLengths))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) ))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineDash))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightLineDashPhase))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightLineDashLengths)) (postfix_operator (operator_ (operator_head !))))))) , (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier highlightLineDashLengths)) (postfix_operator (operator_ (operator_head !)))) . (identifier count)))))) ))))))) }) (else_clause else (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextSetLineDash))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ))))))) }))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier xIndex))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier indices))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))))) ]) . (identifier xIndex))))))))) ;) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier xIndex))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier chartXMax))))))) ))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseX)))))))) ))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier yValue))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier yValForXIndex)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier xIndex))))))) ))))))))))) (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier yValue))) . (identifier isNaN)))))) ))))))) (code_block { (statements (statement (control_transfer_statement (continue_statement continue)))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier y))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier yValue))))))) )))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _animator))) . (identifier phaseY))))))))))) ;) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _highlightPointBuffer))) . (identifier x))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGFloat))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier xIndex))))))) )))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier _highlightPointBuffer))) . (identifier y))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier y)))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier trans))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier dataProvider))) (postfix_operator (operator_ (operator_head ?)))) . (identifier getTransformer)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) . (identifier axisDependency)))))) ))))))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier trans))) (postfix_operator (operator_ (operator_head ?)))) . (identifier pointValueToPixel)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier _highlightPointBuffer))))))) )))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier drawHighlightLines))) (parenthesized_expression ( (expression_element_list (expression_element (identifier context) : (expression (prefix_expression (postfix_expression (primary_expression (identifier context)))))) , (expression_element (identifier point) : (expression (prefix_expression (postfix_expression (primary_expression (identifier _highlightPointBuffer)))))) , (expression_element (identifier (context_sensitive_keyword set)) : (expression (prefix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))))))) ))))))) })))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier CGContextRestoreGState))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier context))))))) ))))))) }))))) })))) <EOF>)