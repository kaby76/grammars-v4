(top_level (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier UIKit)))))) (statement (declaration (class_declaration (access_level_modifier public) class (class_name (identifier OperatorTest)) (class_body { (declarations (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier testString)) (type_annotation : (type_ (type_identifier (type_name (identifier String)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "hey")))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier subtractionTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 100))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier multiplicationTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 9))))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier additionTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier moduleTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head %))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier gtTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier ltTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier not))) (initializer (assignment_operator =) (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))) ))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier x)) (type_annotation : (type_ (type_ (type_identifier (type_name (identifier Int)))) ?))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier y))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier z)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier _))))) ))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 20)))))))))) ))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier a)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier _)))) , (tuple_pattern_element (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier b)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier c))))) ))))) ))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "test")))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 9.45)))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 12))))))))) , (expression_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))))) )))))))) ))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier bat))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "BAT")))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier man))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "MAN")))))))))))) (declaration (function_declaration (function_head func) (function_name (identifier increment)) (function_signature (parameter_clauses (parameter_clause ( ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Void)))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier x))) (postfix_operator (operator_ (operator_head !) (operator_character (operator_head +)) (operator_character (operator_head +)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier x))) (postfix_operator (operator_ (operator_head !) (operator_character (operator_head -)) (operator_character (operator_head -)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier y))) (postfix_operator (operator_ (operator_head +) (operator_character (operator_head +)))))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier y))) (postfix_operator (operator_ (operator_head -) (operator_character (operator_head -)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "\(bat)\(man)"))))))))) }))))) })))) <EOF>)