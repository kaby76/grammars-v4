(top_level (statement (declaration (class_declaration class (class_name (identifier TestClass)) (class_body { (declarations (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier x))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0))))))))) , (pattern_initializer (pattern (identifier_pattern (identifier y))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 0.0)))))))))))) (declaration (subscript_declaration (subscript_head subscript (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier index)) (type_annotation : (type_ (type_identifier (type_name (identifier Int))))))) ))) (subscript_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Int))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword get)))) (trailing_closure (closure_expression { })))))) (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword set)))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier newValue))))))) ))) (trailing_closure (closure_expression { }))))))) }))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier reversed))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier names))) . (identifier sort)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (closure_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier s1)) (type_annotation : (type_ (type_identifier (type_name (identifier String)))))) , (parameter (local_parameter_name (identifier s2)) (type_annotation : (type_ (type_identifier (type_name (identifier String))))))) )) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Bool))))) in) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier s1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (identifier s2))))))))))) }))))))) )))))))))) (declaration (function_declaration (function_head func) (function_name (identifier backwards)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier s1)) (type_annotation : (type_ (type_identifier (type_name (identifier String)))))) , (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier s2)) (type_annotation : (type_ (type_identifier (type_name (identifier String))))))) ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Bool)))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier s1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (identifier s2))))))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier reversed))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier names))) . (identifier sort)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (closure_signature (identifier_list (identifier s1) , (identifier s2)) in) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier s1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (identifier s2))))))))))) }))))))) )))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier reversed))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier names))) . (identifier sort)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (closure_signature (identifier_list (identifier s1) , (identifier s2)) in) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier s1)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (identifier s2))))))))) }))))))) )))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier reversed))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier names))) . (identifier sort)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier $0)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (identifier $1))))))))) }))))))) )))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier strings))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier numbers))) . (identifier map)) (trailing_closure (closure_expression { (closure_signature (parameter_clause ( (parameter_list (parameter var (local_parameter_name (identifier number)))) )) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier String))))) in) (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier output))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal ""))))))))))))) (statement (loop_statement (while_statement while (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (identifier number)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier output)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier digitNames))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier number)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head %))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))))) ]) (postfix_operator (operator_ (operator_head !)))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier output)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier number)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head /) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier output))))))))) })))))))))) (declaration (function_declaration (function_head func) (function_name (identifier makeIncrementer)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier forIncrement)) (local_parameter_name (identifier amount)) (type_annotation : (type_ (type_identifier (type_name (identifier Int))))))) ))) (function_result (arrow_operator - >) (type_ (type_ (tuple_type ( ))) (arrow_operator - >) (type_ (type_identifier (type_name (identifier Int))))))) (function_body (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier runningTotal))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier incrementer)) (function_signature (parameter_clauses (parameter_clause ( ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Int)))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier runningTotal)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier amount)))))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier runningTotal))))))))) }))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier incrementer))))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier completionHandlers)) (type_annotation : (type_ [ (type_ (type_ (tuple_type ( ))) (arrow_operator - >) (type_ (type_identifier (type_name (identifier Void))))) ]))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ ]))))))))))) (declaration (function_declaration (function_head func) (function_name (identifier someFunctionWithEscapingClosure)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier completionHandler)) (type_annotation : (type_ (type_ (tuple_type ( ))) (arrow_operator - >) (type_ (type_identifier (type_name (identifier Void)))))))) )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier completionHandlers))) . (identifier append)) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (postfix_expression (primary_expression (identifier completionHandler))))))) ))))))) })))) (declaration (function_declaration (function_head func) (function_name (identifier swapTwoValues)) (generic_parameter_clause < (generic_parameter_list (generic_parameter (type_name (identifier T)))) >) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter inout (local_parameter_name (identifier a)) (type_annotation : (type_ (type_identifier (type_name (identifier T)))))) , (parameter inout (external_parameter_name (identifier _)) (local_parameter_name (identifier b)) (type_annotation : (type_ (type_identifier (type_name (identifier T))))))) )))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier temporaryA))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier a))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier a)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier b)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier b)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier temporaryA))))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier someInt))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier anotherInt))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 107))))))))))))) (declaration (function_declaration (function_head func) (function_name (identifier foo)) (function_signature (parameter_clauses (parameter_clause ( )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier swapTwoValues))) (parenthesized_expression ( (expression_element_list (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier someInt)))))) , (expression_element (expression (prefix_expression (prefix_operator (operator_ (operator_head &))) (postfix_expression (primary_expression (identifier anotherInt))))))) ))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier someString))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "hello")))))))))))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier anotherString))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "world")))))))))))) (declaration (function_declaration (function_head func) (function_name (identifier someFunction)) (generic_parameter_clause < (generic_parameter_list (generic_parameter (type_name (identifier T)) : (type_identifier (type_name (identifier SomeClass)))) , (generic_parameter (type_name (identifier U)) : (type_identifier (type_name (identifier SomeProtocol))))) >) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier someT)) (type_annotation : (type_ (type_identifier (type_name (identifier T)))))) , (parameter (local_parameter_name (identifier someU)) (type_annotation : (type_ (type_identifier (type_name (identifier U))))))) )))) (function_body (code_block { })))) (declaration (function_declaration (function_head func) (function_name (identifier findStringIndex)) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier array)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier String)))) ]))) , (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier valueToFind)) (type_annotation : (type_ (type_identifier (type_name (identifier String))))))) ))) (function_result (arrow_operator - >) (type_ (type_ (type_identifier (type_name (identifier Int)))) ?))) (function_body (code_block { (statements (statement (loop_statement (for_in_statement for (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier index)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier value))))) ))) in (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier array))) . (identifier enumerate)) (parenthesized_expression ( ))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (identifier value)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier valueToFind)))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier index))))))))) }))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) })))) (declaration (function_declaration (function_head func) (function_name (identifier findIndex)) (generic_parameter_clause < (generic_parameter_list (generic_parameter (type_name (identifier T)))) >) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier array)) (type_annotation : (type_ [ (type_ (type_identifier (type_name (identifier T)))) ]))) , (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier valueToFind)) (type_annotation : (type_ (type_identifier (type_name (identifier T))))))) ))) (function_result (arrow_operator - >) (type_ (type_ (type_identifier (type_name (identifier Int)))) ?))) (function_body (code_block { (statements (statement (loop_statement (for_in_statement for (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier index)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier value))))) ))) in (expression (prefix_expression (postfix_expression (postfix_expression (postfix_expression (primary_expression (identifier array))) . (identifier enumerate)) (parenthesized_expression ( ))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (primary_expression (identifier value)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (identifier valueToFind)))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (identifier index))))))))) }))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) })))) (declaration (function_declaration (function_head func) (function_name (identifier allItemsMatch)) (generic_parameter_clause < (generic_parameter_list (generic_parameter (type_name (identifier C1)) : (type_identifier (type_name (identifier Container)))) , (generic_parameter (type_name (identifier C2)) : (type_identifier (type_name (identifier Container))))) (requirement_clause where (requirement_list (requirement (same_type_requirement (type_identifier (type_name (identifier C1)) . (type_identifier (type_name (identifier ItemType)))) (same_type_equals = =) (type_ (type_identifier (type_name (identifier C2)) . (type_identifier (type_name (identifier ItemType))))))) , (requirement_list (requirement (conformance_requirement (type_identifier (type_name (identifier C1)) . (type_identifier (type_name (identifier ItemType)))) : (type_identifier (type_name (identifier Equatable)))))))) >) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier someContainer)) (type_annotation : (type_ (type_identifier (type_name (identifier C1)))))) , (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier anotherContainer)) (type_annotation : (type_ (type_identifier (type_name (identifier C2))))))) ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Bool)))))) (function_body (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier someContainer))) . (identifier count))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier anotherContainer))) . (identifier count))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal false))))))))))) })))) (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier i))) in (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))) (binary_expressions (binary_expression (binary_operator (operator_ (dot_operator_head . .) (dot_operator_character (operator_character (operator_head <))))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier someContainer))) . (identifier count)))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_clause (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier someContainer))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))))) ])) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head !) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier anotherContainer))) [ (expression_list (expression (prefix_expression (postfix_expression (primary_expression (identifier i)))))) ])))))) (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal false))))))))))) }))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))))) })))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier initialBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b00001111))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier invertedBits))) (initializer (assignment_operator =) (expression (prefix_expression (prefix_operator (operator_ (operator_head ~))) (postfix_expression (primary_expression (identifier initialBits)))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier firstSixBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b11111100))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier lastSixBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b00111111))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier middleFourBits))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier firstSixBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head &))) (prefix_expression (postfix_expression (primary_expression (identifier lastSixBits)))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier someBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b10110010))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier moreBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b01011110))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier combinedbits))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier someBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head |))) (prefix_expression (postfix_expression (primary_expression (identifier moreBits)))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier firstBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b00010100))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier otherBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0b00000101))))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier outputBits))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (identifier firstBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head ^))) (prefix_expression (postfix_expression (primary_expression (identifier otherBits)))))))))))) (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier shiftBits)) (type_annotation : (type_ (type_identifier (type_name (identifier UInt8)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 4))))))))))))) (declaration (function_declaration (function_head func) (function_name (identifier foo)) (function_signature (parameter_clauses (parameter_clause ( )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier shiftBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <) (operator_character (operator_head <)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier shiftBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <) (operator_character (operator_head <)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier shiftBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <) (operator_character (operator_head <)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier shiftBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <) (operator_character (operator_head <)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 6))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier shiftBits)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >) (operator_character (operator_head >)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier unsignedOverflow))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier UInt8))) . (identifier max))))))))) (declaration (function_declaration (function_head func) (function_name (identifier foo)) (function_signature (parameter_clauses (parameter_clause ( )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier unsignedOverflow)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier unsignedOverflow))))) (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head +)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier unsignedOverflow)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier unsignedOverflow))))) (binary_expression (binary_operator (operator_ (operator_head &) (operator_character (operator_head -)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) })))) (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier unsignedOverflow))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier UInt8))) . (identifier min))))))))) (declaration (function_declaration (function_head func) (function_name (identifier precedenceAndAssociativity)) (function_signature (parameter_clauses (parameter_clause ( ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Void)))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))) (binary_expression (binary_operator (operator_ (operator_head %))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 4)))))))) (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5)))))))))))) })))) (declaration (function_declaration (function_head (attributes (attribute (attribute_name (identifier (context_sensitive_keyword prefix))))) func) (function_name (operator_ (operator_head -))) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier vector)) (type_annotation : (type_ (type_identifier (type_name (identifier Vector2D))))))) ))) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (identifier Vector2D)))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (identifier Vector2D))) (parenthesized_expression ( (expression_element_list (expression_element (identifier x) : (expression (prefix_expression (prefix_operator (operator_ (operator_head -))) (postfix_expression (postfix_expression (primary_expression (identifier vector))) . (identifier x))))) , (expression_element (identifier y) : (expression (prefix_expression (prefix_operator (operator_ (operator_head -))) (postfix_expression (postfix_expression (primary_expression (identifier vector))) . (identifier y)))))) ))))))))) })))) (declaration (function_declaration (function_head func) (function_name (operator_ (operator_head +) (operator_character (operator_head =)))) (function_signature (parameter_clauses (parameter_clause ( (parameter_list (parameter inout (local_parameter_name (identifier (context_sensitive_keyword left))) (type_annotation : (type_ (type_identifier (type_name (identifier Vector2D)))))) , (parameter (local_parameter_name (identifier (context_sensitive_keyword right))) (type_annotation : (type_ (type_identifier (type_name (identifier Vector2D))))))) )))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword left))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword left)))))) (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (identifier (context_sensitive_keyword right)))))))))) }))))) })))) <EOF>)