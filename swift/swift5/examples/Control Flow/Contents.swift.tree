(top_level (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier individualScores))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 75))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 43))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 103))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 87))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 12)))))))))) ])))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier teamScore))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier score))) in (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier individualScores)))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 50)))))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier teamScore))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))))))) }) (else_clause else (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier teamScore))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))) })))))) })))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier teamScore))) ))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier optionalString)) (type_annotation : (type (type (protocol_composition_type (type_identifier (type_name (identifier String))))) ?))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hello ")))))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier optionalString))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) ))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier optionalName)) (type_annotation : (type (type (protocol_composition_type (type_identifier (type_name (identifier String))))) ?))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " John Appleseed ")))))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier greeting))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hello! ")))))))))))))) (statement (branch_statement (if_statement if (condition_list (condition (optional_binding_condition let (pattern (identifier_pattern (identifier name))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier optionalName)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier greeting))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hello,  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier name)))))) ) ")))))))))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier nickname)) (type_annotation : (type (type (protocol_composition_type (type_identifier (type_name (identifier String))))) ?))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier fullName)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " John Appleseed ")))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier informalGreeting))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hi  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier nickname))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head ?) (operator_characters (operator_character (operator_head ?))))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fullName)))))))) ) ")))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier vegetable))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " red pepper ")))))))))))))) (statement (branch_statement (switch_statement switch (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier vegetable)))))) { (switch_cases (switch_case (case_label case (case_item_list (pattern (expression_pattern (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " celery "))))))))))) :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Add some raisins and make ants on a log. ")))))))))) ))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (expression_pattern (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " cucumber ")))))))))) , (pattern (expression_pattern (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " watercress "))))))))))) :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " That would make a good tea sandwich. ")))))))))) ))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (value_binding_pattern let (pattern (identifier_pattern (identifier x))))) (where_clause where (where_expression (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier x))) (explicit_member_suffix . (identifier hasSuffix)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " pepper ")))))))))) ))))))))) :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Is it a spicy  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier x)))))) ) ? ")))))))))) ))))))))) (switch_cases (switch_case (default_label default :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Everything tastes good in soup. ")))))))))) ))))))))))))) }))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier interestingNumbers))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (dictionary_literal [ (dictionary_literal_items (dictionary_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Prime ")))))))) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 7))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 11))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 13)))))))))) ]))))))) , (dictionary_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Fibonacci ")))))))) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 8)))))))))) ]))))))) , (dictionary_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Square ")))))))) : (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 4))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 9))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 16))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 25)))))))))) ]))))))) ,) ])))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier largest))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (statement (loop_statement (for_in_statement for (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier _)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier numbers))))) ))) in (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier interestingNumbers)))))) (code_block { (statements (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier number))) in (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier numbers)))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head >))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier largest)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier largest))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number)))))))))) }))))) }))))) })))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier largest))) ))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier n))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))))) (statement (loop_statement (while_statement while (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier n))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 100)))))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier n))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head *) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) })))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier n))) ))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier m))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))))) (statement (loop_statement (repeat_while_statement repeat (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier m))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head *) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 2)))))))))))) }) while (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier m))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 100))))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier m))) ))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier total))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier i))) in (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0))))))) (binary_expressions (binary_expression (binary_operator (operator (dot_operator_head .) (dot_operator_characters (dot_operator_character .) (dot_operator_character (operator_character (operator_head <)))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 4)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier total))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier i)))))))))) })))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier total))) )))))))) <EOF>)