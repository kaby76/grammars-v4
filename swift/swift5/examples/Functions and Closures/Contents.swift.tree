(top_level (statements (statement (declaration (function_declaration (function_head func) (function_name (identifier greet)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier person)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) , (parameter (local_parameter_name (identifier day)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hello  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier person)))))) ) , today is  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier day)))))) ) . ")))))))))))) }))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier greet))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier person) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Bob "))))))))) , (function_call_argument (argument_name (identifier day) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Tuesday ")))))))))) ))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier greet)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier person)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) , (parameter (external_parameter_name (identifier on)) (local_parameter_name (identifier day)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Hello  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier person)))))) ) , today is  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier day)))))) ) . ")))))))))))) }))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier greet))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " John "))))))))) , (function_call_argument (argument_name (identifier on) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Wednesday ")))))))))) ))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier calculateStatistics)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier scores)) (type_annotation : (type (array_type [ (type (protocol_composition_type (type_identifier (type_name (identifier Int))))) ]))))) )) (function_result (arrow_operator - >) (type (tuple_type ( (tuple_type_element_list (tuple_type_element (element_name (identifier min)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) , (tuple_type_element (element_name (identifier max)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) , (tuple_type_element (element_name (identifier sum)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))))) ))))) (function_body (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier min))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier scores))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ])))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier max))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier scores))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ])))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier sum))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier score))) in (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier scores)))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head >))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier max)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier max))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score)))))))))) }) (else_clause else (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head <))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier min)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier min))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score)))))))))) })))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier sum))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier score)))))))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (tuple_expression ( (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier min))))))) , (tuple_element_list (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier max))))))) , (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier sum)))))))) )))))))))) }))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier statistics))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier calculateStatistics))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier scores) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 100))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 9)))))))))) ])))))))) )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier statistics))) (explicit_member_suffix . (identifier sum))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier statistics))) (explicit_member_suffix . 2)))))) ))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier returnFifteen)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) (function_body (code_block { (statements (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier y))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier add)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier y))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5)))))))))))) }))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier add))) (function_call_suffix (function_call_argument_clause ( ))))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier y)))))))))) }))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier returnFifteen))) (function_call_suffix (function_call_argument_clause ( ))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier makeIncrementer)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type (tuple_type ( (tuple_type_element_list (tuple_type_element (type (function_type (function_type_argument_clause ( (function_type_argument_list (function_type_argument (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) )) (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))))) ))))) (function_body (code_block { (statements (statement (declaration (function_declaration (function_head func) (function_name (identifier addOne)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier number)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head +))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number)))))))))))) }))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier addOne)))))))))) }))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier increment))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier makeIncrementer))) (function_call_suffix (function_call_argument_clause ( )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier increment))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 7)))))))))) ))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier hasAnyMatches)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier list)) (type_annotation : (type (array_type [ (type (protocol_composition_type (type_identifier (type_name (identifier Int))))) ])))) , (parameter (local_parameter_name (identifier condition)) (type_annotation : (type (function_type (function_type_argument_clause ( (function_type_argument_list (function_type_argument (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) )) (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool)))))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (loop_statement (for_in_statement for (pattern (identifier_pattern (identifier item))) in (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier list)))))) (code_block { (statements (statement (branch_statement (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier condition))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier item))) )))))))) (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true))))))))))) }))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal false))))))))))) }))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier lessThanTen)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier number)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))))) }))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier numbers))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 20))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 19))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 7))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 12)))))))))) ])))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier hasAnyMatches))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier list) :) (identifier numbers)) , (function_call_argument (argument_name (identifier condition) :) (identifier lessThanTen))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier numbers))) (explicit_member_suffix . (identifier map)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (closure_signature (closure_parameter_clause ( (closure_parameter_list (closure_parameter (identifier number) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))) in) (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier result))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head *))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number)))))))))))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier result)))))))))) }))))))) ))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier mappedNumbers))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier numbers))) (explicit_member_suffix . (identifier map)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (closure_expression { (closure_signature (closure_parameter_clause (identifier_list (identifier number))) in) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head *))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier number)))))))))) }))))))) )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier mappedNumbers))) ))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier sortedNumbers))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier numbers))) (explicit_member_suffix . (identifier sorted)) (function_call_suffix (trailing_closures (closure_expression { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier $0))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head >))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier $1)))))))))) })))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier sortedNumbers))) )))))))) <EOF>)