(top_level (statements (statement (declaration (enum_declaration (union_style_enum enum (enum_name (identifier PrinterError)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier Error))))) { (union_style_enum_members (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier outOfPaper)))))) (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier noToner)))))) (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier onFire))))))) })))) (statement (declaration (function_declaration (function_head func) (function_name (identifier send)) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier job)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int))))))) , (parameter (external_parameter_name (identifier toPrinter)) (local_parameter_name (identifier printerName)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) throws (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (branch_statement (if_statement if (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier printerName))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Never Has Toner ")))))))))))) (code_block { (statements (statement (control_transfer_statement (throw_statement throw (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier PrinterError))) (explicit_member_suffix . (identifier noToner))))))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Job sent ")))))))))))) }))))) (statement (do_statement do (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier printerResponse))) (initializer = (expression (try_operator try) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier send))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier job) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1040))))))))) , (function_call_argument (argument_name (identifier toPrinter) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Bi Sheng ")))))))))) )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier printerResponse))) )))))))) }) (catch_clauses (catch_clause catch (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier error))) )))))))) }))))) (statement (do_statement do (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier printerResponse))) (initializer = (expression (try_operator try) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier send))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier job) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1440))))))))) , (function_call_argument (argument_name (identifier toPrinter) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Gutenberg ")))))))))) )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier printerResponse))) )))))))) }) (catch_clauses (catch_clause catch (catch_pattern_list (catch_pattern (pattern (enum_case_pattern (type_identifier (type_name (identifier PrinterError))) . (enum_case_name (identifier onFire)))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " I'll just put this over here, with the rest of the fire. ")))))))))) )))))))) })) (catch_clause catch (catch_pattern_list (catch_pattern (pattern (value_binding_pattern let (pattern (pattern (identifier_pattern (identifier printerError))) as (type (protocol_composition_type (type_identifier (type_name (identifier PrinterError)))))))))) (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Printer error:  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier printerError)))))) ) . ")))))))))) )))))))) })) (catch_clause catch (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier error))) )))))))) }))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier printerSuccess))) (initializer = (expression (try_operator try ?) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier send))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier job) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1884))))))))) , (function_call_argument (argument_name (identifier toPrinter) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Mergenthaler ")))))))))) )))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier printerFailure))) (initializer = (expression (try_operator try ?) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier send))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier job) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1885))))))))) , (function_call_argument (argument_name (identifier toPrinter) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Never Has Toner ")))))))))) )))))))))))) (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier fridgeIsOpen))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal false))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier fridgeContent))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " milk "))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " eggs "))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " leftovers ")))))))))) ])))))))))))) (statement (declaration (function_declaration (function_head func) (function_name (identifier fridgeContains)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier food)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fridgeIsOpen))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal true)))))))))) (statement (defer_statement defer (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fridgeIsOpen))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (boolean_literal false))))))))))) }))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier result))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fridgeContent))) (explicit_member_suffix . (identifier contains)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier food))) )))))))))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier result)))))))))) }))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fridgeContains))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " banana ")))))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier fridgeIsOpen))) )))))))) <EOF>)