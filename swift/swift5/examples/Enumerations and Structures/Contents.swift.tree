(top_level (statements (statement (declaration (enum_declaration (raw_value_style_enum enum (enum_name (identifier Rank)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier Int))))) { (raw_value_style_enum_members (raw_value_style_enum_member (raw_value_style_enum_case_clause case (raw_value_style_enum_case_list (raw_value_style_enum_case (enum_case_name (identifier ace)) (raw_value_assignment = (raw_value_literal (numeric_literal (integer_literal 1)))))))) (raw_value_style_enum_member (raw_value_style_enum_case_clause case (raw_value_style_enum_case_list (raw_value_style_enum_case (enum_case_name (identifier two))) , (raw_value_style_enum_case (enum_case_name (identifier three))) , (raw_value_style_enum_case (enum_case_name (identifier four))) , (raw_value_style_enum_case (enum_case_name (identifier five))) , (raw_value_style_enum_case (enum_case_name (identifier six))) , (raw_value_style_enum_case (enum_case_name (identifier seven))) , (raw_value_style_enum_case (enum_case_name (identifier eight))) , (raw_value_style_enum_case (enum_case_name (identifier nine))) , (raw_value_style_enum_case (enum_case_name (identifier ten)))))) (raw_value_style_enum_member (raw_value_style_enum_case_clause case (raw_value_style_enum_case_list (raw_value_style_enum_case (enum_case_name (identifier jack))) , (raw_value_style_enum_case (enum_case_name (identifier queen))) , (raw_value_style_enum_case (enum_case_name (identifier king)))))) (raw_value_style_enum_member (declaration (function_declaration (function_head func) (function_name (identifier simpleDescription)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (branch_statement (switch_statement switch (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self)))))) { (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier ace))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " ace "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier jack))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " jack "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier queen))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " queen "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier king))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " king "))))))))))))) (switch_cases (switch_case (default_label default :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier String))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier rawValue))))))) )))))))))))))))) })))) })))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier ace))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Rank))) (explicit_member_suffix . (identifier ace))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier aceRawValue))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier ace))) (explicit_member_suffix . (identifier rawValue))))))))))) (statement (branch_statement (if_statement if (condition_list (condition (optional_binding_condition let (pattern (identifier_pattern (identifier convertedRank))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Rank))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier rawValue) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3)))))))))) )))))))))) (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier threeDescription))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier convertedRank))) (explicit_member_suffix . (identifier simpleDescription)) (function_call_suffix (function_call_argument_clause ( ))))))))))))) })))) (statement (declaration (enum_declaration (union_style_enum enum (enum_name (identifier Suit)) { (union_style_enum_members (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier spades))) , (union_style_enum_case (enum_case_name (identifier hearts))) , (union_style_enum_case (enum_case_name (identifier diamonds))) , (union_style_enum_case (enum_case_name (identifier clubs)))))) (union_style_enum_member (declaration (function_declaration (function_head func) (function_name (identifier simpleDescription)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (branch_statement (switch_statement switch (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self)))))) { (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier spades))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " spades "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier hearts))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " hearts "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier diamonds))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " diamonds "))))))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (enum_case_pattern . (enum_case_name (identifier clubs))))) :) (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " clubs "))))))))))))))))) })))) })))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier hearts))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Suit))) (explicit_member_suffix . (identifier hearts))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier heartsDescription))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier hearts))) (explicit_member_suffix . (identifier simpleDescription)) (function_call_suffix (function_call_argument_clause ( )))))))))))) (statement (declaration (enum_declaration (union_style_enum enum (enum_name (identifier ServerResponse)) { (union_style_enum_members (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier result)) (tuple_type ( (tuple_type_element_list (tuple_type_element (type (protocol_composition_type (type_identifier (type_name (identifier String)))))) , (tuple_type_element (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) )))))) (union_style_enum_member (union_style_enum_case_clause case (union_style_enum_case_list (union_style_enum_case (enum_case_name (identifier failure)) (tuple_type ( (tuple_type_element_list (tuple_type_element (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) ))))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier success))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier ServerResponse))) (explicit_member_suffix . (identifier result)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 6:00 am "))))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 8:09 pm ")))))))))) )))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier failure))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier ServerResponse))) (explicit_member_suffix . (identifier failure)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Out of cheese. ")))))))))) )))))))))))) (statement (branch_statement (switch_statement switch (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier success)))))) { (switch_cases (switch_case (case_label case (case_item_list (pattern (value_binding_pattern let (pattern (enum_case_pattern . (enum_case_name (identifier result)) (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier sunrise)))) , (tuple_pattern_element (pattern (identifier_pattern (identifier sunset))))) ))))))) :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Sunrise is at  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier sunrise)))))) )  and sunset is at  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier sunset)))))) ) . ")))))))))) ))))))))) (switch_cases (switch_case (case_label case (case_item_list (pattern (value_binding_pattern let (pattern (enum_case_pattern . (enum_case_name (identifier failure)) (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (identifier message))))) ))))))) :) (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier print))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Failure...   \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier message)))))) ) ")))))))))) ))))))))))) }))) (statement (declaration (struct_declaration struct (struct_name (identifier Card)) (struct_body { (struct_members (struct_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier rank)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Rank)))))))))))) (struct_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier suit)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Suit)))))))))))) (struct_member (declaration (function_declaration (function_head func) (function_name (identifier simpleDescription)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " The  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier rank))) (explicit_member_suffix . (identifier simpleDescription)) (function_call_suffix (function_call_argument_clause ( )))))) )  of  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier suit))) (explicit_member_suffix . (identifier simpleDescription)) (function_call_suffix (function_call_argument_clause ( )))))) ) ")))))))))))) })))))) })))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier threeOfSpades))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Card))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier rank) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier three))))))) , (function_call_argument (argument_name (identifier suit) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier spades)))))))) )))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier threeOfSpadesDescription))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier threeOfSpades))) (explicit_member_suffix . (identifier simpleDescription)) (function_call_suffix (function_call_argument_clause ( ))))))))))))) <EOF>)