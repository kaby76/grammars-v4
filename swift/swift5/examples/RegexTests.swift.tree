(top_level (statements (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier XCTest)))))) (statement (declaration (import_declaration (attributes (attribute @ (attribute_name (identifier testable)))) import (import_path (import_path_identifier (identifier Regex)))))) (statement (declaration (class_declaration final class (class_name (identifier RegexTests)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier XCTestCase))))) (class_body { (class_members (class_member (declaration (function_declaration (function_head func) (function_name (identifier testInit)) (function_signature (parameter_clause ( )) throws) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier _))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) ))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier regex))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier _))))) (binary_expressions (binary_expression (assignment_operator =) (try_operator try) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier regex))) )))))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testEquality)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) )))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#))))))))) , (function_call_argument (argument_name (identifier options) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier caseInsensitive)))))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#))))))))) , (function_call_argument (argument_name (identifier options) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier caseInsensitive)))))))) )))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertNotEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#))))))))) , (function_call_argument (argument_name (identifier options) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier caseInsensitive)))))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) )))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testIsMatched)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertTrue))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" ^\d+$ "#)))))))))) ))) (explicit_member_suffix . (identifier isMatched)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier by) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 123 ")))))))))) )))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertFalse))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" ^\d+$ "#)))))))))) ))) (explicit_member_suffix . (identifier isMatched)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier by) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo ")))))))))) )))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testFirstMatch)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) ))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 123-456 ")))))))))) ))) (optional_chaining_suffix ?) (explicit_member_suffix . (identifier value)))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 123 ")))))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testAllMatches)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) ))) (explicit_member_suffix . (identifier allMatches)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 123-456 ")))))))))) ))) (explicit_member_suffix . (identifier map)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (key_path_expression \ . (key_path_components (key_path_component (identifier value)))))))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 123 "))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 456 ")))))))))) ])))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testMatchRange)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier string))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo-456 ")))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier match))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" \d+ "#)))))))))) ))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (identifier string))) ))) (forced_value_suffix !)))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier String))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier string))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier match))) (explicit_member_suffix . (identifier range))))))) ])))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 456 ")))))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testMatchGroup)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" (foo)(bar) "#)))))))))) ))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " -foobar- ")))))))))) ))) (optional_chaining_suffix ?) (explicit_member_suffix . (identifier groups)) (explicit_member_suffix . (identifier map)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (key_path_expression \ . (key_path_components (key_path_component (identifier value)))))))))) ))))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ (array_literal_items (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo "))))))))) , (array_literal_item (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " bar ")))))))))) ])))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" (?<number>\d+) "#)))))))))) ))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 1a-2b ")))))))))) ))) (optional_chaining_suffix ?) (explicit_member_suffix . (identifier group)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier named) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " number ")))))))))) ))) (optional_chaining_suffix ?) (explicit_member_suffix . (identifier value)))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 1 ")))))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testMatchGroupRange)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier string))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo-456 ")))))))))))))) (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier groups))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" ([a-z]+)-(\d+) "#)))))))))) ))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (identifier string))) ))) (forced_value_suffix !) (explicit_member_suffix . (identifier groups))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier string))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier groups))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))) ]) (explicit_member_suffix . (identifier range))))))) ]))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo ")))))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertEqual))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier string))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier groups))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))) ]) (explicit_member_suffix . (identifier range))))))) ]))))) , (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " 456 ")))))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testPatternMatching)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertTrue))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" ^foo\d+$ "#)))))))))) ))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head ~) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo123 ")))))))))))) ))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertTrue))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo123 "))))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head ~) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #" ^foo\d+$ "#)))))))))) )))))))))) )))))))) }))))) (class_member (declaration (function_declaration (function_head func) (function_name (identifier testMultilineOption)) (function_signature (parameter_clause ( ))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier regex))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Regex))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (extended_string_literal #""" \n\t\t\t^\n\t\t\t[a-z]+  # Match the word\n\t\t\t\d+     # Match the number\n\t\t\t$\n\t\t\t """#))))))))) , (function_call_argument (argument_name (identifier options) :) (expression (prefix_expression (postfix_expression (primary_expression (implicit_member_expression . (identifier allowCommentsAndWhitespace)))))))) )))))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier XCTAssertTrue))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier regex))) (explicit_member_suffix . (identifier isMatched)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier by) :) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " foo123 ")))))))))) )))))))) )))))))) })))))) }))))) <EOF>)