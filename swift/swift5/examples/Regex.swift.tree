(top_level (statements (statement (declaration (import_declaration import (import_path (import_path_identifier (identifier Foundation)))))) (statement (declaration (struct_declaration (access_level_modifier public) struct (struct_name (identifier Regex)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier Hashable))))) (struct_body { (struct_members (struct_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier nsRegex)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier NSRegularExpression)))))))))))) (struct_member (declaration (initializer_declaration (initializer_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) init) (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier pattern)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier StaticString))))))) , (parameter (local_parameter_name (identifier options)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Options)))))) (default_argument_clause = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ ])))))))) , (parameter (local_parameter_name (identifier file)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier StaticString)))))) (default_argument_clause = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression #fileID))))))) , (parameter (local_parameter_name (identifier line)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Int)))))) (default_argument_clause = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression #line)))))))) )) (initializer_body (code_block { (statements (statement (do_statement do (code_block { (statements (statement (expression (try_operator try) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (initializer_suffix . init) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier pattern))) (explicit_member_suffix . (identifier string)))))) , (function_call_argument (argument_name (identifier options) :) (identifier options))) )))))))) }) (catch_clauses (catch_clause catch (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier fatalError))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal (interpolated_string_literal " Invalid regular expression:  \( (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier error))) (explicit_member_suffix . (identifier localizedDescription))))) ) "))))))))) , (function_call_argument (argument_name (identifier file) :) (identifier file)) , (function_call_argument (argument_name (identifier line) :) (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier UInt))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier line))) )))))))) )))))))) })))))) }))))) (struct_member (declaration (initializer_declaration (initializer_head (attributes (attribute @ (attribute_name (identifier _disfavoredOverload)))) (declaration_modifiers (declaration_modifier (access_level_modifier public))) init) (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier pattern)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) , (parameter (local_parameter_name (identifier options)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Options)))))) (default_argument_clause = (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (array_literal [ ]))))))))) )) throws (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (initializer_suffix . init) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (try_operator try) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier NSRegularExpression))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier pattern) :) (identifier pattern)) , (function_call_argument (argument_name (identifier options) :) (identifier options))) )))))))) )))))))) }))))) (struct_member (declaration (initializer_declaration (initializer_head (attributes (attribute @ (attribute_name (identifier _disfavoredOverload)))) (declaration_modifiers (declaration_modifier (access_level_modifier public))) init) (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier _)) (local_parameter_name (identifier regularExpression)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier NSRegularExpression)))))))) )) (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier nsRegex)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier regularExpression)))))))))) })))))) })))) (statement (declaration (extension_declaration extension (type_identifier (type_name (identifier Regex))) (extension_body { (extension_members (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) func) (function_name (identifier isMatched)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier by)) (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier firstMatch))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (identifier string))) ))))) (binary_expressions (binary_expression (binary_operator (operator (operator_head !) (operator_characters (operator_character (operator_head =))))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) }))))) (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) func) (function_name (identifier firstMatch)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier in)) (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (type (protocol_composition_type (type_identifier (type_name (identifier Match))))) ?))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier nsRegex))) (explicit_member_suffix . (identifier firstMatch)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (identifier string))) ))) (explicit_member_suffix . (identifier map)) (function_call_suffix (trailing_closures (closure_expression { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Match))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier checkingResult) :) (identifier $0)) , (function_call_argument (argument_name (identifier string) :) (identifier string))) )))))))) })))))))) }))))) (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) func) (function_name (identifier allMatches)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier in)) (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (array_type [ (type (protocol_composition_type (type_identifier (type_name (identifier Match))))) ])))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier nsRegex))) (explicit_member_suffix . (identifier matches)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier in) :) (identifier string))) ))) (explicit_member_suffix . (identifier map)) (function_call_suffix (trailing_closures (closure_expression { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Match))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier checkingResult) :) (identifier $0)) , (function_call_argument (argument_name (identifier string) :) (identifier string))) )))))))) })))))))) })))))) })))) (statement (declaration (extension_declaration extension (type_identifier (type_name (identifier Regex))) (extension_body { (extension_members (extension_member (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) var) (variable_name (identifier pattern)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))) (getter_setter_block (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier nsRegex))) (explicit_member_suffix . (identifier pattern))))))) }))))) (extension_member (declaration (variable_declaration (variable_declaration_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) var) (variable_name (identifier options)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Options)))))) (getter_setter_block (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier nsRegex))) (explicit_member_suffix . (identifier options))))))) })))))) })))) (statement (declaration (extension_declaration extension (type_identifier (type_name (identifier Regex))) (extension_body { (extension_members (extension_member (declaration (typealias_declaration (access_level_modifier public) typealias (typealias_name (identifier Options)) (typealias_assignment = (type (protocol_composition_type (type_identifier (type_name (identifier NSRegularExpression)) . (type_identifier (type_name (identifier Options)))))))))) (extension_member (declaration (typealias_declaration (access_level_modifier public) typealias (typealias_name (identifier MatchingOptions)) (typealias_assignment = (type (protocol_composition_type (type_identifier (type_name (identifier NSRegularExpression)) . (type_identifier (type_name (identifier MatchingOptions)))))))))) (extension_member (declaration (struct_declaration (access_level_modifier public) struct (struct_name (identifier Match)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier Hashable))))) (struct_body { (struct_members (struct_member (declaration (struct_declaration (access_level_modifier public) struct (struct_name (identifier Group)) (type_inheritance_clause : (type_inheritance_list (type_identifier (type_name (identifier Hashable))))) (struct_body { (struct_members (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier public))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier value)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))))))) (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier public))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier range)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Range)) (generic_argument_clause < (generic_argument_list (generic_argument (type (protocol_composition_type (type_identifier (type_name (identifier String)) . (type_identifier (type_name (identifier Index)))))))) >))))))))))) (struct_member (declaration (initializer_declaration (initializer_head (declaration_modifiers (declaration_modifier (access_level_modifier fileprivate))) init) (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier originalString)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) , (parameter (local_parameter_name (identifier range)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier NSRange)))))))) )) (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier range)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Range))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (identifier range)) , (function_call_argument (argument_name (identifier in) :) (identifier originalString))) ))) (forced_value_suffix !))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier value)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier String))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier originalString))) (subscript_suffix [ (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier range))))))) ])))))) )))))))))) })))))) })))) (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier fileprivate))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier originalString)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))))))) (struct_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier checkingResult)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier NSTextCheckingResult)))))))))))) (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier public))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier value)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))))))) (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier public))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier range)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Range)) (generic_argument_clause < (generic_argument_list (generic_argument (type (protocol_composition_type (type_identifier (type_name (identifier String)) . (type_identifier (type_name (identifier Index)))))))) >))))))))))) (struct_member (declaration (constant_declaration (declaration_modifiers (declaration_modifier (access_level_modifier public))) let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier groups)) (type_annotation : (type (array_type [ (type (protocol_composition_type (type_identifier (type_name (identifier Group))))) ]))))))))) (struct_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public))) func) (function_name (identifier group)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier named)) (local_parameter_name (identifier name)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (type (protocol_composition_type (type_identifier (type_name (identifier Group))))) ?))) (function_body (code_block { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier range))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))) (explicit_member_suffix . (identifier range)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier withName) :) (identifier name))) )))))))))))) (statement (branch_statement (guard_statement guard (condition_list (condition (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier range))) (explicit_member_suffix . (identifier length)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))) else (code_block { (statements (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (nil_literal nil))))))))))) })))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Group))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier originalString) :) (identifier originalString)) , (function_call_argument (argument_name (identifier range) :) (identifier range))) )))))))))) }))))) (struct_member (declaration (initializer_declaration (initializer_head (declaration_modifiers (declaration_modifier (access_level_modifier fileprivate))) init) (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier checkingResult)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier NSTextCheckingResult))))))) , (parameter (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (initializer_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier checkingResult)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier originalString)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier string))))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier value)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier string))) (subscript_suffix [ (function_call_argument_list (function_call_argument (argument_name (identifier nsRange) :) (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))) (explicit_member_suffix . (identifier range))))))) ]) (forced_value_suffix !) (explicit_member_suffix . (identifier string)))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier range)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Range))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))) (explicit_member_suffix . (identifier range)))))) , (function_call_argument (argument_name (identifier in) :) (identifier string))) ))) (forced_value_suffix !))))))) (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier self))) (explicit_member_suffix . (identifier groups)))) (binary_expressions (binary_expression (binary_operator (operator (operator_head =))) (prefix_expression (postfix_expression (primary_expression (parenthesized_expression ( (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))) (binary_expressions (binary_expression (binary_operator (operator (dot_operator_head .) (dot_operator_characters (dot_operator_character .) (dot_operator_character (operator_character (operator_head <)))))) (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))) (explicit_member_suffix . (identifier numberOfRanges))))))) ))) (explicit_member_suffix . (identifier map)) (function_call_suffix (trailing_closures (closure_expression { (statements (statement (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (identifier range))) (initializer = (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier checkingResult))) (explicit_member_suffix . (identifier range)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier at) :) (identifier $0))) )))))))))))) (statement (control_transfer_statement (return_statement return (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier Group))) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier originalString) :) (identifier string)) , (function_call_argument (argument_name (identifier range) :) (identifier range))) )))))))))) })))))))))) })))))) }))))) })))) (statement (declaration (extension_declaration extension (type_identifier (type_name (identifier Regex))) (extension_body { (extension_members (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifier static)) func) (function_name (operator (operator_head ~) (operator_characters (operator_character (operator_head =))))) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) , (parameter (local_parameter_name (identifier regex)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Self)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier regex))) (explicit_member_suffix . (identifier isMatched)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier by) :) (identifier string))) )))))))) }))))) (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifier static)) func) (function_name (operator (operator_head ~) (operator_characters (operator_character (operator_head =))))) (function_signature (parameter_clause ( (parameter_list (parameter (local_parameter_name (identifier regex)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier Self))))))) , (parameter (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier Bool))))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier regex))) (explicit_member_suffix . (identifier isMatched)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier by) :) (identifier string))) )))))))) })))))) })))) (statement (declaration (extension_declaration extension (type_identifier (type_name (identifier Regex))) (extension_body { (extension_members (extension_member (declaration (function_declaration (function_head (declaration_modifiers (declaration_modifier (access_level_modifier public)) (declaration_modifier static)) func) (function_name (identifier escapingPattern)) (function_signature (parameter_clause ( (parameter_list (parameter (external_parameter_name (identifier for)) (local_parameter_name (identifier string)) (type_annotation : (type (protocol_composition_type (type_identifier (type_name (identifier String)))))))) )) (function_result (arrow_operator - >) (type (protocol_composition_type (type_identifier (type_name (identifier String))))))) (function_body (code_block { (statements (statement (expression (prefix_expression (postfix_expression (primary_expression (unqualified_name (identifier NSRegularExpression))) (explicit_member_suffix . (identifier escapedPattern)) (function_call_suffix (function_call_argument_clause ( (function_call_argument_list (function_call_argument (argument_name (identifier for) :) (identifier string))) )))))))) })))))) }))))) <EOF>)