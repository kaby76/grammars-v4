(top_level (statements (statements_impl (statement (declaration (import_declaration import (import_path (import_path_identifier (declaration_identifier UIKit)))))) (statements_impl (statement (declaration (operator_declaration (prefix_operator_declaration prefix operator (operator_ (operator_head ^)))))) (statements_impl (statement (declaration (operator_declaration (postfix_operator_declaration postfix operator (operator_ (operator_head ^)))))) (statements_impl (statement (declaration (operator_declaration (infix_operator_declaration infix operator (operator_ (operator_head ^)))))) (statements_impl (statement (declaration (operator_declaration (prefix_operator_declaration prefix operator (operator_ (operator_head âˆš)))))) (statements_impl (statement (declaration (class_declaration (access_level_modifier public) class (class_name (declaration_identifier OperatorTest)) (class_body { (class_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier testString)) (type_annotation : (type_ (type_identifier (type_name (declaration_identifier String)))))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "hey"))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier subtractionTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 100))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5)))))))))))))))) (class_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier multiplicationTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head *))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 9)))))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier additionTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier moduleTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head %))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier gtTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier ltTest))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head <))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier not))) (initializer (assignment_operator =) (expression (prefix_expression (prefix_operator (operator_ (operator_head !))) (postfix_expression (primary_expression (parenthesized_expression ( (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 5))))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head >))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10)))))))))) )))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier x)) (type_annotation : (type_ (type_ (type_identifier (type_name (declaration_identifier Int)))) ?))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 0)))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier y))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1)))))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier z)))) , (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier _))))) ))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (tuple_expression ( (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 10))))))))) , (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 20))))))))) )))))))))))) (class_member (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier a)))) , (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier _)))) , (tuple_pattern_element (pattern (tuple_pattern ( (tuple_pattern_element_list (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier b)))) , (tuple_pattern_element (pattern (identifier_pattern (declaration_identifier c))))) ))))) ))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (tuple_expression ( (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "test")))))))) , (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal 9.45)))))))) , (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (tuple_expression ( (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 12))))))))) , (tuple_element (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 3))))))))) ))))))) )))))))))))) (class_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier bat))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "BAT"))))))))))))) (class_member (declaration (constant_declaration let (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier man))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "MAN"))))))))))))) (class_member (declaration (function_declaration (function_head func) (function_name (declaration_identifier increment)) (function_signature (parameter_clause ( )) (function_result (arrow_operator - >) (type_ (type_identifier (type_name (declaration_identifier Void)))))) (function_body (code_block { (statements (statements_impl (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (declaration_identifier x))) (postfix_operator (operator_ (operator_head !))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statements_impl (statement (expression (prefix_expression (postfix_expression (postfix_expression (primary_expression (declaration_identifier x))) (postfix_operator (operator_ (operator_head !))))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statements_impl (statement (expression (prefix_expression (postfix_expression (primary_expression (declaration_identifier y)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head +) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statements_impl (statement (expression (prefix_expression (postfix_expression (primary_expression (declaration_identifier y)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head -) (operator_character (operator_head =)))) (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))) (statements_impl (statement (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (string_literal "\(bat)\(man)")))))))))))))) }))))) }))))))))))) <EOF>)