(top_level (statements (statements_impl (statement (compiler_control_statement (conditional_compilation_block (if_directive_clause (if_directive #if) (compilation_condition (label_identifier Debug)) (statements (statements_impl (statement (expression (prefix_expression (postfix_expression (primary_expression (declaration_identifier slogLevel)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (declaration_identifier SLogLevel))) . (declaration_identifier Verbose)))))))))) (else_directive_clause (else_directive #else) (statements (statements_impl (statement (compiler_control_statement (conditional_compilation_block (if_directive_clause (if_directive #if) (compilation_condition (label_identifier Release)) (statements (statements_impl (statement (expression (prefix_expression (postfix_expression (primary_expression (declaration_identifier slogLevel)))) (binary_expressions (binary_expression (binary_operator (operator_ (operator_head =))) (prefix_expression (postfix_expression (postfix_expression (primary_expression (declaration_identifier SLogLevel))) . (declaration_identifier Error)))))))))) (endif_directive #endif))))))) (endif_directive #endif)))) (statements_impl (statement (compiler_control_statement (conditional_compilation_block (if_directive_clause (if_directive #if) (compilation_condition (compilation_condition (label_identifier Debug)) (compilation_condition_AND & &) (compilation_condition ! (compilation_condition (label_identifier Foo)))) (statements (statements_impl (statement (declaration (variable_declaration (variable_declaration_head var) (pattern_initializer_list (pattern_initializer (pattern (identifier_pattern (declaration_identifier x))) (initializer (assignment_operator =) (expression (prefix_expression (postfix_expression (primary_expression (literal_expression (literal (numeric_literal (integer_literal 1))))))))))))))))) (endif_directive #endif))))))) <EOF>)